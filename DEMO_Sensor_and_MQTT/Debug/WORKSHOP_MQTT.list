
WORKSHOP_MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e398  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800e5d0  0800e5d0  0000f5d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ea40  0800ea40  0000fa40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ea48  0800ea48  0000fa48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ea4c  0800ea4c  0000fa4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d4  20000000  0800ea50  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000254c  200001d4  0800ec24  000101d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002720  0800ec24  00010720  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029348  00000000  00000000  0001020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004863  00000000  00000000  00039552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022d0  00000000  00000000  0003ddb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001b1a  00000000  00000000  00040088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00006af1  00000000  00000000  00041ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028e12  00000000  00000000  00048693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015349f  00000000  00000000  000714a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c4944  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a50c  00000000  00000000  001c4988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007a  00000000  00000000  001cee94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001d4 	.word	0x200001d4
 8000254:	00000000 	.word	0x00000000
 8000258:	0800e5b8 	.word	0x0800e5b8

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001d8 	.word	0x200001d8
 8000274:	0800e5b8 	.word	0x0800e5b8

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bc4:	f000 b97e 	b.w	8000ec4 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000be6:	460c      	mov	r4, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14d      	bne.n	8000c88 <__udivmoddi4+0xa8>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	460f      	mov	r7, r1
 8000bf0:	4684      	mov	ip, r0
 8000bf2:	4696      	mov	lr, r2
 8000bf4:	fab2 f382 	clz	r3, r2
 8000bf8:	d960      	bls.n	8000cbc <__udivmoddi4+0xdc>
 8000bfa:	b14b      	cbz	r3, 8000c10 <__udivmoddi4+0x30>
 8000bfc:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c00:	f1c3 0220 	rsb	r2, r3, #32
 8000c04:	409f      	lsls	r7, r3
 8000c06:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0e:	4317      	orrs	r7, r2
 8000c10:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c14:	fa1f f48e 	uxth.w	r4, lr
 8000c18:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c1c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c20:	fb06 7711 	mls	r7, r6, r1, r7
 8000c24:	fb01 f004 	mul.w	r0, r1, r4
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x62>
 8000c30:	eb1e 0202 	adds.w	r2, lr, r2
 8000c34:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x60>
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	f200 812d 	bhi.w	8000e9a <__udivmoddi4+0x2ba>
 8000c40:	4639      	mov	r1, r7
 8000c42:	1a12      	subs	r2, r2, r0
 8000c44:	fa1f fc8c 	uxth.w	ip, ip
 8000c48:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c4c:	fb06 2210 	mls	r2, r6, r0, r2
 8000c50:	fb00 f404 	mul.w	r4, r0, r4
 8000c54:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c58:	4564      	cmp	r4, ip
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x8e>
 8000c5c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0x8c>
 8000c66:	4564      	cmp	r4, ip
 8000c68:	f200 811a 	bhi.w	8000ea0 <__udivmoddi4+0x2c0>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c72:	ebac 0c04 	sub.w	ip, ip, r4
 8000c76:	2100      	movs	r1, #0
 8000c78:	b125      	cbz	r5, 8000c84 <__udivmoddi4+0xa4>
 8000c7a:	fa2c f303 	lsr.w	r3, ip, r3
 8000c7e:	2200      	movs	r2, #0
 8000c80:	e9c5 3200 	strd	r3, r2, [r5]
 8000c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d905      	bls.n	8000c98 <__udivmoddi4+0xb8>
 8000c8c:	b10d      	cbz	r5, 8000c92 <__udivmoddi4+0xb2>
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	2100      	movs	r1, #0
 8000c94:	4608      	mov	r0, r1
 8000c96:	e7f5      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d14d      	bne.n	8000d3c <__udivmoddi4+0x15c>
 8000ca0:	42a3      	cmp	r3, r4
 8000ca2:	f0c0 80f2 	bcc.w	8000e8a <__udivmoddi4+0x2aa>
 8000ca6:	4290      	cmp	r0, r2
 8000ca8:	f080 80ef 	bcs.w	8000e8a <__udivmoddi4+0x2aa>
 8000cac:	4606      	mov	r6, r0
 8000cae:	4623      	mov	r3, r4
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	2d00      	cmp	r5, #0
 8000cb4:	d0e6      	beq.n	8000c84 <__udivmoddi4+0xa4>
 8000cb6:	e9c5 6300 	strd	r6, r3, [r5]
 8000cba:	e7e3      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f040 80a2 	bne.w	8000e06 <__udivmoddi4+0x226>
 8000cc2:	1a8a      	subs	r2, r1, r2
 8000cc4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000cc8:	fa1f f68e 	uxth.w	r6, lr
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb2 f4f7 	udiv	r4, r2, r7
 8000cd2:	fb07 2014 	mls	r0, r7, r4, r2
 8000cd6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb06 f004 	mul.w	r0, r6, r4
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d90f      	bls.n	8000d06 <__udivmoddi4+0x126>
 8000ce6:	eb1e 0202 	adds.w	r2, lr, r2
 8000cea:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	d903      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	f000 80c8 	beq.w	8000e94 <__udivmoddi4+0x2b4>
 8000d04:	4644      	mov	r4, r8
 8000d06:	1a12      	subs	r2, r2, r0
 8000d08:	fa1f fc8c 	uxth.w	ip, ip
 8000d0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d10:	fb07 2210 	mls	r2, r7, r0, r2
 8000d14:	fb00 f606 	mul.w	r6, r0, r6
 8000d18:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d1c:	4566      	cmp	r6, ip
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x152>
 8000d20:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x150>
 8000d2a:	4566      	cmp	r6, ip
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d30:	4610      	mov	r0, r2
 8000d32:	ebac 0c06 	sub.w	ip, ip, r6
 8000d36:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d3a:	e79d      	b.n	8000c78 <__udivmoddi4+0x98>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d46:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4a:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4e:	40f4      	lsrs	r4, r6
 8000d50:	408a      	lsls	r2, r1
 8000d52:	431f      	orrs	r7, r3
 8000d54:	ea4e 030c 	orr.w	r3, lr, ip
 8000d58:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6c:	fb08 4410 	mls	r4, r8, r0, r4
 8000d70:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d74:	fb00 f90c 	mul.w	r9, r0, ip
 8000d78:	45a1      	cmp	r9, r4
 8000d7a:	d90e      	bls.n	8000d9a <__udivmoddi4+0x1ba>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d82:	bf2c      	ite	cs
 8000d84:	f04f 0b01 	movcs.w	fp, #1
 8000d88:	f04f 0b00 	movcc.w	fp, #0
 8000d8c:	45a1      	cmp	r9, r4
 8000d8e:	d903      	bls.n	8000d98 <__udivmoddi4+0x1b8>
 8000d90:	f1bb 0f00 	cmp.w	fp, #0
 8000d94:	f000 8093 	beq.w	8000ebe <__udivmoddi4+0x2de>
 8000d98:	4650      	mov	r0, sl
 8000d9a:	eba4 0409 	sub.w	r4, r4, r9
 8000d9e:	fa1f f983 	uxth.w	r9, r3
 8000da2:	fbb4 f3f8 	udiv	r3, r4, r8
 8000da6:	fb08 4413 	mls	r4, r8, r3, r4
 8000daa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d906      	bls.n	8000dc4 <__udivmoddi4+0x1e4>
 8000db6:	193c      	adds	r4, r7, r4
 8000db8:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 8000dbc:	d201      	bcs.n	8000dc2 <__udivmoddi4+0x1e2>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d87a      	bhi.n	8000eb8 <__udivmoddi4+0x2d8>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dc8:	eba4 040c 	sub.w	r4, r4, ip
 8000dcc:	fba0 9802 	umull	r9, r8, r0, r2
 8000dd0:	4544      	cmp	r4, r8
 8000dd2:	46cc      	mov	ip, r9
 8000dd4:	4643      	mov	r3, r8
 8000dd6:	d302      	bcc.n	8000dde <__udivmoddi4+0x1fe>
 8000dd8:	d106      	bne.n	8000de8 <__udivmoddi4+0x208>
 8000dda:	45ce      	cmp	lr, r9
 8000ddc:	d204      	bcs.n	8000de8 <__udivmoddi4+0x208>
 8000dde:	3801      	subs	r0, #1
 8000de0:	ebb9 0c02 	subs.w	ip, r9, r2
 8000de4:	eb68 0307 	sbc.w	r3, r8, r7
 8000de8:	b15d      	cbz	r5, 8000e02 <__udivmoddi4+0x222>
 8000dea:	ebbe 020c 	subs.w	r2, lr, ip
 8000dee:	eb64 0403 	sbc.w	r4, r4, r3
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	431e      	orrs	r6, r3
 8000dfe:	e9c5 6400 	strd	r6, r4, [r5]
 8000e02:	2100      	movs	r1, #0
 8000e04:	e73e      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000e06:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e0a:	f1c3 0120 	rsb	r1, r3, #32
 8000e0e:	fa04 f203 	lsl.w	r2, r4, r3
 8000e12:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e16:	40cc      	lsrs	r4, r1
 8000e18:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e1c:	fa20 f101 	lsr.w	r1, r0, r1
 8000e20:	fa1f f68e 	uxth.w	r6, lr
 8000e24:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	fb07 4410 	mls	r4, r7, r0, r4
 8000e2e:	0c11      	lsrs	r1, r2, #16
 8000e30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e34:	fb00 f406 	mul.w	r4, r0, r6
 8000e38:	428c      	cmp	r4, r1
 8000e3a:	d90e      	bls.n	8000e5a <__udivmoddi4+0x27a>
 8000e3c:	eb1e 0101 	adds.w	r1, lr, r1
 8000e40:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8000e44:	bf2c      	ite	cs
 8000e46:	f04f 0901 	movcs.w	r9, #1
 8000e4a:	f04f 0900 	movcc.w	r9, #0
 8000e4e:	428c      	cmp	r4, r1
 8000e50:	d902      	bls.n	8000e58 <__udivmoddi4+0x278>
 8000e52:	f1b9 0f00 	cmp.w	r9, #0
 8000e56:	d02c      	beq.n	8000eb2 <__udivmoddi4+0x2d2>
 8000e58:	4640      	mov	r0, r8
 8000e5a:	1b09      	subs	r1, r1, r4
 8000e5c:	b292      	uxth	r2, r2
 8000e5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e62:	fb07 1114 	mls	r1, r7, r4, r1
 8000e66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e6a:	fb04 f106 	mul.w	r1, r4, r6
 8000e6e:	4291      	cmp	r1, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x2a2>
 8000e72:	eb1e 0202 	adds.w	r2, lr, r2
 8000e76:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8000e7a:	d201      	bcs.n	8000e80 <__udivmoddi4+0x2a0>
 8000e7c:	4291      	cmp	r1, r2
 8000e7e:	d815      	bhi.n	8000eac <__udivmoddi4+0x2cc>
 8000e80:	4644      	mov	r4, r8
 8000e82:	1a52      	subs	r2, r2, r1
 8000e84:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000e88:	e721      	b.n	8000cce <__udivmoddi4+0xee>
 8000e8a:	1a86      	subs	r6, r0, r2
 8000e8c:	eb64 0303 	sbc.w	r3, r4, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	e70e      	b.n	8000cb2 <__udivmoddi4+0xd2>
 8000e94:	3c02      	subs	r4, #2
 8000e96:	4472      	add	r2, lr
 8000e98:	e735      	b.n	8000d06 <__udivmoddi4+0x126>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4472      	add	r2, lr
 8000e9e:	e6d0      	b.n	8000c42 <__udivmoddi4+0x62>
 8000ea0:	44f4      	add	ip, lr
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	e6e3      	b.n	8000c6e <__udivmoddi4+0x8e>
 8000ea6:	44f4      	add	ip, lr
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x152>
 8000eac:	3c02      	subs	r4, #2
 8000eae:	4472      	add	r2, lr
 8000eb0:	e7e7      	b.n	8000e82 <__udivmoddi4+0x2a2>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4471      	add	r1, lr
 8000eb6:	e7d0      	b.n	8000e5a <__udivmoddi4+0x27a>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	443c      	add	r4, r7
 8000ebc:	e782      	b.n	8000dc4 <__udivmoddi4+0x1e4>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	443c      	add	r4, r7
 8000ec2:	e76a      	b.n	8000d9a <__udivmoddi4+0x1ba>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <EMPA_SensorInit>:
extern MDF_FilterConfigTypeDef AdfFilterConfig0;
extern MDF_HandleTypeDef AdfHandle0;
extern DMA_HandleTypeDef handle_GPDMA1_Channel11;
//IMP34DT05 End

uint8_t EMPA_SensorInit(void) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
//SHT4X Init Start
	if (BSP_I2C1_Init() != HAL_OK)
 8000ecc:	f000 f89e 	bl	800100c <BSP_I2C1_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <EMPA_SensorInit+0x12>
		return 1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e059      	b.n	8000f8e <EMPA_SensorInit+0xc6>
	if (sht4x_serial_number(&sht4x_serialnumber) == 1)
 8000eda:	482e      	ldr	r0, [pc, #184]	@ (8000f94 <EMPA_SensorInit+0xcc>)
 8000edc:	f000 ff38 	bl	8001d50 <sht4x_serial_number>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d101      	bne.n	8000eea <EMPA_SensorInit+0x22>
		return 1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e051      	b.n	8000f8e <EMPA_SensorInit+0xc6>
//SHT4X Init End

//ISM330IS Init Start
	ism330_ctx.BusType = ISM330IS_I2C_BUS;
 8000eea:	4b2b      	ldr	r3, [pc, #172]	@ (8000f98 <EMPA_SensorInit+0xd0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
	ism330_ctx.Address = ISM330IS_I2C_ADD_H;
 8000ef0:	4b29      	ldr	r3, [pc, #164]	@ (8000f98 <EMPA_SensorInit+0xd0>)
 8000ef2:	22d7      	movs	r2, #215	@ 0xd7
 8000ef4:	731a      	strb	r2, [r3, #12]
	ism330_ctx.Init = BSP_I2C1_Init;
 8000ef6:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <EMPA_SensorInit+0xd0>)
 8000ef8:	4a28      	ldr	r2, [pc, #160]	@ (8000f9c <EMPA_SensorInit+0xd4>)
 8000efa:	601a      	str	r2, [r3, #0]
	ism330_ctx.DeInit = BSP_I2C1_DeInit;
 8000efc:	4b26      	ldr	r3, [pc, #152]	@ (8000f98 <EMPA_SensorInit+0xd0>)
 8000efe:	4a28      	ldr	r2, [pc, #160]	@ (8000fa0 <EMPA_SensorInit+0xd8>)
 8000f00:	605a      	str	r2, [r3, #4]
	ism330_ctx.ReadReg = BSP_I2C1_ReadReg;
 8000f02:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <EMPA_SensorInit+0xd0>)
 8000f04:	4a27      	ldr	r2, [pc, #156]	@ (8000fa4 <EMPA_SensorInit+0xdc>)
 8000f06:	615a      	str	r2, [r3, #20]
	ism330_ctx.WriteReg = BSP_I2C1_WriteReg;
 8000f08:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <EMPA_SensorInit+0xd0>)
 8000f0a:	4a27      	ldr	r2, [pc, #156]	@ (8000fa8 <EMPA_SensorInit+0xe0>)
 8000f0c:	611a      	str	r2, [r3, #16]
	ism330_ctx.GetTick = BSP_GetTick;
 8000f0e:	4b22      	ldr	r3, [pc, #136]	@ (8000f98 <EMPA_SensorInit+0xd0>)
 8000f10:	4a26      	ldr	r2, [pc, #152]	@ (8000fac <EMPA_SensorInit+0xe4>)
 8000f12:	619a      	str	r2, [r3, #24]

	if (ISM330IS_RegisterBusIO(&ism330_obj_o, &ism330_ctx) != ISM330IS_OK)
 8000f14:	4920      	ldr	r1, [pc, #128]	@ (8000f98 <EMPA_SensorInit+0xd0>)
 8000f16:	4826      	ldr	r0, [pc, #152]	@ (8000fb0 <EMPA_SensorInit+0xe8>)
 8000f18:	f001 fa7a 	bl	8002410 <ISM330IS_RegisterBusIO>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <EMPA_SensorInit+0x5e>
		return 1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e033      	b.n	8000f8e <EMPA_SensorInit+0xc6>

	if (ISM330IS_ReadID(&ism330_obj_o, &ism330_id) != ISM330IS_OK)
 8000f26:	4923      	ldr	r1, [pc, #140]	@ (8000fb4 <EMPA_SensorInit+0xec>)
 8000f28:	4821      	ldr	r0, [pc, #132]	@ (8000fb0 <EMPA_SensorInit+0xe8>)
 8000f2a:	f001 fb43 	bl	80025b4 <ISM330IS_ReadID>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <EMPA_SensorInit+0x70>
		return 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e02a      	b.n	8000f8e <EMPA_SensorInit+0xc6>

	if (ism330_id != ISM330IS_ID)
 8000f38:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <EMPA_SensorInit+0xec>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b22      	cmp	r3, #34	@ 0x22
 8000f3e:	d001      	beq.n	8000f44 <EMPA_SensorInit+0x7c>
		return 1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e024      	b.n	8000f8e <EMPA_SensorInit+0xc6>

	if (ISM330IS_Init(&ism330_obj_o) != ISM330IS_OK)
 8000f44:	481a      	ldr	r0, [pc, #104]	@ (8000fb0 <EMPA_SensorInit+0xe8>)
 8000f46:	f001 fac9 	bl	80024dc <ISM330IS_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <EMPA_SensorInit+0x8c>
		return 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e01c      	b.n	8000f8e <EMPA_SensorInit+0xc6>

	if (ISM330IS_ACC_Enable(&ism330_obj_o) != ISM330IS_OK)
 8000f54:	4816      	ldr	r0, [pc, #88]	@ (8000fb0 <EMPA_SensorInit+0xe8>)
 8000f56:	f001 fb45 	bl	80025e4 <ISM330IS_ACC_Enable>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <EMPA_SensorInit+0x9c>
		return 1;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e014      	b.n	8000f8e <EMPA_SensorInit+0xc6>

	if (ISM330IS_GYRO_Enable(&ism330_obj_o) != ISM330IS_OK)
 8000f64:	4812      	ldr	r0, [pc, #72]	@ (8000fb0 <EMPA_SensorInit+0xe8>)
 8000f66:	f001 fb64 	bl	8002632 <ISM330IS_GYRO_Enable>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <EMPA_SensorInit+0xac>
		return 1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e00c      	b.n	8000f8e <EMPA_SensorInit+0xc6>

	HAL_Delay(300);
 8000f74:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f78:	f001 fe98 	bl	8002cac <HAL_Delay>
//ISM330IS Init End

//IMP34DT05 Init Start
	MX_MDFQueue_Config();
 8000f7c:	f000 fa44 	bl	8001408 <MX_MDFQueue_Config>
	HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel11, &MDFQueue);
 8000f80:	490d      	ldr	r1, [pc, #52]	@ (8000fb8 <EMPA_SensorInit+0xf0>)
 8000f82:	480e      	ldr	r0, [pc, #56]	@ (8000fbc <EMPA_SensorInit+0xf4>)
 8000f84:	f002 fcb0 	bl	80038e8 <HAL_DMAEx_List_LinkQ>
	MDF_DMAConfig();
 8000f88:	f000 f81a 	bl	8000fc0 <MDF_DMAConfig>

//IMP34DT05 Init End
	return 0;
 8000f8c:	2300      	movs	r3, #0

}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200001f4 	.word	0x200001f4
 8000f98:	20000230 	.word	0x20000230
 8000f9c:	0800100d 	.word	0x0800100d
 8000fa0:	08001089 	.word	0x08001089
 8000fa4:	0800113d 	.word	0x0800113d
 8000fa8:	080010d9 	.word	0x080010d9
 8000fac:	080011a1 	.word	0x080011a1
 8000fb0:	200001f8 	.word	0x200001f8
 8000fb4:	20000250 	.word	0x20000250
 8000fb8:	200022e4 	.word	0x200022e4
 8000fbc:	200023bc 	.word	0x200023bc

08000fc0 <MDF_DMAConfig>:

	return 0;
}

void MDF_DMAConfig(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* Initialize DMA configuration parameters */
  DMAConfig.Address                              = (uint32_t)&RecBuff[0];
 8000fc4:	4a07      	ldr	r2, [pc, #28]	@ (8000fe4 <MDF_DMAConfig+0x24>)
 8000fc6:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <MDF_DMAConfig+0x28>)
 8000fc8:	601a      	str	r2, [r3, #0]
  DMAConfig.DataLength                           = (REC_BUFF_SIZE * 4U);
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <MDF_DMAConfig+0x28>)
 8000fcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fd0:	605a      	str	r2, [r3, #4]
  DMAConfig.MsbOnly                              = ENABLE;
 8000fd2:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <MDF_DMAConfig+0x28>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	721a      	strb	r2, [r3, #8]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000264 	.word	0x20000264
 8000fe8:	20000258 	.word	0x20000258

08000fec <HAL_MDF_AcqCpltCallback>:
{
    DmaRecHalfBuffCplt = 1;
}

void HAL_MDF_AcqCpltCallback(MDF_HandleTypeDef *hmdf)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
    DmaRecBuffCplt = 1;
 8000ff4:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <HAL_MDF_AcqCpltCallback+0x1c>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000254 	.word	0x20000254

0800100c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <BSP_I2C1_Init+0x70>)
 8001018:	4a19      	ldr	r2, [pc, #100]	@ (8001080 <BSP_I2C1_Init+0x74>)
 800101a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800101c:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <BSP_I2C1_Init+0x78>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	4918      	ldr	r1, [pc, #96]	@ (8001084 <BSP_I2C1_Init+0x78>)
 8001024:	600a      	str	r2, [r1, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d122      	bne.n	8001070 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800102a:	4814      	ldr	r0, [pc, #80]	@ (800107c <BSP_I2C1_Init+0x70>)
 800102c:	f004 f8d4 	bl	80051d8 <HAL_I2C_GetState>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d11c      	bne.n	8001070 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001036:	4811      	ldr	r0, [pc, #68]	@ (800107c <BSP_I2C1_Init+0x70>)
 8001038:	f000 f8fe 	bl	8001238 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d116      	bne.n	8001070 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001042:	480e      	ldr	r0, [pc, #56]	@ (800107c <BSP_I2C1_Init+0x70>)
 8001044:	f000 f8b4 	bl	80011b0 <MX_I2C1_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800104e:	f06f 0307 	mvn.w	r3, #7
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	e00c      	b.n	8001070 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001056:	2100      	movs	r1, #0
 8001058:	4808      	ldr	r0, [pc, #32]	@ (800107c <BSP_I2C1_Init+0x70>)
 800105a:	f004 fc25 	bl	80058a8 <HAL_I2CEx_ConfigAnalogFilter>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001064:	f06f 0307 	mvn.w	r3, #7
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	e001      	b.n	8001070 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20002268 	.word	0x20002268
 8001080:	40005400 	.word	0x40005400
 8001084:	200022bc 	.word	0x200022bc

08001088 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <BSP_I2C1_DeInit+0x48>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d014      	beq.n	80010c4 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <BSP_I2C1_DeInit+0x48>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3b01      	subs	r3, #1
 80010a0:	4a0b      	ldr	r2, [pc, #44]	@ (80010d0 <BSP_I2C1_DeInit+0x48>)
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <BSP_I2C1_DeInit+0x48>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d10b      	bne.n	80010c4 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80010ac:	4809      	ldr	r0, [pc, #36]	@ (80010d4 <BSP_I2C1_DeInit+0x4c>)
 80010ae:	f000 f92d 	bl	800130c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80010b2:	4808      	ldr	r0, [pc, #32]	@ (80010d4 <BSP_I2C1_DeInit+0x4c>)
 80010b4:	f003 fc34 	bl	8004920 <HAL_I2C_DeInit>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80010be:	f06f 0307 	mvn.w	r3, #7
 80010c2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80010c4:	687b      	ldr	r3, [r7, #4]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200022bc 	.word	0x200022bc
 80010d4:	20002268 	.word	0x20002268

080010d8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	@ 0x28
 80010dc:	af04      	add	r7, sp, #16
 80010de:	60ba      	str	r2, [r7, #8]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4603      	mov	r3, r0
 80010e4:	81fb      	strh	r3, [r7, #14]
 80010e6:	460b      	mov	r3, r1
 80010e8:	81bb      	strh	r3, [r7, #12]
 80010ea:	4613      	mov	r3, r2
 80010ec:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80010f2:	89ba      	ldrh	r2, [r7, #12]
 80010f4:	89f9      	ldrh	r1, [r7, #14]
 80010f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	480c      	ldr	r0, [pc, #48]	@ (8001138 <BSP_I2C1_WriteReg+0x60>)
 8001108:	f003 fe38 	bl	8004d7c <HAL_I2C_Mem_Write>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00c      	beq.n	800112c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001112:	4809      	ldr	r0, [pc, #36]	@ (8001138 <BSP_I2C1_WriteReg+0x60>)
 8001114:	f004 f86e 	bl	80051f4 <HAL_I2C_GetError>
 8001118:	4603      	mov	r3, r0
 800111a:	2b04      	cmp	r3, #4
 800111c:	d103      	bne.n	8001126 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800111e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	e002      	b.n	800112c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001126:	f06f 0303 	mvn.w	r3, #3
 800112a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800112c:	697b      	ldr	r3, [r7, #20]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20002268 	.word	0x20002268

0800113c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	@ 0x28
 8001140:	af04      	add	r7, sp, #16
 8001142:	60ba      	str	r2, [r7, #8]
 8001144:	461a      	mov	r2, r3
 8001146:	4603      	mov	r3, r0
 8001148:	81fb      	strh	r3, [r7, #14]
 800114a:	460b      	mov	r3, r1
 800114c:	81bb      	strh	r3, [r7, #12]
 800114e:	4613      	mov	r3, r2
 8001150:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001156:	89ba      	ldrh	r2, [r7, #12]
 8001158:	89f9      	ldrh	r1, [r7, #14]
 800115a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800115e:	9302      	str	r3, [sp, #8]
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2301      	movs	r3, #1
 800116a:	480c      	ldr	r0, [pc, #48]	@ (800119c <BSP_I2C1_ReadReg+0x60>)
 800116c:	f003 ff1a 	bl	8004fa4 <HAL_I2C_Mem_Read>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00c      	beq.n	8001190 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001176:	4809      	ldr	r0, [pc, #36]	@ (800119c <BSP_I2C1_ReadReg+0x60>)
 8001178:	f004 f83c 	bl	80051f4 <HAL_I2C_GetError>
 800117c:	4603      	mov	r3, r0
 800117e:	2b04      	cmp	r3, #4
 8001180:	d103      	bne.n	800118a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001182:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	e002      	b.n	8001190 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800118a:	f06f 0303 	mvn.w	r3, #3
 800118e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001190:	697b      	ldr	r3, [r7, #20]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20002268 	.word	0x20002268

080011a0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80011a4:	f001 fd76 	bl	8002c94 <HAL_GetTick>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a1c      	ldr	r2, [pc, #112]	@ (8001230 <MX_I2C1_Init+0x80>)
 80011c0:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00F07BFF;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001234 <MX_I2C1_Init+0x84>)
 80011c6:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f003 faf9 	bl	80047ea <HAL_I2C_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001202:	2100      	movs	r1, #0
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f004 fb4f 	bl	80058a8 <HAL_I2CEx_ConfigAnalogFilter>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001214:	2100      	movs	r1, #0
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f004 fb91 	bl	800593e <HAL_I2CEx_ConfigDigitalFilter>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40005400 	.word	0x40005400
 8001234:	00f07bff 	.word	0x00f07bff

08001238 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b0ba      	sub	sp, #232	@ 0xe8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	22c0      	movs	r2, #192	@ 0xc0
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f00b fb0d 	bl	800c868 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800124e:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800125a:	2300      	movs	r3, #0
 800125c:	67bb      	str	r3, [r7, #120]	@ 0x78
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	4618      	mov	r0, r3
 8001264:	f006 fa04 	bl	8007670 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001268:	4b26      	ldr	r3, [pc, #152]	@ (8001304 <I2C1_MspInit+0xcc>)
 800126a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800126e:	4a25      	ldr	r2, [pc, #148]	@ (8001304 <I2C1_MspInit+0xcc>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001278:	4b22      	ldr	r3, [pc, #136]	@ (8001304 <I2C1_MspInit+0xcc>)
 800127a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001286:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800128a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128e:	2312      	movs	r3, #18
 8001290:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80012a0:	2304      	movs	r3, #4
 80012a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80012a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012aa:	4619      	mov	r1, r3
 80012ac:	4816      	ldr	r0, [pc, #88]	@ (8001308 <I2C1_MspInit+0xd0>)
 80012ae:	f002 ff9d 	bl	80041ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80012b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ba:	2312      	movs	r3, #18
 80012bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80012cc:	2304      	movs	r3, #4
 80012ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80012d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012d6:	4619      	mov	r1, r3
 80012d8:	480b      	ldr	r0, [pc, #44]	@ (8001308 <I2C1_MspInit+0xd0>)
 80012da:	f002 ff87 	bl	80041ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <I2C1_MspInit+0xcc>)
 80012e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012e4:	4a07      	ldr	r2, [pc, #28]	@ (8001304 <I2C1_MspInit+0xcc>)
 80012e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012ea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80012ee:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <I2C1_MspInit+0xcc>)
 80012f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80012fc:	bf00      	nop
 80012fe:	37e8      	adds	r7, #232	@ 0xe8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	46020c00 	.word	0x46020c00
 8001308:	42020400 	.word	0x42020400

0800130c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001314:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <I2C1_MspDeInit+0x34>)
 8001316:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800131a:	4a09      	ldr	r2, [pc, #36]	@ (8001340 <I2C1_MspDeInit+0x34>)
 800131c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001320:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001324:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001328:	4806      	ldr	r0, [pc, #24]	@ (8001344 <I2C1_MspDeInit+0x38>)
 800132a:	f003 f937 	bl	800459c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800132e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001332:	4804      	ldr	r0, [pc, #16]	@ (8001344 <I2C1_MspDeInit+0x38>)
 8001334:	f003 f932 	bl	800459c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	46020c00 	.word	0x46020c00
 8001344:	42020400 	.word	0x42020400

08001348 <HAL_TIM_PeriodElapsedCallback>:
extern volatile FlagStatus  mqtt_timer_en;
extern volatile  uint8_t  mqtt_timer;
extern EMPA_SectionTypeDef EMPA_Section;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a13      	ldr	r2, [pc, #76]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d11e      	bne.n	8001398 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(EMPA_Section == EMPA_SECTION_NANOEDGEAI)
 800135a:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d106      	bne.n	8001370 <HAL_TIM_PeriodElapsedCallback+0x28>
		{
			counter_timer++;
 8001362:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x64>)
 800136c:	701a      	strb	r2, [r3, #0]
			{
			  mqtt_timer = 0;
			}
		}
	}
}
 800136e:	e013      	b.n	8001398 <HAL_TIM_PeriodElapsedCallback+0x50>
		else if(EMPA_Section == EMPA_SECTION_MQTT)
 8001370:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d10f      	bne.n	8001398 <HAL_TIM_PeriodElapsedCallback+0x50>
			if(mqtt_timer_en == SET)
 8001378:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b01      	cmp	r3, #1
 8001380:	d107      	bne.n	8001392 <HAL_TIM_PeriodElapsedCallback+0x4a>
			  mqtt_timer++;
 8001382:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	3301      	adds	r3, #1
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800138e:	701a      	strb	r2, [r3, #0]
}
 8001390:	e002      	b.n	8001398 <HAL_TIM_PeriodElapsedCallback+0x50>
			  mqtt_timer = 0;
 8001392:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40012c00 	.word	0x40012c00
 80013a8:	20002264 	.word	0x20002264
 80013ac:	200001f0 	.word	0x200001f0
 80013b0:	20002265 	.word	0x20002265
 80013b4:	20002266 	.word	0x20002266

080013b8 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_BUTTON_Pin)
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013c8:	d114      	bne.n	80013f4 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
	{
		if(flag_working == 0)
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <HAL_GPIO_EXTI_Falling_Callback+0x48>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10d      	bne.n	80013ee <HAL_GPIO_EXTI_Falling_Callback+0x36>
		{
			counter_state++;
 80013d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	b29a      	uxth	r2, r3
 80013da:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80013dc:	801a      	strh	r2, [r3, #0]
			if(counter_state>2)
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d906      	bls.n	80013f4 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
				counter_state = 0;
 80013e6:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	801a      	strh	r2, [r3, #0]
		{
			flag_working = 0;
		}

	}
}
 80013ec:	e002      	b.n	80013f4 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
			flag_working = 0;
 80013ee:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <HAL_GPIO_EXTI_Falling_Callback+0x48>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	200001f1 	.word	0x200001f1
 8001404:	200001f2 	.word	0x200001f2

08001408 <MX_MDFQueue_Config>:
  * @brief  DMA Linked-list MDFQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_MDFQueue_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b09c      	sub	sp, #112	@ 0x70
 800140c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001414:	2321      	movs	r3, #33	@ 0x21
 8001416:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_ADF1_FLT0;
 8001418:	2362      	movs	r3, #98	@ 0x62
 800141a:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001428:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800142c:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800142e:	2301      	movs	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001432:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001436:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 8001438:	2301      	movs	r3, #1
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 800143c:	2301      	movs	r3, #1
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001444:	2300      	movs	r3, #0
 8001446:	633b      	str	r3, [r7, #48]	@ 0x30
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001448:	2300      	movs	r3, #0
 800144a:	647b      	str	r3, [r7, #68]	@ 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800144c:	2300      	movs	r3, #0
 800144e:	63bb      	str	r3, [r7, #56]	@ 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001450:	2300      	movs	r3, #0
 8001452:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pNodeConfig.SrcAddress = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	663b      	str	r3, [r7, #96]	@ 0x60
  pNodeConfig.DstAddress = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	667b      	str	r3, [r7, #100]	@ 0x64
  pNodeConfig.DataSize = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Build NodeRx Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &NodeRx);
 8001460:	463b      	mov	r3, r7
 8001462:	4913      	ldr	r1, [pc, #76]	@ (80014b0 <MX_MDFQueue_Config+0xa8>)
 8001464:	4618      	mov	r0, r3
 8001466:	f002 f951 	bl	800370c <HAL_DMAEx_List_BuildNode>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001472:	4313      	orrs	r3, r2
 8001474:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  /* Insert NodeRx to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&MDFQueue, &NodeRx);
 8001478:	490d      	ldr	r1, [pc, #52]	@ (80014b0 <MX_MDFQueue_Config+0xa8>)
 800147a:	480e      	ldr	r0, [pc, #56]	@ (80014b4 <MX_MDFQueue_Config+0xac>)
 800147c:	f002 f95c 	bl	8003738 <HAL_DMAEx_List_InsertNode_Tail>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001488:	4313      	orrs	r3, r2
 800148a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  ret |= HAL_DMAEx_List_SetCircularMode(&MDFQueue);
 800148e:	4809      	ldr	r0, [pc, #36]	@ (80014b4 <MX_MDFQueue_Config+0xac>)
 8001490:	f002 f9ca 	bl	8003828 <HAL_DMAEx_List_SetCircularMode>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800149c:	4313      	orrs	r3, r2
 800149e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

   return ret;
 80014a2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3770      	adds	r7, #112	@ 0x70
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200022c0 	.word	0x200022c0
 80014b4:	200022e4 	.word	0x200022e4

080014b8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80014c0:	1d39      	adds	r1, r7, #4
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014c6:	2201      	movs	r2, #1
 80014c8:	4803      	ldr	r0, [pc, #12]	@ (80014d8 <__io_putchar+0x20>)
 80014ca:	f009 fb2d 	bl	800ab28 <HAL_UART_Transmit>
	return ch;
 80014ce:	687b      	ldr	r3, [r7, #4]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20002480 	.word	0x20002480

080014dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e0:	f001 fb1e 	bl	8002b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e4:	f000 f812 	bl	800150c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e8:	f000 fa3e 	bl	8001968 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80014ec:	f000 f8ea 	bl	80016c4 <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 80014f0:	f000 f93a 	bl	8001768 <MX_ICACHE_Init>
  MX_ADF1_Init();
 80014f4:	f000 f86c 	bl	80015d0 <MX_ADF1_Init>
  MX_USART1_UART_Init();
 80014f8:	f000 f99e 	bl	8001838 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80014fc:	f000 f9e8 	bl	80018d0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001500:	f000 f946 	bl	8001790 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
#ifdef EMPA_SENSOR_INIT
  EMPA_SensorInit();
 8001504:	f7ff fce0 	bl	8000ec8 <EMPA_SensorInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <main+0x2c>

0800150c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b09e      	sub	sp, #120	@ 0x78
 8001510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001512:	f107 0318 	add.w	r3, r7, #24
 8001516:	2260      	movs	r2, #96	@ 0x60
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f00b f9a4 	bl	800c868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001520:	463b      	mov	r3, r7
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001530:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001534:	f004 fd64 	bl	8006000 <HAL_PWREx_ControlVoltageScaling>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800153e:	f000 fab9 	bl	8001ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_MSIK;
 8001542:	2350      	movs	r3, #80	@ 0x50
 8001544:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001546:	2301      	movs	r3, #1
 8001548:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800154a:	2310      	movs	r3, #16
 800154c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800154e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_3;
 8001554:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8001558:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 800155a:	2310      	movs	r3, #16
 800155c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155e:	2302      	movs	r3, #2
 8001560:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001562:	2301      	movs	r3, #1
 8001564:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800156a:	2301      	movs	r3, #1
 800156c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 800156e:	2350      	movs	r3, #80	@ 0x50
 8001570:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001572:	2302      	movs	r3, #2
 8001574:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001576:	2302      	movs	r3, #2
 8001578:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800157a:	2302      	movs	r3, #2
 800157c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 800157e:	2300      	movs	r3, #0
 8001580:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001586:	f107 0318 	add.w	r3, r7, #24
 800158a:	4618      	mov	r0, r3
 800158c:	f004 fdc4 	bl	8006118 <HAL_RCC_OscConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001596:	f000 fa8d 	bl	8001ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159a:	231f      	movs	r3, #31
 800159c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159e:	2303      	movs	r3, #3
 80015a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015b2:	463b      	mov	r3, r7
 80015b4:	2104      	movs	r1, #4
 80015b6:	4618      	mov	r0, r3
 80015b8:	f005 fc8a 	bl	8006ed0 <HAL_RCC_ClockConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80015c2:	f000 fa77 	bl	8001ab4 <Error_Handler>
  }
}
 80015c6:	bf00      	nop
 80015c8:	3778      	adds	r7, #120	@ 0x78
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 80015d4:	4b38      	ldr	r3, [pc, #224]	@ (80016b8 <MX_ADF1_Init+0xe8>)
 80015d6:	4a39      	ldr	r2, [pc, #228]	@ (80016bc <MX_ADF1_Init+0xec>)
 80015d8:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 80015da:	4b37      	ldr	r3, [pc, #220]	@ (80016b8 <MX_ADF1_Init+0xe8>)
 80015dc:	2201      	movs	r2, #1
 80015de:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = ENABLE;
 80015e0:	4b35      	ldr	r3, [pc, #212]	@ (80016b8 <MX_ADF1_Init+0xe8>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.CommonParam.OutputClock.Pins = MDF_OUTPUT_CLOCK_0;
 80015e6:	4b34      	ldr	r3, [pc, #208]	@ (80016b8 <MX_ADF1_Init+0xe8>)
 80015e8:	2220      	movs	r2, #32
 80015ea:	611a      	str	r2, [r3, #16]
  AdfHandle0.Init.CommonParam.OutputClock.Divider = 4;
 80015ec:	4b32      	ldr	r3, [pc, #200]	@ (80016b8 <MX_ADF1_Init+0xe8>)
 80015ee:	2204      	movs	r2, #4
 80015f0:	615a      	str	r2, [r3, #20]
  AdfHandle0.Init.CommonParam.OutputClock.Trigger.Activation = DISABLE;
 80015f2:	4b31      	ldr	r3, [pc, #196]	@ (80016b8 <MX_ADF1_Init+0xe8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	761a      	strb	r2, [r3, #24]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 80015f8:	4b2f      	ldr	r3, [pc, #188]	@ (80016b8 <MX_ADF1_Init+0xe8>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 8001600:	4b2d      	ldr	r3, [pc, #180]	@ (80016b8 <MX_ADF1_Init+0xe8>)
 8001602:	2210      	movs	r2, #16
 8001604:	629a      	str	r2, [r3, #40]	@ 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 8001606:	4b2c      	ldr	r3, [pc, #176]	@ (80016b8 <MX_ADF1_Init+0xe8>)
 8001608:	2200      	movs	r2, #0
 800160a:	62da      	str	r2, [r3, #44]	@ 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 31;
 800160c:	4b2a      	ldr	r3, [pc, #168]	@ (80016b8 <MX_ADF1_Init+0xe8>)
 800160e:	221f      	movs	r2, #31
 8001610:	631a      	str	r2, [r3, #48]	@ 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8001612:	4b29      	ldr	r3, [pc, #164]	@ (80016b8 <MX_ADF1_Init+0xe8>)
 8001614:	2201      	movs	r2, #1
 8001616:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 8001618:	4827      	ldr	r0, [pc, #156]	@ (80016b8 <MX_ADF1_Init+0xe8>)
 800161a:	f004 fa0d 	bl	8005a38 <HAL_MDF_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADF1_Init+0x58>
  {
    Error_Handler();
 8001624:	f000 fa46 	bl	8001ab4 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 8001628:	4b25      	ldr	r3, [pc, #148]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 800162e:	4b24      	ldr	r3, [pc, #144]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 8001634:	4b22      	ldr	r3, [pc, #136]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 8001636:	2240      	movs	r2, #64	@ 0x40
 8001638:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 64;
 800163a:	4b21      	ldr	r3, [pc, #132]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 800163c:	2240      	movs	r2, #64	@ 0x40
 800163e:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 8001640:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 8001646:	4b1e      	ldr	r3, [pc, #120]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 8001648:	2200      	movs	r2, #0
 800164a:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 800164c:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = ENABLE;
 8001654:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  AdfFilterConfig0.SoundActivity.Mode = MDF_SAD_VOICE_ACTIVITY_DETECTOR;
 800165c:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 800165e:	2200      	movs	r2, #0
 8001660:	639a      	str	r2, [r3, #56]	@ 0x38
  AdfFilterConfig0.SoundActivity.FrameSize = MDF_SAD_8_PCM_SAMPLES;
 8001662:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 8001664:	2200      	movs	r2, #0
 8001666:	63da      	str	r2, [r3, #60]	@ 0x3c
  AdfFilterConfig0.SoundActivity.Hysteresis = DISABLE;
 8001668:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  AdfFilterConfig0.SoundActivity.SoundTriggerEvent = MDF_SAD_ENTER_DETECT;
 8001670:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 8001672:	2200      	movs	r2, #0
 8001674:	645a      	str	r2, [r3, #68]	@ 0x44
  AdfFilterConfig0.SoundActivity.DataMemoryTransfer = MDF_SAD_MEMORY_TRANSFER_ALWAYS;
 8001676:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 8001678:	2206      	movs	r2, #6
 800167a:	649a      	str	r2, [r3, #72]	@ 0x48
  AdfFilterConfig0.SoundActivity.MinNoiseLevel = 200;
 800167c:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 800167e:	22c8      	movs	r2, #200	@ 0xc8
 8001680:	64da      	str	r2, [r3, #76]	@ 0x4c
  AdfFilterConfig0.SoundActivity.HangoverWindow = MDF_SAD_HANGOVER_4_FRAMES;
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 8001684:	2200      	movs	r2, #0
 8001686:	651a      	str	r2, [r3, #80]	@ 0x50
  AdfFilterConfig0.SoundActivity.LearningFrames = MDF_SAD_LEARNING_2_FRAMES;
 8001688:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 800168a:	2200      	movs	r2, #0
 800168c:	655a      	str	r2, [r3, #84]	@ 0x54
  AdfFilterConfig0.SoundActivity.AmbientNoiseSlope = 0;
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 8001690:	2200      	movs	r2, #0
 8001692:	659a      	str	r2, [r3, #88]	@ 0x58
  AdfFilterConfig0.SoundActivity.SignalNoiseThreshold = MDF_SAD_SIGNAL_NOISE_18DB;
 8001694:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 8001696:	2205      	movs	r2, #5
 8001698:	65da      	str	r2, [r3, #92]	@ 0x5c
  AdfFilterConfig0.SoundActivity.SoundLevelInterrupt = DISABLE;
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 80016a2:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	665a      	str	r2, [r3, #100]	@ 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	669a      	str	r2, [r3, #104]	@ 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 80016ae:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <MX_ADF1_Init+0xf0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200022fc 	.word	0x200022fc
 80016bc:	46024080 	.word	0x46024080
 80016c0:	20002340 	.word	0x20002340

080016c4 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80016ca:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <MX_GPDMA1_Init+0x94>)
 80016cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016d0:	4a21      	ldr	r2, [pc, #132]	@ (8001758 <MX_GPDMA1_Init+0x94>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80016da:	4b1f      	ldr	r3, [pc, #124]	@ (8001758 <MX_GPDMA1_Init+0x94>)
 80016dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel11_IRQn, 0, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	2053      	movs	r0, #83	@ 0x53
 80016ee:	f001 fbc3 	bl	8002e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel11_IRQn);
 80016f2:	2053      	movs	r0, #83	@ 0x53
 80016f4:	f001 fbda 	bl	8002eac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel11.Instance = GPDMA1_Channel11;
 80016f8:	4b18      	ldr	r3, [pc, #96]	@ (800175c <MX_GPDMA1_Init+0x98>)
 80016fa:	4a19      	ldr	r2, [pc, #100]	@ (8001760 <MX_GPDMA1_Init+0x9c>)
 80016fc:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel11.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 80016fe:	4b17      	ldr	r3, [pc, #92]	@ (800175c <MX_GPDMA1_Init+0x98>)
 8001700:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001704:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel11.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <MX_GPDMA1_Init+0x98>)
 8001708:	2200      	movs	r2, #0
 800170a:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel11.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800170c:	4b13      	ldr	r3, [pc, #76]	@ (800175c <MX_GPDMA1_Init+0x98>)
 800170e:	2200      	movs	r2, #0
 8001710:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel11.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8001712:	4b12      	ldr	r3, [pc, #72]	@ (800175c <MX_GPDMA1_Init+0x98>)
 8001714:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8001718:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel11.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <MX_GPDMA1_Init+0x98>)
 800171c:	2281      	movs	r2, #129	@ 0x81
 800171e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel11) != HAL_OK)
 8001720:	480e      	ldr	r0, [pc, #56]	@ (800175c <MX_GPDMA1_Init+0x98>)
 8001722:	f001 fec7 	bl	80034b4 <HAL_DMAEx_List_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_GPDMA1_Init+0x6c>
  {
    Error_Handler();
 800172c:	f000 f9c2 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel11, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001730:	2110      	movs	r1, #16
 8001732:	480a      	ldr	r0, [pc, #40]	@ (800175c <MX_GPDMA1_Init+0x98>)
 8001734:	f001 fe82 	bl	800343c <HAL_DMA_ConfigChannelAttributes>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_GPDMA1_Init+0x7e>
  {
    Error_Handler();
 800173e:	f000 f9b9 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */
  __HAL_LINKDMA(&AdfHandle0, hdma, handle_GPDMA1_Channel11);
 8001742:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <MX_GPDMA1_Init+0xa0>)
 8001744:	4a05      	ldr	r2, [pc, #20]	@ (800175c <MX_GPDMA1_Init+0x98>)
 8001746:	639a      	str	r2, [r3, #56]	@ 0x38
 8001748:	4b04      	ldr	r3, [pc, #16]	@ (800175c <MX_GPDMA1_Init+0x98>)
 800174a:	4a06      	ldr	r2, [pc, #24]	@ (8001764 <MX_GPDMA1_Init+0xa0>)
 800174c:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* USER CODE END GPDMA1_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	46020c00 	.word	0x46020c00
 800175c:	200023bc 	.word	0x200023bc
 8001760:	400205d0 	.word	0x400205d0
 8001764:	200022fc 	.word	0x200022fc

08001768 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800176c:	2000      	movs	r0, #0
 800176e:	f004 f933 	bl	80059d8 <HAL_ICACHE_ConfigAssociativityMode>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001778:	f000 f99c 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800177c:	f004 f94c 	bl	8005a18 <HAL_ICACHE_Enable>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001786:	f000 f995 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017ae:	4b20      	ldr	r3, [pc, #128]	@ (8001830 <MX_TIM1_Init+0xa0>)
 80017b0:	4a20      	ldr	r2, [pc, #128]	@ (8001834 <MX_TIM1_Init+0xa4>)
 80017b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16000-1;
 80017b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001830 <MX_TIM1_Init+0xa0>)
 80017b6:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80017ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <MX_TIM1_Init+0xa0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80017c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <MX_TIM1_Init+0xa0>)
 80017c4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80017c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <MX_TIM1_Init+0xa0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <MX_TIM1_Init+0xa0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <MX_TIM1_Init+0xa0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017dc:	4814      	ldr	r0, [pc, #80]	@ (8001830 <MX_TIM1_Init+0xa0>)
 80017de:	f008 fbdf 	bl	8009fa0 <HAL_TIM_Base_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80017e8:	f000 f964 	bl	8001ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4619      	mov	r1, r3
 80017f8:	480d      	ldr	r0, [pc, #52]	@ (8001830 <MX_TIM1_Init+0xa0>)
 80017fa:	f008 fd77 	bl	800a2ec <HAL_TIM_ConfigClockSource>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001804:	f000 f956 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	4619      	mov	r1, r3
 8001818:	4805      	ldr	r0, [pc, #20]	@ (8001830 <MX_TIM1_Init+0xa0>)
 800181a:	f009 f82d 	bl	800a878 <HAL_TIMEx_MasterConfigSynchronization>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001824:	f000 f946 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20002434 	.word	0x20002434
 8001834:	40012c00 	.word	0x40012c00

08001838 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800183c:	4b22      	ldr	r3, [pc, #136]	@ (80018c8 <MX_USART1_UART_Init+0x90>)
 800183e:	4a23      	ldr	r2, [pc, #140]	@ (80018cc <MX_USART1_UART_Init+0x94>)
 8001840:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001842:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <MX_USART1_UART_Init+0x90>)
 8001844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001848:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800184a:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <MX_USART1_UART_Init+0x90>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001850:	4b1d      	ldr	r3, [pc, #116]	@ (80018c8 <MX_USART1_UART_Init+0x90>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001856:	4b1c      	ldr	r3, [pc, #112]	@ (80018c8 <MX_USART1_UART_Init+0x90>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800185c:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <MX_USART1_UART_Init+0x90>)
 800185e:	220c      	movs	r2, #12
 8001860:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001862:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <MX_USART1_UART_Init+0x90>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001868:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <MX_USART1_UART_Init+0x90>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800186e:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <MX_USART1_UART_Init+0x90>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001874:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <MX_USART1_UART_Init+0x90>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800187a:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <MX_USART1_UART_Init+0x90>)
 800187c:	2200      	movs	r2, #0
 800187e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001880:	4811      	ldr	r0, [pc, #68]	@ (80018c8 <MX_USART1_UART_Init+0x90>)
 8001882:	f009 f901 	bl	800aa88 <HAL_UART_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800188c:	f000 f912 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001890:	2100      	movs	r1, #0
 8001892:	480d      	ldr	r0, [pc, #52]	@ (80018c8 <MX_USART1_UART_Init+0x90>)
 8001894:	f00a f929 	bl	800baea <HAL_UARTEx_SetTxFifoThreshold>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800189e:	f000 f909 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a2:	2100      	movs	r1, #0
 80018a4:	4808      	ldr	r0, [pc, #32]	@ (80018c8 <MX_USART1_UART_Init+0x90>)
 80018a6:	f00a f95e 	bl	800bb66 <HAL_UARTEx_SetRxFifoThreshold>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80018b0:	f000 f900 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018b4:	4804      	ldr	r0, [pc, #16]	@ (80018c8 <MX_USART1_UART_Init+0x90>)
 80018b6:	f00a f8df 	bl	800ba78 <HAL_UARTEx_DisableFifoMode>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80018c0:	f000 f8f8 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20002480 	.word	0x20002480
 80018cc:	40013800 	.word	0x40013800

080018d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018d4:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <MX_USART2_UART_Init+0x90>)
 80018d6:	4a23      	ldr	r2, [pc, #140]	@ (8001964 <MX_USART2_UART_Init+0x94>)
 80018d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018da:	4b21      	ldr	r3, [pc, #132]	@ (8001960 <MX_USART2_UART_Init+0x90>)
 80018dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <MX_USART2_UART_Init+0x90>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001960 <MX_USART2_UART_Init+0x90>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <MX_USART2_UART_Init+0x90>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001960 <MX_USART2_UART_Init+0x90>)
 80018f6:	220c      	movs	r2, #12
 80018f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fa:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <MX_USART2_UART_Init+0x90>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001900:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <MX_USART2_UART_Init+0x90>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001906:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <MX_USART2_UART_Init+0x90>)
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800190c:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <MX_USART2_UART_Init+0x90>)
 800190e:	2200      	movs	r2, #0
 8001910:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001912:	4b13      	ldr	r3, [pc, #76]	@ (8001960 <MX_USART2_UART_Init+0x90>)
 8001914:	2200      	movs	r2, #0
 8001916:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001918:	4811      	ldr	r0, [pc, #68]	@ (8001960 <MX_USART2_UART_Init+0x90>)
 800191a:	f009 f8b5 	bl	800aa88 <HAL_UART_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001924:	f000 f8c6 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001928:	2100      	movs	r1, #0
 800192a:	480d      	ldr	r0, [pc, #52]	@ (8001960 <MX_USART2_UART_Init+0x90>)
 800192c:	f00a f8dd 	bl	800baea <HAL_UARTEx_SetTxFifoThreshold>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001936:	f000 f8bd 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800193a:	2100      	movs	r1, #0
 800193c:	4808      	ldr	r0, [pc, #32]	@ (8001960 <MX_USART2_UART_Init+0x90>)
 800193e:	f00a f912 	bl	800bb66 <HAL_UARTEx_SetRxFifoThreshold>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001948:	f000 f8b4 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800194c:	4804      	ldr	r0, [pc, #16]	@ (8001960 <MX_USART2_UART_Init+0x90>)
 800194e:	f00a f893 	bl	800ba78 <HAL_UARTEx_DisableFifoMode>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001958:	f000 f8ac 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20002514 	.word	0x20002514
 8001964:	40004400 	.word	0x40004400

08001968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	4b47      	ldr	r3, [pc, #284]	@ (8001a9c <MX_GPIO_Init+0x134>)
 8001980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001984:	4a45      	ldr	r2, [pc, #276]	@ (8001a9c <MX_GPIO_Init+0x134>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800198e:	4b43      	ldr	r3, [pc, #268]	@ (8001a9c <MX_GPIO_Init+0x134>)
 8001990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a9c <MX_GPIO_Init+0x134>)
 800199e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019a2:	4a3e      	ldr	r2, [pc, #248]	@ (8001a9c <MX_GPIO_Init+0x134>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019ac:	4b3b      	ldr	r3, [pc, #236]	@ (8001a9c <MX_GPIO_Init+0x134>)
 80019ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	4b38      	ldr	r3, [pc, #224]	@ (8001a9c <MX_GPIO_Init+0x134>)
 80019bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019c0:	4a36      	ldr	r2, [pc, #216]	@ (8001a9c <MX_GPIO_Init+0x134>)
 80019c2:	f043 0302 	orr.w	r3, r3, #2
 80019c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019ca:	4b34      	ldr	r3, [pc, #208]	@ (8001a9c <MX_GPIO_Init+0x134>)
 80019cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED9_Pin|LED10_Pin, GPIO_PIN_RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80019de:	4830      	ldr	r0, [pc, #192]	@ (8001aa0 <MX_GPIO_Init+0x138>)
 80019e0:	f002 feba 	bl	8004758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED1_Pin|MDL_EN_Pin, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2123      	movs	r1, #35	@ 0x23
 80019e8:	482e      	ldr	r0, [pc, #184]	@ (8001aa4 <MX_GPIO_Init+0x13c>)
 80019ea:	f002 feb5 	bl	8004758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED5_Pin|LED6_Pin
 80019ee:	2200      	movs	r2, #0
 80019f0:	f24f 0106 	movw	r1, #61446	@ 0xf006
 80019f4:	482c      	ldr	r0, [pc, #176]	@ (8001aa8 <MX_GPIO_Init+0x140>)
 80019f6:	f002 feaf 	bl	8004758 <HAL_GPIO_WritePin>
                          |LED7_Pin|LED8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED9_Pin LED10_Pin */
  GPIO_InitStruct.Pin = LED9_Pin|LED10_Pin;
 80019fa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80019fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a00:	2301      	movs	r3, #1
 8001a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	4619      	mov	r1, r3
 8001a12:	4823      	ldr	r0, [pc, #140]	@ (8001aa0 <MX_GPIO_Init+0x138>)
 8001a14:	f002 fbea 	bl	80041ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin MDL_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|MDL_EN_Pin;
 8001a18:	2323      	movs	r3, #35	@ 0x23
 8001a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	481d      	ldr	r0, [pc, #116]	@ (8001aa4 <MX_GPIO_Init+0x13c>)
 8001a30:	f002 fbdc 	bl	80041ec <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ISM330_Pin INT2_ISM330_Pin */
  GPIO_InitStruct.Pin = INT1_ISM330_Pin|INT2_ISM330_Pin;
 8001a34:	23c0      	movs	r3, #192	@ 0xc0
 8001a36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	@ (8001aac <MX_GPIO_Init+0x144>)
 8001a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	4619      	mov	r1, r3
 8001a46:	4817      	ldr	r0, [pc, #92]	@ (8001aa4 <MX_GPIO_Init+0x13c>)
 8001a48:	f002 fbd0 	bl	80041ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin LED5_Pin LED6_Pin
                           LED7_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED5_Pin|LED6_Pin
 8001a4c:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8001a50:	60fb      	str	r3, [r7, #12]
                          |LED7_Pin|LED8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a52:	2301      	movs	r3, #1
 8001a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	4619      	mov	r1, r3
 8001a64:	4810      	ldr	r0, [pc, #64]	@ (8001aa8 <MX_GPIO_Init+0x140>)
 8001a66:	f002 fbc1 	bl	80041ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001a6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <MX_GPIO_Init+0x148>)
 8001a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4809      	ldr	r0, [pc, #36]	@ (8001aa4 <MX_GPIO_Init+0x13c>)
 8001a80:	f002 fbb4 	bl	80041ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI12_IRQn, 0, 0);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	2017      	movs	r0, #23
 8001a8a:	f001 f9f5 	bl	8002e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8001a8e:	2017      	movs	r0, #23
 8001a90:	f001 fa0c 	bl	8002eac <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a94:	bf00      	nop
 8001a96:	3720      	adds	r7, #32
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	46020c00 	.word	0x46020c00
 8001aa0:	42020800 	.word	0x42020800
 8001aa4:	42020000 	.word	0x42020000
 8001aa8:	42020400 	.word	0x42020400
 8001aac:	10110000 	.word	0x10110000
 8001ab0:	10210000 	.word	0x10210000

08001ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab8:	b672      	cpsid	i
}
 8001aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <Error_Handler+0x8>

08001ac0 <sensirion_common_bytes_to_uint32_t>:

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	061a      	lsls	r2, r3, #24
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	041b      	lsls	r3, r3, #16
 8001ad6:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3302      	adds	r3, #2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8001ae0:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	3203      	adds	r2, #3
 8001ae6:	7812      	ldrb	r2, [r2, #0]
 8001ae8:	4313      	orrs	r3, r2
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8001af6:	b480      	push	{r7}
 8001af8:	b085      	sub	sp, #20
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	460b      	mov	r3, r1
 8001b00:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8001b02:	23ff      	movs	r3, #255	@ 0xff
 8001b04:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001b06:	2300      	movs	r3, #0
 8001b08:	81fb      	strh	r3, [r7, #14]
 8001b0a:	e021      	b.n	8001b50 <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8001b0c:	89fb      	ldrh	r3, [r7, #14]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	7b7b      	ldrb	r3, [r7, #13]
 8001b16:	4053      	eors	r3, r2
 8001b18:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	733b      	strb	r3, [r7, #12]
 8001b1e:	e011      	b.n	8001b44 <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8001b20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	da07      	bge.n	8001b38 <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8001b28:	7b7b      	ldrb	r3, [r7, #13]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	b25b      	sxtb	r3, r3
 8001b2e:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8001b32:	b25b      	sxtb	r3, r3
 8001b34:	737b      	strb	r3, [r7, #13]
 8001b36:	e002      	b.n	8001b3e <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 8001b38:	7b7b      	ldrb	r3, [r7, #13]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001b3e:	7b3b      	ldrb	r3, [r7, #12]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	733b      	strb	r3, [r7, #12]
 8001b44:	7b3b      	ldrb	r3, [r7, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1ea      	bne.n	8001b20 <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001b4a:	89fb      	ldrh	r3, [r7, #14]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	81fb      	strh	r3, [r7, #14]
 8001b50:	89fa      	ldrh	r2, [r7, #14]
 8001b52:	887b      	ldrh	r3, [r7, #2]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d3d9      	bcc.n	8001b0c <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8001b58:	7b7b      	ldrb	r3, [r7, #13]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	807b      	strh	r3, [r7, #2]
 8001b72:	4613      	mov	r3, r2
 8001b74:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8001b76:	887b      	ldrh	r3, [r7, #2]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ffbb 	bl	8001af6 <sensirion_i2c_generate_crc>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d001      	beq.n	8001b8e <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8001ba8:	88ba      	ldrh	r2, [r7, #4]
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	6839      	ldr	r1, [r7, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 f884 	bl	8001cbc <sensirion_i2c_hal_write>
 8001bb4:	4603      	mov	r3, r0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	6039      	str	r1, [r7, #0]
 8001bc8:	71fb      	strb	r3, [r7, #7]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8001bce:	88bb      	ldrh	r3, [r7, #4]
 8001bd0:	085b      	lsrs	r3, r3, #1
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	0052      	lsls	r2, r2, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8001bdc:	88bb      	ldrh	r3, [r7, #4]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 8001be8:	2304      	movs	r3, #4
 8001bea:	e047      	b.n	8001c7c <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8001bec:	897a      	ldrh	r2, [r7, #10]
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	6839      	ldr	r1, [r7, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f846 	bl	8001c84 <sensirion_i2c_hal_read>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	813b      	strh	r3, [r7, #8]
    if (error) {
 8001bfc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 8001c04:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001c08:	e038      	b.n	8001c7c <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	81fb      	strh	r3, [r7, #14]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	81bb      	strh	r3, [r7, #12]
 8001c12:	e02e      	b.n	8001c72 <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001c14:	89fb      	ldrh	r3, [r7, #14]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8001c1a:	89fb      	ldrh	r3, [r7, #14]
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	2102      	movs	r1, #2
 8001c28:	f7ff ff9d 	bl	8001b66 <sensirion_i2c_check_crc>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	813b      	strh	r3, [r7, #8]
        if (error) {
 8001c30:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <sensirion_i2c_read_data_inplace+0x80>
            return error;
 8001c38:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001c3c:	e01e      	b.n	8001c7c <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 8001c3e:	89fb      	ldrh	r3, [r7, #14]
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	441a      	add	r2, r3
 8001c44:	89bb      	ldrh	r3, [r7, #12]
 8001c46:	1c59      	adds	r1, r3, #1
 8001c48:	81b9      	strh	r1, [r7, #12]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	440b      	add	r3, r1
 8001c50:	7812      	ldrb	r2, [r2, #0]
 8001c52:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8001c54:	89fb      	ldrh	r3, [r7, #14]
 8001c56:	3301      	adds	r3, #1
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	441a      	add	r2, r3
 8001c5c:	89bb      	ldrh	r3, [r7, #12]
 8001c5e:	1c59      	adds	r1, r3, #1
 8001c60:	81b9      	strh	r1, [r7, #12]
 8001c62:	4619      	mov	r1, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	440b      	add	r3, r1
 8001c68:	7812      	ldrb	r2, [r2, #0]
 8001c6a:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001c6c:	89fb      	ldrh	r3, [r7, #14]
 8001c6e:	3303      	adds	r3, #3
 8001c70:	81fb      	strh	r3, [r7, #14]
 8001c72:	89fa      	ldrh	r2, [r7, #14]
 8001c74:	897b      	ldrh	r3, [r7, #10]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d3cc      	bcc.n	8001c14 <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <sensirion_i2c_hal_read>:
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

extern I2C_HandleTypeDef hi2c1;
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
 8001c90:	4613      	mov	r3, r2
 8001c92:	80bb      	strh	r3, [r7, #4]

    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1),
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	b299      	uxth	r1, r3
 8001c9c:	88bb      	ldrh	r3, [r7, #4]
 8001c9e:	2264      	movs	r2, #100	@ 0x64
 8001ca0:	9200      	str	r2, [sp, #0]
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	4804      	ldr	r0, [pc, #16]	@ (8001cb8 <sensirion_i2c_hal_read+0x34>)
 8001ca6:	f002 ff73 	bl	8004b90 <HAL_I2C_Master_Receive>
 8001caa:	4603      	mov	r3, r0
 8001cac:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20002268 	.word	0x20002268

08001cbc <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1),
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	b299      	uxth	r1, r3
 8001cd4:	88bb      	ldrh	r3, [r7, #4]
 8001cd6:	2264      	movs	r2, #100	@ 0x64
 8001cd8:	9200      	str	r2, [sp, #0]
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	4804      	ldr	r0, [pc, #16]	@ (8001cf0 <sensirion_i2c_hal_write+0x34>)
 8001cde:	f002 fe63 	bl	80049a8 <HAL_I2C_Master_Transmit>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20002268 	.word	0x20002268

08001cf4 <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a12      	ldr	r2, [pc, #72]	@ (8001d48 <sensirion_i2c_hal_sleep_usec+0x54>)
 8001d00:	fba2 2303 	umull	r2, r3, r2, r3
 8001d04:	099b      	lsrs	r3, r3, #6
 8001d06:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <sensirion_i2c_hal_sleep_usec+0x54>)
 8001d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d10:	099b      	lsrs	r3, r3, #6
 8001d12:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <sensirion_i2c_hal_sleep_usec+0x32>
        msec++;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3301      	adds	r3, #1
 8001d24:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 8001d26:	f000 ffe5 	bl	8002cf4 <HAL_GetHalVersion>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4a07      	ldr	r2, [pc, #28]	@ (8001d4c <sensirion_i2c_hal_sleep_usec+0x58>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d202      	bcs.n	8001d38 <sensirion_i2c_hal_sleep_usec+0x44>
        msec++;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3301      	adds	r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 ffb7 	bl	8002cac <HAL_Delay>
}
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	10624dd3 	.word	0x10624dd3
 8001d4c:	01010100 	.word	0x01010100

08001d50 <sht4x_serial_number>:
    *temperature = convert_ticks_to_celsius(temperature_ticks);
    *humidity = convert_ticks_to_percent_rh(humidity_ticks);
    return NO_ERROR;
}

int16_t sht4x_serial_number(uint32_t* serial_number) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	82fb      	strh	r3, [r7, #22]
    buffer[offset++] = (uint8_t)0x89;
 8001d5c:	8afb      	ldrh	r3, [r7, #22]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	82fa      	strh	r2, [r7, #22]
 8001d62:	3318      	adds	r3, #24
 8001d64:	443b      	add	r3, r7
 8001d66:	2289      	movs	r2, #137	@ 0x89
 8001d68:	f803 2c0c 	strb.w	r2, [r3, #-12]

    error = sensirion_i2c_write_data(SHT4X_I2C_ADDRESS, &buffer[0], offset);
 8001d6c:	8afa      	ldrh	r2, [r7, #22]
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	4619      	mov	r1, r3
 8001d74:	2044      	movs	r0, #68	@ 0x44
 8001d76:	f7ff ff0f 	bl	8001b98 <sensirion_i2c_write_data>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	82bb      	strh	r3, [r7, #20]
    if (error) {
 8001d7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <sht4x_serial_number+0x3c>
        return error;
 8001d86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d8a:	e01c      	b.n	8001dc6 <sht4x_serial_number+0x76>
    }

    sensirion_i2c_hal_sleep_usec(10000);
 8001d8c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001d90:	f7ff ffb0 	bl	8001cf4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SHT4X_I2C_ADDRESS, &buffer[0], 4);
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	2204      	movs	r2, #4
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	2044      	movs	r0, #68	@ 0x44
 8001d9e:	f7ff ff0e 	bl	8001bbe <sensirion_i2c_read_data_inplace>
 8001da2:	4603      	mov	r3, r0
 8001da4:	82bb      	strh	r3, [r7, #20]
    if (error) {
 8001da6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <sht4x_serial_number+0x64>
        return error;
 8001dae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001db2:	e008      	b.n	8001dc6 <sht4x_serial_number+0x76>
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fe81 	bl	8001ac0 <sensirion_common_bytes_to_uint32_t>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <HAL_MspInit+0x30>)
 8001dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ddc:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <HAL_MspInit+0x30>)
 8001dde:	f043 0304 	orr.w	r3, r3, #4
 8001de2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_MspInit+0x30>)
 8001de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	46020c00 	.word	0x46020c00

08001e04 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b0ba      	sub	sp, #232	@ 0xe8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	22c0      	movs	r2, #192	@ 0xc0
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f00a fd1f 	bl	800c868 <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a2b      	ldr	r2, [pc, #172]	@ (8001edc <HAL_MDF_MspInit+0xd8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d14e      	bne.n	8001ed2 <HAL_MDF_MspInit+0xce>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001e34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_MSIK;
 8001e40:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001e44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f005 fc0f 	bl	8007670 <HAL_RCCEx_PeriphCLKConfig>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_MDF_MspInit+0x58>
    {
      Error_Handler();
 8001e58:	f7ff fe2c 	bl	8001ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 8001e5c:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <HAL_MDF_MspInit+0xdc>)
 8001e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e62:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee0 <HAL_MDF_MspInit+0xdc>)
 8001e64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e68:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee0 <HAL_MDF_MspInit+0xdc>)
 8001e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <HAL_MDF_MspInit+0xdc>)
 8001e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e80:	4a17      	ldr	r2, [pc, #92]	@ (8001ee0 <HAL_MDF_MspInit+0xdc>)
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <HAL_MDF_MspInit+0xdc>)
 8001e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]
    /**ADF1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> ADF1_CCK0
    PB4 (NJTRST)     ------> ADF1_SDI0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001e98:	2318      	movs	r3, #24
 8001e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4809      	ldr	r0, [pc, #36]	@ (8001ee4 <HAL_MDF_MspInit+0xe0>)
 8001ebe:	f002 f995 	bl	80041ec <HAL_GPIO_Init>

    /* ADF1 interrupt Init */
    HAL_NVIC_SetPriority(ADF1_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2070      	movs	r0, #112	@ 0x70
 8001ec8:	f000 ffd6 	bl	8002e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADF1_IRQn);
 8001ecc:	2070      	movs	r0, #112	@ 0x70
 8001ece:	f000 ffed 	bl	8002eac <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADF1_MspInit 1 */

  }

}
 8001ed2:	bf00      	nop
 8001ed4:	37e8      	adds	r7, #232	@ 0xe8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	46024080 	.word	0x46024080
 8001ee0:	46020c00 	.word	0x46020c00
 8001ee4:	42020400 	.word	0x42020400

08001ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0e      	ldr	r2, [pc, #56]	@ (8001f30 <HAL_TIM_Base_MspInit+0x48>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d116      	bne.n	8001f28 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001efa:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <HAL_TIM_Base_MspInit+0x4c>)
 8001efc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f00:	4a0c      	ldr	r2, [pc, #48]	@ (8001f34 <HAL_TIM_Base_MspInit+0x4c>)
 8001f02:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f06:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <HAL_TIM_Base_MspInit+0x4c>)
 8001f0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	202a      	movs	r0, #42	@ 0x2a
 8001f1e:	f000 ffab 	bl	8002e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001f22:	202a      	movs	r0, #42	@ 0x2a
 8001f24:	f000 ffc2 	bl	8002eac <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40012c00 	.word	0x40012c00
 8001f34:	46020c00 	.word	0x46020c00

08001f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b0be      	sub	sp, #248	@ 0xf8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f50:	f107 0320 	add.w	r3, r7, #32
 8001f54:	22c0      	movs	r2, #192	@ 0xc0
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f00a fc85 	bl	800c868 <memset>
  if(huart->Instance==USART1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a62      	ldr	r2, [pc, #392]	@ (80020ec <HAL_UART_MspInit+0x1b4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d16a      	bne.n	800203e <HAL_UART_MspInit+0x106>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f68:	f04f 0201 	mov.w	r2, #1
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f74:	2300      	movs	r3, #0
 8001f76:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f78:	f107 0320 	add.w	r3, r7, #32
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f005 fb77 	bl	8007670 <HAL_RCCEx_PeriphCLKConfig>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001f88:	f7ff fd94 	bl	8001ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f8c:	4b58      	ldr	r3, [pc, #352]	@ (80020f0 <HAL_UART_MspInit+0x1b8>)
 8001f8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f92:	4a57      	ldr	r2, [pc, #348]	@ (80020f0 <HAL_UART_MspInit+0x1b8>)
 8001f94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f98:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001f9c:	4b54      	ldr	r3, [pc, #336]	@ (80020f0 <HAL_UART_MspInit+0x1b8>)
 8001f9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fa6:	61fb      	str	r3, [r7, #28]
 8001fa8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	4b51      	ldr	r3, [pc, #324]	@ (80020f0 <HAL_UART_MspInit+0x1b8>)
 8001fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fb0:	4a4f      	ldr	r2, [pc, #316]	@ (80020f0 <HAL_UART_MspInit+0x1b8>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fba:	4b4d      	ldr	r3, [pc, #308]	@ (80020f0 <HAL_UART_MspInit+0x1b8>)
 8001fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc8:	4b49      	ldr	r3, [pc, #292]	@ (80020f0 <HAL_UART_MspInit+0x1b8>)
 8001fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fce:	4a48      	ldr	r2, [pc, #288]	@ (80020f0 <HAL_UART_MspInit+0x1b8>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fd8:	4b45      	ldr	r3, [pc, #276]	@ (80020f0 <HAL_UART_MspInit+0x1b8>)
 8001fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fe6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002000:	2307      	movs	r3, #7
 8002002:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002006:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800200a:	4619      	mov	r1, r3
 800200c:	4839      	ldr	r0, [pc, #228]	@ (80020f4 <HAL_UART_MspInit+0x1bc>)
 800200e:	f002 f8ed 	bl	80041ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002012:	2380      	movs	r3, #128	@ 0x80
 8002014:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800202a:	2307      	movs	r3, #7
 800202c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002030:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002034:	4619      	mov	r1, r3
 8002036:	4830      	ldr	r0, [pc, #192]	@ (80020f8 <HAL_UART_MspInit+0x1c0>)
 8002038:	f002 f8d8 	bl	80041ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800203c:	e051      	b.n	80020e2 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a2e      	ldr	r2, [pc, #184]	@ (80020fc <HAL_UART_MspInit+0x1c4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d14c      	bne.n	80020e2 <HAL_UART_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002048:	f04f 0202 	mov.w	r2, #2
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002054:	2300      	movs	r3, #0
 8002056:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002058:	f107 0320 	add.w	r3, r7, #32
 800205c:	4618      	mov	r0, r3
 800205e:	f005 fb07 	bl	8007670 <HAL_RCCEx_PeriphCLKConfig>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_UART_MspInit+0x134>
      Error_Handler();
 8002068:	f7ff fd24 	bl	8001ab4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800206c:	4b20      	ldr	r3, [pc, #128]	@ (80020f0 <HAL_UART_MspInit+0x1b8>)
 800206e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002072:	4a1f      	ldr	r2, [pc, #124]	@ (80020f0 <HAL_UART_MspInit+0x1b8>)
 8002074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002078:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800207c:	4b1c      	ldr	r3, [pc, #112]	@ (80020f0 <HAL_UART_MspInit+0x1b8>)
 800207e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	4b19      	ldr	r3, [pc, #100]	@ (80020f0 <HAL_UART_MspInit+0x1b8>)
 800208c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002090:	4a17      	ldr	r2, [pc, #92]	@ (80020f0 <HAL_UART_MspInit+0x1b8>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800209a:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <HAL_UART_MspInit+0x1b8>)
 800209c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AT_TX_Pin|AT_RX_Pin;
 80020a8:	230c      	movs	r3, #12
 80020aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020c0:	2307      	movs	r3, #7
 80020c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80020ca:	4619      	mov	r1, r3
 80020cc:	4809      	ldr	r0, [pc, #36]	@ (80020f4 <HAL_UART_MspInit+0x1bc>)
 80020ce:	f002 f88d 	bl	80041ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2100      	movs	r1, #0
 80020d6:	203e      	movs	r0, #62	@ 0x3e
 80020d8:	f000 fece 	bl	8002e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020dc:	203e      	movs	r0, #62	@ 0x3e
 80020de:	f000 fee5 	bl	8002eac <HAL_NVIC_EnableIRQ>
}
 80020e2:	bf00      	nop
 80020e4:	37f8      	adds	r7, #248	@ 0xf8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40013800 	.word	0x40013800
 80020f0:	46020c00 	.word	0x46020c00
 80020f4:	42020000 	.word	0x42020000
 80020f8:	42020400 	.word	0x42020400
 80020fc:	40004400 	.word	0x40004400

08002100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <NMI_Handler+0x4>

08002108 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210c:	bf00      	nop
 800210e:	e7fd      	b.n	800210c <HardFault_Handler+0x4>

08002110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002114:	bf00      	nop
 8002116:	e7fd      	b.n	8002114 <MemManage_Handler+0x4>

08002118 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800211c:	bf00      	nop
 800211e:	e7fd      	b.n	800211c <BusFault_Handler+0x4>

08002120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <UsageFault_Handler+0x4>

08002128 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002156:	f000 fd89 	bl	8002c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}

0800215e <EXTI12_IRQHandler>:

/**
  * @brief This function handles EXTI Line12 interrupt.
  */
void EXTI12_IRQHandler(void)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI12_IRQn 0 */

  /* USER CODE END EXTI12_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8002162:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002166:	f002 fb0f 	bl	8004788 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI12_IRQn 1 */

  /* USER CODE END EXTI12_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002174:	4802      	ldr	r0, [pc, #8]	@ (8002180 <TIM1_UP_IRQHandler+0x10>)
 8002176:	f007 ff6a 	bl	800a04e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20002434 	.word	0x20002434

08002184 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002188:	4802      	ldr	r0, [pc, #8]	@ (8002194 <USART2_IRQHandler+0x10>)
 800218a:	f008 fd6b 	bl	800ac64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20002514 	.word	0x20002514

08002198 <GPDMA1_Channel11_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 11 global interrupt.
  */
void GPDMA1_Channel11_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 0 */

  /* USER CODE END GPDMA1_Channel11_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel11);
 800219c:	4802      	ldr	r0, [pc, #8]	@ (80021a8 <GPDMA1_Channel11_IRQHandler+0x10>)
 800219e:	f000 ffec 	bl	800317a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 1 */

  /* USER CODE END GPDMA1_Channel11_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200023bc 	.word	0x200023bc

080021ac <ADF1_IRQHandler>:

/**
  * @brief This function handles ADF interrupt.
  */
void ADF1_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADF1_IRQn 0 */

  /* USER CODE END ADF1_IRQn 0 */
  HAL_MDF_IRQHandler(&AdfHandle0);
 80021b0:	4802      	ldr	r0, [pc, #8]	@ (80021bc <ADF1_IRQHandler+0x10>)
 80021b2:	f003 fdba 	bl	8005d2a <HAL_MDF_IRQHandler>
  /* USER CODE BEGIN ADF1_IRQn 1 */

  /* USER CODE END ADF1_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200022fc 	.word	0x200022fc

080021c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return 1;
 80021c4:	2301      	movs	r3, #1
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <_kill>:

int _kill(int pid, int sig)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021da:	f00a fb97 	bl	800c90c <__errno>
 80021de:	4603      	mov	r3, r0
 80021e0:	2216      	movs	r2, #22
 80021e2:	601a      	str	r2, [r3, #0]
  return -1;
 80021e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <_exit>:

void _exit (int status)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ffe7 	bl	80021d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002202:	bf00      	nop
 8002204:	e7fd      	b.n	8002202 <_exit+0x12>

08002206 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	e00a      	b.n	800222e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002218:	f3af 8000 	nop.w
 800221c:	4601      	mov	r1, r0
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	60ba      	str	r2, [r7, #8]
 8002224:	b2ca      	uxtb	r2, r1
 8002226:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	3301      	adds	r3, #1
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	429a      	cmp	r2, r3
 8002234:	dbf0      	blt.n	8002218 <_read+0x12>
  }

  return len;
 8002236:	687b      	ldr	r3, [r7, #4]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	e009      	b.n	8002266 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	60ba      	str	r2, [r7, #8]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff f92c 	bl	80014b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	3301      	adds	r3, #1
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	429a      	cmp	r2, r3
 800226c:	dbf1      	blt.n	8002252 <_write+0x12>
  }
  return len;
 800226e:	687b      	ldr	r3, [r7, #4]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_close>:

int _close(int file)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002280:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022a0:	605a      	str	r2, [r3, #4]
  return 0;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <_isatty>:

int _isatty(int file)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022b8:	2301      	movs	r3, #1
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b085      	sub	sp, #20
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022e8:	4a14      	ldr	r2, [pc, #80]	@ (800233c <_sbrk+0x5c>)
 80022ea:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <_sbrk+0x60>)
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022f4:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <_sbrk+0x64>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d102      	bne.n	8002302 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022fc:	4b11      	ldr	r3, [pc, #68]	@ (8002344 <_sbrk+0x64>)
 80022fe:	4a12      	ldr	r2, [pc, #72]	@ (8002348 <_sbrk+0x68>)
 8002300:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002302:	4b10      	ldr	r3, [pc, #64]	@ (8002344 <_sbrk+0x64>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	429a      	cmp	r2, r3
 800230e:	d207      	bcs.n	8002320 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002310:	f00a fafc 	bl	800c90c <__errno>
 8002314:	4603      	mov	r3, r0
 8002316:	220c      	movs	r2, #12
 8002318:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800231a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800231e:	e009      	b.n	8002334 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002320:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <_sbrk+0x64>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002326:	4b07      	ldr	r3, [pc, #28]	@ (8002344 <_sbrk+0x64>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	4a05      	ldr	r2, [pc, #20]	@ (8002344 <_sbrk+0x64>)
 8002330:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002332:	68fb      	ldr	r3, [r7, #12]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	200c0000 	.word	0x200c0000
 8002340:	00000400 	.word	0x00000400
 8002344:	200025a8 	.word	0x200025a8
 8002348:	20002720 	.word	0x20002720

0800234c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002350:	4b18      	ldr	r3, [pc, #96]	@ (80023b4 <SystemInit+0x68>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002356:	4a17      	ldr	r2, [pc, #92]	@ (80023b4 <SystemInit+0x68>)
 8002358:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800235c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002360:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <SystemInit+0x6c>)
 8002362:	2201      	movs	r2, #1
 8002364:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002366:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <SystemInit+0x6c>)
 8002368:	2200      	movs	r2, #0
 800236a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800236c:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <SystemInit+0x6c>)
 800236e:	2200      	movs	r2, #0
 8002370:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002372:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <SystemInit+0x6c>)
 8002374:	2200      	movs	r2, #0
 8002376:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002378:	4b0f      	ldr	r3, [pc, #60]	@ (80023b8 <SystemInit+0x6c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0e      	ldr	r2, [pc, #56]	@ (80023b8 <SystemInit+0x6c>)
 800237e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002382:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002386:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002388:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <SystemInit+0x6c>)
 800238a:	2200      	movs	r2, #0
 800238c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800238e:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <SystemInit+0x6c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a09      	ldr	r2, [pc, #36]	@ (80023b8 <SystemInit+0x6c>)
 8002394:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002398:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800239a:	4b07      	ldr	r3, [pc, #28]	@ (80023b8 <SystemInit+0x6c>)
 800239c:	2200      	movs	r2, #0
 800239e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023a0:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <SystemInit+0x68>)
 80023a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023a6:	609a      	str	r2, [r3, #8]
  #endif
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000ed00 	.word	0xe000ed00
 80023b8:	46020c00 	.word	0x46020c00

080023bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80023bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023f4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023c0:	f7ff ffc4 	bl	800234c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80023c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80023c6:	e003      	b.n	80023d0 <LoopCopyDataInit>

080023c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80023c8:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80023ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80023cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80023ce:	3104      	adds	r1, #4

080023d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80023d0:	480a      	ldr	r0, [pc, #40]	@ (80023fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80023d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <LoopForever+0xe>)
	adds	r2, r0, r1
 80023d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80023d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80023d8:	d3f6      	bcc.n	80023c8 <CopyDataInit>
	ldr	r2, =_sbss
 80023da:	4a0a      	ldr	r2, [pc, #40]	@ (8002404 <LoopForever+0x12>)
	b	LoopFillZerobss
 80023dc:	e002      	b.n	80023e4 <LoopFillZerobss>

080023de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80023de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80023e0:	f842 3b04 	str.w	r3, [r2], #4

080023e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80023e4:	4b08      	ldr	r3, [pc, #32]	@ (8002408 <LoopForever+0x16>)
	cmp	r2, r3
 80023e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80023e8:	d3f9      	bcc.n	80023de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ea:	f00a fa95 	bl	800c918 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ee:	f7ff f875 	bl	80014dc <main>

080023f2 <LoopForever>:

LoopForever:
    b LoopForever
 80023f2:	e7fe      	b.n	80023f2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80023f4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80023f8:	0800ea50 	.word	0x0800ea50
	ldr	r0, =_sdata
 80023fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002400:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8002404:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8002408:	20002720 	.word	0x20002720

0800240c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800240c:	e7fe      	b.n	800240c <ADC1_IRQHandler>
	...

08002410 <ISM330IS_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_RegisterBusIO(ISM330IS_Object_t *pObj, ISM330IS_IO_t *pIO)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330IS_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d103      	bne.n	800242c <ISM330IS_RegisterBusIO+0x1c>
  {
    ret = ISM330IS_ERROR;
 8002424:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	e04d      	b.n	80024c8 <ISM330IS_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	7b1a      	ldrb	r2, [r3, #12]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	699a      	ldr	r2, [r3, #24]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a1b      	ldr	r2, [pc, #108]	@ (80024d4 <ISM330IS_RegisterBusIO+0xc4>)
 8002468:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a1a      	ldr	r2, [pc, #104]	@ (80024d8 <ISM330IS_RegisterBusIO+0xc8>)
 800246e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <ISM330IS_RegisterBusIO+0x76>
    {
      ret = ISM330IS_ERROR;
 800247e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	e020      	b.n	80024c8 <ISM330IS_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330IS_OK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4798      	blx	r3
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <ISM330IS_RegisterBusIO+0x8a>
    {
      ret = ISM330IS_ERROR;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	e016      	b.n	80024c8 <ISM330IS_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330IS_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d112      	bne.n	80024c8 <ISM330IS_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10d      	bne.n	80024c8 <ISM330IS_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80024ac:	230c      	movs	r3, #12
 80024ae:	72fb      	strb	r3, [r7, #11]

          if (ISM330IS_Write_Reg(pObj, ISM330IS_CTRL3_C, data) != ISM330IS_OK)
 80024b0:	7afb      	ldrb	r3, [r7, #11]
 80024b2:	461a      	mov	r2, r3
 80024b4:	2112      	movs	r1, #18
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f8e2 	bl	8002680 <ISM330IS_Write_Reg>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <ISM330IS_RegisterBusIO+0xb8>
          {
            ret = ISM330IS_ERROR;
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024c6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80024c8:	68fb      	ldr	r3, [r7, #12]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	08002707 	.word	0x08002707
 80024d8:	0800273d 	.word	0x0800273d

080024dc <ISM330IS_Init>:
  * @brief  Initialize the ISM330IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_Init(ISM330IS_Object_t *pObj)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  int32_t ret = ISM330IS_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Set main memory bank */
  if (ISM330IS_Set_Mem_Bank(pObj, (uint8_t)ISM330IS_MAIN_MEM_BANK) != ISM330IS_OK)
 80024e8:	2100      	movs	r1, #0
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f8e5 	bl	80026ba <ISM330IS_Set_Mem_Bank>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <ISM330IS_Init+0x20>
  {
    ret = ISM330IS_ERROR;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024fa:	60fb      	str	r3, [r7, #12]
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330is_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330IS_OK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3320      	adds	r3, #32
 8002500:	2101      	movs	r1, #1
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fabf 	bl	8002a86 <ism330is_auto_increment_set>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <ISM330IS_Init+0x38>
  {
    ret = ISM330IS_ERROR;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002512:	60fb      	str	r3, [r7, #12]
  }

  /* Enable BDU */
  if (ism330is_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330IS_OK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3320      	adds	r3, #32
 8002518:	2101      	movs	r1, #1
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fad9 	bl	8002ad2 <ism330is_block_data_update_set>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <ISM330IS_Init+0x50>
  {
    ret = ISM330IS_ERROR;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800252a:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330IS_XL_ODR_AT_104Hz_HP;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2204      	movs	r2, #4
 8002530:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (ism330is_xl_data_rate_set(&(pObj->Ctx), ISM330IS_XL_ODR_OFF) != ISM330IS_OK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3320      	adds	r3, #32
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f9cf 	bl	80028de <ism330is_xl_data_rate_set>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <ISM330IS_Init+0x70>
  {
    ret = ISM330IS_ERROR;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800254a:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (ism330is_xl_full_scale_set(&(pObj->Ctx), ISM330IS_2g) != ISM330IS_OK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3320      	adds	r3, #32
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f99d 	bl	8002892 <ism330is_xl_full_scale_set>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <ISM330IS_Init+0x88>
  {
    ret = ISM330IS_ERROR;
 800255e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002562:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330IS_GY_ODR_AT_104Hz_HP;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2204      	movs	r2, #4
 8002568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (ism330is_gy_data_rate_set(&(pObj->Ctx), ISM330IS_GY_ODR_OFF) != ISM330IS_OK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3320      	adds	r3, #32
 8002570:	2100      	movs	r1, #0
 8002572:	4618      	mov	r0, r3
 8002574:	f000 fa48 	bl	8002a08 <ism330is_gy_data_rate_set>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <ISM330IS_Init+0xa8>
  {
    ret = ISM330IS_ERROR;
 800257e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002582:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (ism330is_gy_full_scale_set(&(pObj->Ctx), ISM330IS_2000dps) != ISM330IS_OK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3320      	adds	r3, #32
 8002588:	2103      	movs	r1, #3
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fa0c 	bl	80029a8 <ism330is_gy_full_scale_set>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <ISM330IS_Init+0xc0>
  {
    ret = ISM330IS_ERROR;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800259a:	60fb      	str	r3, [r7, #12]
  }

  if (ret == ISM330IS_OK)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d103      	bne.n	80025aa <ISM330IS_Init+0xce>
  {
    pObj->is_initialized = 1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <ISM330IS_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_ReadID(ISM330IS_Object_t *pObj, uint8_t *Id)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330IS_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]

  if (ism330is_device_id_get(&(pObj->Ctx), Id) != ISM330IS_OK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3320      	adds	r3, #32
 80025c6:	6839      	ldr	r1, [r7, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 f92b 	bl	8002824 <ism330is_device_id_get>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <ISM330IS_ReadID+0x26>
  {
    ret = ISM330IS_ERROR;
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80025da:	68fb      	ldr	r3, [r7, #12]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <ISM330IS_ACC_Enable>:
  * @brief  Enable the ISM330IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_ACC_Enable(ISM330IS_Object_t *pObj)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  int32_t ret = ISM330IS_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d102      	bne.n	8002600 <ISM330IS_ACC_Enable+0x1c>
  {
    ret = ISM330IS_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	e013      	b.n	8002628 <ISM330IS_ACC_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (ism330is_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330IS_OK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f103 0220 	add.w	r2, r3, #32
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f000 f965 	bl	80028de <ism330is_xl_data_rate_set>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <ISM330IS_ACC_Enable+0x3c>
    {
      ret = ISM330IS_ERROR;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800261e:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 1;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 8002628:	68fb      	ldr	r3, [r7, #12]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <ISM330IS_GYRO_Enable>:
  * @brief  Enable the ISM330IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_GYRO_Enable(ISM330IS_Object_t *pObj)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  int32_t ret = ISM330IS_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002644:	2b01      	cmp	r3, #1
 8002646:	d102      	bne.n	800264e <ISM330IS_GYRO_Enable+0x1c>
  {
    ret = ISM330IS_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	e013      	b.n	8002676 <ISM330IS_GYRO_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (ism330is_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330IS_OK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f103 0220 	add.w	r2, r3, #32
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f000 f9d3 	bl	8002a08 <ism330is_gy_data_rate_set>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <ISM330IS_GYRO_Enable+0x3c>
    {
      ret = ISM330IS_ERROR;
 8002668:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800266c:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8002676:	68fb      	ldr	r3, [r7, #12]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <ISM330IS_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_Write_Reg(ISM330IS_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	70fb      	strb	r3, [r7, #3]
 800268c:	4613      	mov	r3, r2
 800268e:	70bb      	strb	r3, [r7, #2]
  int32_t ret = ISM330IS_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]

  if (ism330is_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330IS_OK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f103 0020 	add.w	r0, r3, #32
 800269a:	1cba      	adds	r2, r7, #2
 800269c:	78f9      	ldrb	r1, [r7, #3]
 800269e:	2301      	movs	r3, #1
 80026a0:	f000 f87f 	bl	80027a2 <ism330is_write_reg>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <ISM330IS_Write_Reg+0x30>
  {
    ret = ISM330IS_ERROR;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026ae:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80026b0:	68fb      	ldr	r3, [r7, #12]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <ISM330IS_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - ISM330IS_MAIN_MEM_BANK, 2 - ISM330IS_SENSOR_HUB_MEM_BANK, 3 - ISM330IS_ISPU_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330IS_Set_Mem_Bank(ISM330IS_Object_t *pObj, uint8_t Val)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	70fb      	strb	r3, [r7, #3]
  int32_t ret = ISM330IS_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
  ism330is_mem_bank_t reg;

  reg = (Val == 2U) ? ISM330IS_SENSOR_HUB_MEM_BANK
        : (Val == 3U) ? ISM330IS_ISPU_MEM_BANK
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d006      	beq.n	80026de <ISM330IS_Set_Mem_Bank+0x24>
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d101      	bne.n	80026da <ISM330IS_Set_Mem_Bank+0x20>
 80026d6:	2303      	movs	r3, #3
 80026d8:	e002      	b.n	80026e0 <ISM330IS_Set_Mem_Bank+0x26>
 80026da:	2300      	movs	r3, #0
 80026dc:	e000      	b.n	80026e0 <ISM330IS_Set_Mem_Bank+0x26>
 80026de:	2302      	movs	r3, #2
  reg = (Val == 2U) ? ISM330IS_SENSOR_HUB_MEM_BANK
 80026e0:	72fb      	strb	r3, [r7, #11]
        :               ISM330IS_MAIN_MEM_BANK;

  if (ism330is_mem_bank_set(&(pObj->Ctx), reg) != ISM330IS_OK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3320      	adds	r3, #32
 80026e6:	7afa      	ldrb	r2, [r7, #11]
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f871 	bl	80027d2 <ism330is_mem_bank_set>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <ISM330IS_Set_Mem_Bank+0x42>
  {
    ret = ISM330IS_ERROR;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026fa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80026fc:	68fb      	ldr	r3, [r7, #12]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002706:	b590      	push	{r4, r7, lr}
 8002708:	b087      	sub	sp, #28
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	461a      	mov	r2, r3
 8002712:	460b      	mov	r3, r1
 8002714:	72fb      	strb	r3, [r7, #11]
 8002716:	4613      	mov	r3, r2
 8002718:	813b      	strh	r3, [r7, #8]
  ISM330IS_Object_t *pObj = (ISM330IS_Object_t *)Handle;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	695c      	ldr	r4, [r3, #20]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	7b1b      	ldrb	r3, [r3, #12]
 8002726:	4618      	mov	r0, r3
 8002728:	7afb      	ldrb	r3, [r7, #11]
 800272a:	b299      	uxth	r1, r3
 800272c:	893b      	ldrh	r3, [r7, #8]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	47a0      	blx	r4
 8002732:	4603      	mov	r3, r0
}
 8002734:	4618      	mov	r0, r3
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	bd90      	pop	{r4, r7, pc}

0800273c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	461a      	mov	r2, r3
 8002748:	460b      	mov	r3, r1
 800274a:	72fb      	strb	r3, [r7, #11]
 800274c:	4613      	mov	r3, r2
 800274e:	813b      	strh	r3, [r7, #8]
  ISM330IS_Object_t *pObj = (ISM330IS_Object_t *)Handle;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	691c      	ldr	r4, [r3, #16]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	7b1b      	ldrb	r3, [r3, #12]
 800275c:	4618      	mov	r0, r3
 800275e:	7afb      	ldrb	r3, [r7, #11]
 8002760:	b299      	uxth	r1, r3
 8002762:	893b      	ldrh	r3, [r7, #8]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	47a0      	blx	r4
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	bd90      	pop	{r4, r7, pc}

08002772 <ism330is_read_reg>:
  *
  */
int32_t __weak ism330is_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8002772:	b590      	push	{r4, r7, lr}
 8002774:	b087      	sub	sp, #28
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	461a      	mov	r2, r3
 800277e:	460b      	mov	r3, r1
 8002780:	72fb      	strb	r3, [r7, #11]
 8002782:	4613      	mov	r3, r2
 8002784:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	685c      	ldr	r4, [r3, #4]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	68d8      	ldr	r0, [r3, #12]
 800278e:	893b      	ldrh	r3, [r7, #8]
 8002790:	7af9      	ldrb	r1, [r7, #11]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	47a0      	blx	r4
 8002796:	6178      	str	r0, [r7, #20]

  return ret;
 8002798:	697b      	ldr	r3, [r7, #20]
}
 800279a:	4618      	mov	r0, r3
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd90      	pop	{r4, r7, pc}

080027a2 <ism330is_write_reg>:
  *
  */
int32_t __weak ism330is_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 80027a2:	b590      	push	{r4, r7, lr}
 80027a4:	b087      	sub	sp, #28
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	461a      	mov	r2, r3
 80027ae:	460b      	mov	r3, r1
 80027b0:	72fb      	strb	r3, [r7, #11]
 80027b2:	4613      	mov	r3, r2
 80027b4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681c      	ldr	r4, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	68d8      	ldr	r0, [r3, #12]
 80027be:	893b      	ldrh	r3, [r7, #8]
 80027c0:	7af9      	ldrb	r1, [r7, #11]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	47a0      	blx	r4
 80027c6:	6178      	str	r0, [r7, #20]

  return ret;
 80027c8:	697b      	ldr	r3, [r7, #20]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd90      	pop	{r4, r7, pc}

080027d2 <ism330is_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, ISPU_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_mem_bank_set(stmdev_ctx_t *ctx, ism330is_mem_bank_t val)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	70fb      	strb	r3, [r7, #3]
  ism330is_func_cfg_access_t func_cfg_access = {0x0};
 80027de:	2300      	movs	r3, #0
 80027e0:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /* no need to read it first as the only other field is a ispu reset bit */
  func_cfg_access.shub_reg_access = (val == ISM330IS_SENSOR_HUB_MEM_BANK) ? 0x1U : 0x0U;
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d101      	bne.n	80027ec <ism330is_mem_bank_set+0x1a>
 80027e8:	2201      	movs	r2, #1
 80027ea:	e000      	b.n	80027ee <ism330is_mem_bank_set+0x1c>
 80027ec:	2200      	movs	r2, #0
 80027ee:	7a3b      	ldrb	r3, [r7, #8]
 80027f0:	f362 1386 	bfi	r3, r2, #6, #1
 80027f4:	723b      	strb	r3, [r7, #8]
  func_cfg_access.ispu_reg_access = (val == ISM330IS_ISPU_MEM_BANK) ? 0x1U : 0x0U;
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d101      	bne.n	8002800 <ism330is_mem_bank_set+0x2e>
 80027fc:	2201      	movs	r2, #1
 80027fe:	e000      	b.n	8002802 <ism330is_mem_bank_set+0x30>
 8002800:	2200      	movs	r2, #0
 8002802:	7a3b      	ldrb	r3, [r7, #8]
 8002804:	f362 13c7 	bfi	r3, r2, #7, #1
 8002808:	723b      	strb	r3, [r7, #8]
  ret = ism330is_write_reg(ctx, ISM330IS_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800280a:	f107 0208 	add.w	r2, r7, #8
 800280e:	2301      	movs	r3, #1
 8002810:	2101      	movs	r1, #1
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff ffc5 	bl	80027a2 <ism330is_write_reg>
 8002818:	60f8      	str	r0, [r7, #12]

  return ret;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <ism330is_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_WHO_AM_I, (uint8_t *)val, 1);
 800282e:	2301      	movs	r3, #1
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	210f      	movs	r1, #15
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff ff9c 	bl	8002772 <ism330is_read_reg>
 800283a:	60f8      	str	r0, [r7, #12]

  return ret;
 800283c:	68fb      	ldr	r3, [r7, #12]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <ism330is_xl_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_xl_hm_mode_set(stmdev_ctx_t *ctx, ism330is_hm_mode_t val)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	70fb      	strb	r3, [r7, #3]
  ism330is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8002852:	f107 0208 	add.w	r2, r7, #8
 8002856:	2301      	movs	r3, #1
 8002858:	2115      	movs	r1, #21
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ff89 	bl	8002772 <ism330is_read_reg>
 8002860:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10f      	bne.n	8002888 <ism330is_xl_hm_mode_set+0x42>
  {
    ctrl6_c.xl_hm_mode = ((uint8_t)val & 0x1U);
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	b2da      	uxtb	r2, r3
 8002870:	7a3b      	ldrb	r3, [r7, #8]
 8002872:	f362 1304 	bfi	r3, r2, #4, #1
 8002876:	723b      	strb	r3, [r7, #8]
    ret = ism330is_write_reg(ctx, ISM330IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8002878:	f107 0208 	add.w	r2, r7, #8
 800287c:	2301      	movs	r3, #1
 800287e:	2115      	movs	r1, #21
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff8e 	bl	80027a2 <ism330is_write_reg>
 8002886:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002888:	68fb      	ldr	r3, [r7, #12]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <ism330is_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_xl_full_scale_set(stmdev_ctx_t *ctx,
                                   ism330is_xl_full_scale_t val)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	460b      	mov	r3, r1
 800289c:	70fb      	strb	r3, [r7, #3]
  ism330is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800289e:	f107 0208 	add.w	r2, r7, #8
 80028a2:	2301      	movs	r3, #1
 80028a4:	2110      	movs	r1, #16
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff ff63 	bl	8002772 <ism330is_read_reg>
 80028ac:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10f      	bne.n	80028d4 <ism330is_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = ((uint8_t)val & 0x3U);
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	7a3b      	ldrb	r3, [r7, #8]
 80028be:	f362 0383 	bfi	r3, r2, #2, #2
 80028c2:	723b      	strb	r3, [r7, #8]
    ret = ism330is_write_reg(ctx, ISM330IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80028c4:	f107 0208 	add.w	r2, r7, #8
 80028c8:	2301      	movs	r3, #1
 80028ca:	2110      	movs	r1, #16
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff68 	bl	80027a2 <ism330is_write_reg>
 80028d2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028d4:	68fb      	ldr	r3, [r7, #12]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <ism330is_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_xl_data_rate_set(stmdev_ctx_t *ctx,
                                  ism330is_xl_data_rate_t val)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	70fb      	strb	r3, [r7, #3]
  ism330is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80028ea:	f107 0208 	add.w	r2, r7, #8
 80028ee:	2301      	movs	r3, #1
 80028f0:	2110      	movs	r1, #16
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff ff3d 	bl	8002772 <ism330is_read_reg>
 80028f8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d128      	bne.n	8002952 <ism330is_xl_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <ism330is_xl_data_rate_set+0x3e>
    {
      ret += ism330is_xl_hm_mode_set(ctx, ISM330IS_HIGH_PERFOMANCE_MODE_DISABLED);
 800290a:	2101      	movs	r1, #1
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff9a 	bl	8002846 <ism330is_xl_hm_mode_set>
 8002912:	4602      	mov	r2, r0
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	e007      	b.n	800292c <ism330is_xl_data_rate_set+0x4e>
    }
    else
    {
      ret += ism330is_xl_hm_mode_set(ctx, ISM330IS_HIGH_PERFOMANCE_MODE_ENABLED);
 800291c:	2100      	movs	r1, #0
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff ff91 	bl	8002846 <ism330is_xl_hm_mode_set>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4413      	add	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
    }

    ctrl1_xl.odr_xl = ((uint8_t)val & 0xfU);
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	b2da      	uxtb	r2, r3
 8002934:	7a3b      	ldrb	r3, [r7, #8]
 8002936:	f362 1307 	bfi	r3, r2, #4, #4
 800293a:	723b      	strb	r3, [r7, #8]
    ret += ism330is_write_reg(ctx, ISM330IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800293c:	f107 0208 	add.w	r2, r7, #8
 8002940:	2301      	movs	r3, #1
 8002942:	2110      	movs	r1, #16
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff ff2c 	bl	80027a2 <ism330is_write_reg>
 800294a:	4602      	mov	r2, r0
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002952:	68fb      	ldr	r3, [r7, #12]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <ism330is_gy_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_gy_hm_mode_set(stmdev_ctx_t *ctx, ism330is_hm_mode_t val)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	70fb      	strb	r3, [r7, #3]
  ism330is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8002968:	f107 0208 	add.w	r2, r7, #8
 800296c:	2301      	movs	r3, #1
 800296e:	2116      	movs	r1, #22
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff fefe 	bl	8002772 <ism330is_read_reg>
 8002976:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10f      	bne.n	800299e <ism330is_gy_hm_mode_set+0x42>
  {
    ctrl7_g.g_hm_mode = ((uint8_t)val & 0x1U);
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	b2da      	uxtb	r2, r3
 8002986:	7a3b      	ldrb	r3, [r7, #8]
 8002988:	f362 13c7 	bfi	r3, r2, #7, #1
 800298c:	723b      	strb	r3, [r7, #8]
    ret = ism330is_write_reg(ctx, ISM330IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800298e:	f107 0208 	add.w	r2, r7, #8
 8002992:	2301      	movs	r3, #1
 8002994:	2116      	movs	r1, #22
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ff03 	bl	80027a2 <ism330is_write_reg>
 800299c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800299e:	68fb      	ldr	r3, [r7, #12]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <ism330is_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_gy_full_scale_set(stmdev_ctx_t *ctx,
                                   ism330is_gy_full_scale_t val)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	70fb      	strb	r3, [r7, #3]
  ism330is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80029b4:	f107 0208 	add.w	r2, r7, #8
 80029b8:	2301      	movs	r3, #1
 80029ba:	2111      	movs	r1, #17
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff fed8 	bl	8002772 <ism330is_read_reg>
 80029c2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d119      	bne.n	80029fe <ism330is_gy_full_scale_set+0x56>
  {
    ctrl2_g.fs_g = ((uint8_t)val & 0x3U);
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	7a3b      	ldrb	r3, [r7, #8]
 80029d4:	f362 0383 	bfi	r3, r2, #2, #2
 80029d8:	723b      	strb	r3, [r7, #8]
    ctrl2_g.fs_125 = ((uint8_t)val >> 4);
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	7a3b      	ldrb	r3, [r7, #8]
 80029e8:	f362 0341 	bfi	r3, r2, #1, #1
 80029ec:	723b      	strb	r3, [r7, #8]
    ret = ism330is_write_reg(ctx, ISM330IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80029ee:	f107 0208 	add.w	r2, r7, #8
 80029f2:	2301      	movs	r3, #1
 80029f4:	2111      	movs	r1, #17
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff fed3 	bl	80027a2 <ism330is_write_reg>
 80029fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80029fe:	68fb      	ldr	r3, [r7, #12]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <ism330is_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_gy_data_rate_set(stmdev_ctx_t *ctx,
                                  ism330is_gy_data_rate_t val)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	70fb      	strb	r3, [r7, #3]
  ism330is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002a14:	f107 0208 	add.w	r2, r7, #8
 8002a18:	2301      	movs	r3, #1
 8002a1a:	2111      	movs	r1, #17
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff fea8 	bl	8002772 <ism330is_read_reg>
 8002a22:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d128      	bne.n	8002a7c <ism330is_gy_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <ism330is_gy_data_rate_set+0x3e>
    {
      ret += ism330is_gy_hm_mode_set(ctx, ISM330IS_HIGH_PERFOMANCE_MODE_DISABLED);
 8002a34:	2101      	movs	r1, #1
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff ff90 	bl	800295c <ism330is_gy_hm_mode_set>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4413      	add	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	e007      	b.n	8002a56 <ism330is_gy_data_rate_set+0x4e>
    }
    else
    {
      ret += ism330is_gy_hm_mode_set(ctx, ISM330IS_HIGH_PERFOMANCE_MODE_ENABLED);
 8002a46:	2100      	movs	r1, #0
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff87 	bl	800295c <ism330is_gy_hm_mode_set>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
    }

    ctrl2_g.odr_g = ((uint8_t)val & 0xfU);
 8002a56:	78fb      	ldrb	r3, [r7, #3]
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	7a3b      	ldrb	r3, [r7, #8]
 8002a60:	f362 1307 	bfi	r3, r2, #4, #4
 8002a64:	723b      	strb	r3, [r7, #8]
    ret += ism330is_write_reg(ctx, ISM330IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002a66:	f107 0208 	add.w	r2, r7, #8
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	2111      	movs	r1, #17
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff fe97 	bl	80027a2 <ism330is_write_reg>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4413      	add	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <ism330is_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	70fb      	strb	r3, [r7, #3]
  ism330is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002a92:	f107 0208 	add.w	r2, r7, #8
 8002a96:	2301      	movs	r3, #1
 8002a98:	2112      	movs	r1, #18
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff fe69 	bl	8002772 <ism330is_read_reg>
 8002aa0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10f      	bne.n	8002ac8 <ism330is_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	7a3b      	ldrb	r3, [r7, #8]
 8002ab2:	f362 0382 	bfi	r3, r2, #2, #1
 8002ab6:	723b      	strb	r3, [r7, #8]
    ret = ism330is_write_reg(ctx, ISM330IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002ab8:	f107 0208 	add.w	r2, r7, #8
 8002abc:	2301      	movs	r3, #1
 8002abe:	2112      	movs	r1, #18
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff fe6e 	bl	80027a2 <ism330is_write_reg>
 8002ac6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <ism330is_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330is_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	460b      	mov	r3, r1
 8002adc:	70fb      	strb	r3, [r7, #3]
  ism330is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330is_read_reg(ctx, ISM330IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002ade:	f107 0208 	add.w	r2, r7, #8
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	2112      	movs	r1, #18
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff fe43 	bl	8002772 <ism330is_read_reg>
 8002aec:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10f      	bne.n	8002b14 <ism330is_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	7a3b      	ldrb	r3, [r7, #8]
 8002afe:	f362 1386 	bfi	r3, r2, #6, #1
 8002b02:	723b      	strb	r3, [r7, #8]
    ret = ism330is_write_reg(ctx, ISM330IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002b04:	f107 0208 	add.w	r2, r7, #8
 8002b08:	2301      	movs	r3, #1
 8002b0a:	2112      	movs	r1, #18
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fe48 	bl	80027a2 <ism330is_write_reg>
 8002b12:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b14:	68fb      	ldr	r3, [r7, #12]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b24:	4b12      	ldr	r3, [pc, #72]	@ (8002b70 <HAL_Init+0x50>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a11      	ldr	r2, [pc, #68]	@ (8002b70 <HAL_Init+0x50>)
 8002b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b30:	2003      	movs	r0, #3
 8002b32:	f000 f996 	bl	8002e62 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002b36:	f004 fbbd 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b74 <HAL_Init+0x54>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	490c      	ldr	r1, [pc, #48]	@ (8002b78 <HAL_Init+0x58>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b7c <HAL_Init+0x5c>)
 8002b4e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b50:	2004      	movs	r0, #4
 8002b52:	f000 f9db 	bl	8002f0c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b56:	200f      	movs	r0, #15
 8002b58:	f000 f812 	bl	8002b80 <HAL_InitTick>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e002      	b.n	8002b6c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b66:	f7ff f933 	bl	8001dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40022000 	.word	0x40022000
 8002b74:	46020c00 	.word	0x46020c00
 8002b78:	0800e5d0 	.word	0x0800e5d0
 8002b7c:	20000000 	.word	0x20000000

08002b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002b8c:	4b33      	ldr	r3, [pc, #204]	@ (8002c5c <HAL_InitTick+0xdc>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e05c      	b.n	8002c52 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002b98:	4b31      	ldr	r3, [pc, #196]	@ (8002c60 <HAL_InitTick+0xe0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d10c      	bne.n	8002bbe <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8002c64 <HAL_InitTick+0xe4>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8002c5c <HAL_InitTick+0xdc>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	4619      	mov	r1, r3
 8002bae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e037      	b.n	8002c2e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002bbe:	f000 f9fd 	bl	8002fbc <HAL_SYSTICK_GetCLKSourceConfig>
 8002bc2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d023      	beq.n	8002c12 <HAL_InitTick+0x92>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d82d      	bhi.n	8002c2c <HAL_InitTick+0xac>
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_InitTick+0x5e>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d00d      	beq.n	8002bf8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002bdc:	e026      	b.n	8002c2c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002bde:	4b21      	ldr	r3, [pc, #132]	@ (8002c64 <HAL_InitTick+0xe4>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c5c <HAL_InitTick+0xdc>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	4619      	mov	r1, r3
 8002be8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002bec:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf4:	60fb      	str	r3, [r7, #12]
        break;
 8002bf6:	e01a      	b.n	8002c2e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002bf8:	4b18      	ldr	r3, [pc, #96]	@ (8002c5c <HAL_InitTick+0xdc>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c02:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c06:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0e:	60fb      	str	r3, [r7, #12]
        break;
 8002c10:	e00d      	b.n	8002c2e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002c12:	4b12      	ldr	r3, [pc, #72]	@ (8002c5c <HAL_InitTick+0xdc>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c20:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	60fb      	str	r3, [r7, #12]
        break;
 8002c2a:	e000      	b.n	8002c2e <HAL_InitTick+0xae>
        break;
 8002c2c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f94a 	bl	8002ec8 <HAL_SYSTICK_Config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e009      	b.n	8002c52 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c46:	f000 f917 	bl	8002e78 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002c4a:	4a07      	ldr	r2, [pc, #28]	@ (8002c68 <HAL_InitTick+0xe8>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000008 	.word	0x20000008
 8002c60:	e000e010 	.word	0xe000e010
 8002c64:	20000000 	.word	0x20000000
 8002c68:	20000004 	.word	0x20000004

08002c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c70:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <HAL_IncTick+0x20>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <HAL_IncTick+0x24>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	4a04      	ldr	r2, [pc, #16]	@ (8002c90 <HAL_IncTick+0x24>)
 8002c7e:	6013      	str	r3, [r2, #0]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000008 	.word	0x20000008
 8002c90:	200025ac 	.word	0x200025ac

08002c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return uwTick;
 8002c98:	4b03      	ldr	r3, [pc, #12]	@ (8002ca8 <HAL_GetTick+0x14>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	200025ac 	.word	0x200025ac

08002cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cb4:	f7ff ffee 	bl	8002c94 <HAL_GetTick>
 8002cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cc4:	d005      	beq.n	8002cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf0 <HAL_Delay+0x44>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4413      	add	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cd2:	bf00      	nop
 8002cd4:	f7ff ffde 	bl	8002c94 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d8f7      	bhi.n	8002cd4 <HAL_Delay+0x28>
  {
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000008 	.word	0x20000008

08002cf4 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return __STM32U5xx_HAL_VERSION;
 8002cf8:	4b02      	ldr	r3, [pc, #8]	@ (8002d04 <HAL_GetHalVersion+0x10>)
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	01060100 	.word	0x01060100

08002d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d18:	4b0c      	ldr	r3, [pc, #48]	@ (8002d4c <__NVIC_SetPriorityGrouping+0x44>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d24:	4013      	ands	r3, r2
 8002d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3a:	4a04      	ldr	r2, [pc, #16]	@ (8002d4c <__NVIC_SetPriorityGrouping+0x44>)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	60d3      	str	r3, [r2, #12]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d54:	4b04      	ldr	r3, [pc, #16]	@ (8002d68 <__NVIC_GetPriorityGrouping+0x18>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	0a1b      	lsrs	r3, r3, #8
 8002d5a:	f003 0307 	and.w	r3, r3, #7
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	db0b      	blt.n	8002d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	f003 021f 	and.w	r2, r3, #31
 8002d84:	4907      	ldr	r1, [pc, #28]	@ (8002da4 <__NVIC_EnableIRQ+0x38>)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000e100 	.word	0xe000e100

08002da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	db0a      	blt.n	8002dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	490c      	ldr	r1, [pc, #48]	@ (8002df4 <__NVIC_SetPriority+0x4c>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	0112      	lsls	r2, r2, #4
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	440b      	add	r3, r1
 8002dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd0:	e00a      	b.n	8002de8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4908      	ldr	r1, [pc, #32]	@ (8002df8 <__NVIC_SetPriority+0x50>)
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	3b04      	subs	r3, #4
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	440b      	add	r3, r1
 8002de6:	761a      	strb	r2, [r3, #24]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000e100 	.word	0xe000e100
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	@ 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f1c3 0307 	rsb	r3, r3, #7
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	bf28      	it	cs
 8002e1a:	2304      	movcs	r3, #4
 8002e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d902      	bls.n	8002e2c <NVIC_EncodePriority+0x30>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3b03      	subs	r3, #3
 8002e2a:	e000      	b.n	8002e2e <NVIC_EncodePriority+0x32>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	401a      	ands	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43d9      	mvns	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	4313      	orrs	r3, r2
         );
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3724      	adds	r7, #36	@ 0x24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ff4c 	bl	8002d08 <__NVIC_SetPriorityGrouping>
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e86:	f7ff ff63 	bl	8002d50 <__NVIC_GetPriorityGrouping>
 8002e8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	6978      	ldr	r0, [r7, #20]
 8002e92:	f7ff ffb3 	bl	8002dfc <NVIC_EncodePriority>
 8002e96:	4602      	mov	r2, r0
 8002e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff ff82 	bl	8002da8 <__NVIC_SetPriority>
}
 8002ea4:	bf00      	nop
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff ff56 	bl	8002d6c <__NVIC_EnableIRQ>
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ed8:	d301      	bcc.n	8002ede <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002eda:	2301      	movs	r3, #1
 8002edc:	e00d      	b.n	8002efa <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002ede:	4a0a      	ldr	r2, [pc, #40]	@ (8002f08 <HAL_SYSTICK_Config+0x40>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002ee6:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <HAL_SYSTICK_Config+0x40>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002eec:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <HAL_SYSTICK_Config+0x40>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a05      	ldr	r2, [pc, #20]	@ (8002f08 <HAL_SYSTICK_Config+0x40>)
 8002ef2:	f043 0303 	orr.w	r3, r3, #3
 8002ef6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000e010 	.word	0xe000e010

08002f0c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d844      	bhi.n	8002fa4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f20 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f43 	.word	0x08002f43
 8002f24:	08002f61 	.word	0x08002f61
 8002f28:	08002f83 	.word	0x08002f83
 8002f2c:	08002fa5 	.word	0x08002fa5
 8002f30:	08002f35 	.word	0x08002f35
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002f34:	4b1f      	ldr	r3, [pc, #124]	@ (8002fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1e      	ldr	r2, [pc, #120]	@ (8002fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	6013      	str	r3, [r2, #0]
      break;
 8002f40:	e031      	b.n	8002fa6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002f42:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1b      	ldr	r2, [pc, #108]	@ (8002fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f54:	4a18      	ldr	r2, [pc, #96]	@ (8002fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f56:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002f5e:	e022      	b.n	8002fa6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002f60:	4b14      	ldr	r3, [pc, #80]	@ (8002fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a13      	ldr	r2, [pc, #76]	@ (8002fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f66:	f023 0304 	bic.w	r3, r3, #4
 8002f6a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002f6c:	4b12      	ldr	r3, [pc, #72]	@ (8002fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f72:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002f76:	4a10      	ldr	r2, [pc, #64]	@ (8002fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002f80:	e011      	b.n	8002fa6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002f82:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a0b      	ldr	r2, [pc, #44]	@ (8002fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f88:	f023 0304 	bic.w	r3, r3, #4
 8002f8c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f94:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002f98:	4a07      	ldr	r2, [pc, #28]	@ (8002fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002fa2:	e000      	b.n	8002fa6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002fa4:	bf00      	nop
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	e000e010 	.word	0xe000e010
 8002fb8:	46020c00 	.word	0x46020c00

08002fbc <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002fc2:	4b19      	ldr	r3, [pc, #100]	@ (8003028 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002fce:	2304      	movs	r3, #4
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	e021      	b.n	8003018 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002fd4:	4b15      	ldr	r3, [pc, #84]	@ (800302c <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8002fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fda:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002fde:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fe6:	d011      	beq.n	800300c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fee:	d810      	bhi.n	8003012 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d004      	beq.n	8003000 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ffc:	d003      	beq.n	8003006 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002ffe:	e008      	b.n	8003012 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003000:	2300      	movs	r3, #0
 8003002:	607b      	str	r3, [r7, #4]
        break;
 8003004:	e008      	b.n	8003018 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003006:	2301      	movs	r3, #1
 8003008:	607b      	str	r3, [r7, #4]
        break;
 800300a:	e005      	b.n	8003018 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800300c:	2302      	movs	r3, #2
 800300e:	607b      	str	r3, [r7, #4]
        break;
 8003010:	e002      	b.n	8003018 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
        break;
 8003016:	bf00      	nop
    }
  }
  return systick_source;
 8003018:	687b      	ldr	r3, [r7, #4]
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000e010 	.word	0xe000e010
 800302c:	46020c00 	.word	0x46020c00

08003030 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003038:	f7ff fe2c 	bl	8002c94 <HAL_GetTick>
 800303c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e06b      	b.n	8003120 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d008      	beq.n	8003066 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e05c      	b.n	8003120 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0204 	orr.w	r2, r2, #4
 8003074:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2205      	movs	r2, #5
 800307a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800307e:	e020      	b.n	80030c2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003080:	f7ff fe08 	bl	8002c94 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b05      	cmp	r3, #5
 800308c:	d919      	bls.n	80030c2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	f043 0210 	orr.w	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2203      	movs	r2, #3
 800309e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030b2:	2201      	movs	r2, #1
 80030b4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e02e      	b.n	8003120 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0d7      	beq.n	8003080 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0202 	orr.w	r2, r2, #2
 80030de:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2204      	movs	r2, #4
 80030e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80030f0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003102:	2b00      	cmp	r3, #0
 8003104:	d007      	beq.n	8003116 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800310a:	2201      	movs	r2, #1
 800310c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2200      	movs	r2, #0
 8003114:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e019      	b.n	800316e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d004      	beq.n	8003150 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e00e      	b.n	800316e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2204      	movs	r2, #4
 8003154:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003166:	f043 0304 	orr.w	r3, r3, #4
 800316a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b086      	sub	sp, #24
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800318a:	f023 030f 	bic.w	r3, r3, #15
 800318e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003198:	3b50      	subs	r3, #80	@ 0x50
 800319a:	09db      	lsrs	r3, r3, #7
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	2201      	movs	r2, #1
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4013      	ands	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 813b 	beq.w	8003430 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d011      	beq.n	80031ec <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031de:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e4:	f043 0201 	orr.w	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d011      	beq.n	800321e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003210:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003216:	f043 0202 	orr.w	r2, r3, #2
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d011      	beq.n	8003250 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003242:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003248:	f043 0204 	orr.w	r2, r3, #4
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d011      	beq.n	8003282 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003274:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327a:	f043 0208 	orr.w	r2, r3, #8
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800328c:	2b00      	cmp	r3, #0
 800328e:	d013      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00c      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032a6:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d04c      	beq.n	8003360 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d045      	beq.n	8003360 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032dc:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d12e      	bne.n	8003348 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032f8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695a      	ldr	r2, [r3, #20]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0202 	orr.w	r2, r2, #2
 8003308:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800331a:	2b00      	cmp	r3, #0
 800331c:	d007      	beq.n	800332e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003322:	2201      	movs	r2, #1
 8003324:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2200      	movs	r2, #0
 800332c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d07a      	beq.n	8003434 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
        }

        return;
 8003346:	e075      	b.n	8003434 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2205      	movs	r2, #5
 800334c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d039      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d032      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003384:	2b00      	cmp	r3, #0
 8003386:	d012      	beq.n	80033ae <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d116      	bne.n	80033c0 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003398:	2b00      	cmp	r3, #0
 800339a:	d111      	bne.n	80033c0 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a8:	2201      	movs	r2, #1
 80033aa:	731a      	strb	r2, [r3, #12]
 80033ac:	e008      	b.n	80033c0 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d103      	bne.n	80033c0 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80033c8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d025      	beq.n	8003436 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0202 	orr.w	r2, r2, #2
 80033f8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003412:	2201      	movs	r2, #1
 8003414:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003422:	2b00      	cmp	r3, #0
 8003424:	d007      	beq.n	8003436 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
 800342e:	e002      	b.n	8003436 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003430:	bf00      	nop
 8003432:	e000      	b.n	8003436 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003434:	bf00      	nop
    }
  }
}
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e02b      	b.n	80034a8 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003458:	f023 030f 	bic.w	r3, r3, #15
 800345c:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003466:	3b50      	subs	r3, #80	@ 0x50
 8003468:	09db      	lsrs	r3, r3, #7
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	2201      	movs	r2, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	d012      	beq.n	80034a6 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	f003 0311 	and.w	r3, r3, #17
 8003486:	2b11      	cmp	r3, #17
 8003488:	d106      	bne.n	8003498 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	431a      	orrs	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	e006      	b.n	80034a6 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	43db      	mvns	r3, r3
 80034a0:	401a      	ands	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80034bc:	f7ff fbea 	bl	8002c94 <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0db      	b.n	8003684 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a6e      	ldr	r2, [pc, #440]	@ (800368c <HAL_DMAEx_List_Init+0x1d8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	f000 809f 	beq.w	8003616 <HAL_DMAEx_List_Init+0x162>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a6c      	ldr	r2, [pc, #432]	@ (8003690 <HAL_DMAEx_List_Init+0x1dc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	f000 8099 	beq.w	8003616 <HAL_DMAEx_List_Init+0x162>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a6a      	ldr	r2, [pc, #424]	@ (8003694 <HAL_DMAEx_List_Init+0x1e0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	f000 8093 	beq.w	8003616 <HAL_DMAEx_List_Init+0x162>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a68      	ldr	r2, [pc, #416]	@ (8003698 <HAL_DMAEx_List_Init+0x1e4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	f000 808d 	beq.w	8003616 <HAL_DMAEx_List_Init+0x162>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a66      	ldr	r2, [pc, #408]	@ (800369c <HAL_DMAEx_List_Init+0x1e8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	f000 8087 	beq.w	8003616 <HAL_DMAEx_List_Init+0x162>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a64      	ldr	r2, [pc, #400]	@ (80036a0 <HAL_DMAEx_List_Init+0x1ec>)
 800350e:	4293      	cmp	r3, r2
 8003510:	f000 8081 	beq.w	8003616 <HAL_DMAEx_List_Init+0x162>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a62      	ldr	r2, [pc, #392]	@ (80036a4 <HAL_DMAEx_List_Init+0x1f0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d07b      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a61      	ldr	r2, [pc, #388]	@ (80036a8 <HAL_DMAEx_List_Init+0x1f4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d076      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a5f      	ldr	r2, [pc, #380]	@ (80036ac <HAL_DMAEx_List_Init+0x1f8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d071      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a5e      	ldr	r2, [pc, #376]	@ (80036b0 <HAL_DMAEx_List_Init+0x1fc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d06c      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a5c      	ldr	r2, [pc, #368]	@ (80036b4 <HAL_DMAEx_List_Init+0x200>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d067      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a5b      	ldr	r2, [pc, #364]	@ (80036b8 <HAL_DMAEx_List_Init+0x204>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d062      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a59      	ldr	r2, [pc, #356]	@ (80036bc <HAL_DMAEx_List_Init+0x208>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d05d      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a58      	ldr	r2, [pc, #352]	@ (80036c0 <HAL_DMAEx_List_Init+0x20c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d058      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a56      	ldr	r2, [pc, #344]	@ (80036c4 <HAL_DMAEx_List_Init+0x210>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d053      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a55      	ldr	r2, [pc, #340]	@ (80036c8 <HAL_DMAEx_List_Init+0x214>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d04e      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a53      	ldr	r2, [pc, #332]	@ (80036cc <HAL_DMAEx_List_Init+0x218>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d049      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a52      	ldr	r2, [pc, #328]	@ (80036d0 <HAL_DMAEx_List_Init+0x21c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d044      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a50      	ldr	r2, [pc, #320]	@ (80036d4 <HAL_DMAEx_List_Init+0x220>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d03f      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a4f      	ldr	r2, [pc, #316]	@ (80036d8 <HAL_DMAEx_List_Init+0x224>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d03a      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a4d      	ldr	r2, [pc, #308]	@ (80036dc <HAL_DMAEx_List_Init+0x228>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d035      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a4c      	ldr	r2, [pc, #304]	@ (80036e0 <HAL_DMAEx_List_Init+0x22c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d030      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a4a      	ldr	r2, [pc, #296]	@ (80036e4 <HAL_DMAEx_List_Init+0x230>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d02b      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a49      	ldr	r2, [pc, #292]	@ (80036e8 <HAL_DMAEx_List_Init+0x234>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d026      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a47      	ldr	r2, [pc, #284]	@ (80036ec <HAL_DMAEx_List_Init+0x238>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d021      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a46      	ldr	r2, [pc, #280]	@ (80036f0 <HAL_DMAEx_List_Init+0x23c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d01c      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a44      	ldr	r2, [pc, #272]	@ (80036f4 <HAL_DMAEx_List_Init+0x240>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d017      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a43      	ldr	r2, [pc, #268]	@ (80036f8 <HAL_DMAEx_List_Init+0x244>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d012      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a41      	ldr	r2, [pc, #260]	@ (80036fc <HAL_DMAEx_List_Init+0x248>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00d      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a40      	ldr	r2, [pc, #256]	@ (8003700 <HAL_DMAEx_List_Init+0x24c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d008      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a3e      	ldr	r2, [pc, #248]	@ (8003704 <HAL_DMAEx_List_Init+0x250>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d003      	beq.n	8003616 <HAL_DMAEx_List_Init+0x162>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a3d      	ldr	r2, [pc, #244]	@ (8003708 <HAL_DMAEx_List_Init+0x254>)
 8003614:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2202      	movs	r2, #2
 8003622:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0206 	orr.w	r2, r2, #6
 8003634:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003636:	e00f      	b.n	8003658 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003638:	f7ff fb2c 	bl	8002c94 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b05      	cmp	r3, #5
 8003644:	d908      	bls.n	8003658 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2210      	movs	r2, #16
 800364a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2203      	movs	r2, #3
 8003650:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e015      	b.n	8003684 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e8      	bne.n	8003638 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f9d4 	bl	8003a14 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40020050 	.word	0x40020050
 8003690:	50020050 	.word	0x50020050
 8003694:	400200d0 	.word	0x400200d0
 8003698:	500200d0 	.word	0x500200d0
 800369c:	40020150 	.word	0x40020150
 80036a0:	50020150 	.word	0x50020150
 80036a4:	400201d0 	.word	0x400201d0
 80036a8:	500201d0 	.word	0x500201d0
 80036ac:	40020250 	.word	0x40020250
 80036b0:	50020250 	.word	0x50020250
 80036b4:	400202d0 	.word	0x400202d0
 80036b8:	500202d0 	.word	0x500202d0
 80036bc:	40020350 	.word	0x40020350
 80036c0:	50020350 	.word	0x50020350
 80036c4:	400203d0 	.word	0x400203d0
 80036c8:	500203d0 	.word	0x500203d0
 80036cc:	40020450 	.word	0x40020450
 80036d0:	50020450 	.word	0x50020450
 80036d4:	400204d0 	.word	0x400204d0
 80036d8:	500204d0 	.word	0x500204d0
 80036dc:	40020550 	.word	0x40020550
 80036e0:	50020550 	.word	0x50020550
 80036e4:	400205d0 	.word	0x400205d0
 80036e8:	500205d0 	.word	0x500205d0
 80036ec:	40020650 	.word	0x40020650
 80036f0:	50020650 	.word	0x50020650
 80036f4:	400206d0 	.word	0x400206d0
 80036f8:	500206d0 	.word	0x500206d0
 80036fc:	40020750 	.word	0x40020750
 8003700:	50020750 	.word	0x50020750
 8003704:	400207d0 	.word	0x400207d0
 8003708:	500207d0 	.word	0x500207d0

0800370c <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_DMAEx_List_BuildNode+0x16>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e004      	b.n	8003730 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8003726:	6839      	ldr	r1, [r7, #0]
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 facb 	bl	8003cc4 <DMA_List_BuildNode>

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	@ 0x28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_DMAEx_List_InsertNode_Tail+0x16>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e066      	b.n	8003820 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d104      	bne.n	8003764 <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2204      	movs	r2, #4
 800375e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e05d      	b.n	8003820 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2200      	movs	r2, #0
 800376a:	6839      	ldr	r1, [r7, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fc01 	bl	8003f74 <DMA_List_CheckNodesBaseAddresses>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d004      	beq.n	8003782 <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2205      	movs	r2, #5
 800377c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e04e      	b.n	8003820 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fc22 	bl	8003fd4 <DMA_List_CheckNodesTypes>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2204      	movs	r2, #4
 800379a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e03f      	b.n	8003820 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d103      	bne.n	80037b0 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e02b      	b.n	8003808 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80037b0:	f107 0220 	add.w	r2, r7, #32
 80037b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037b8:	4619      	mov	r1, r3
 80037ba:	6838      	ldr	r0, [r7, #0]
 80037bc:	f000 fc46 	bl	800404c <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80037c4:	f107 030c 	add.w	r3, r7, #12
 80037c8:	461a      	mov	r2, r3
 80037ca:	2100      	movs	r1, #0
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fc6d 	bl	80040ac <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	461a      	mov	r2, r3
 80037e0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80037e4:	4013      	ands	r3, r2
 80037e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037e8:	6a3a      	ldr	r2, [r7, #32]
 80037ea:	4319      	orrs	r1, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80037f8:	4013      	ands	r3, r2
 80037fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4610      	mov	r0, r2
 8003800:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003802:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8003804:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3728      	adds	r7, #40	@ 0x28
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	@ 0x28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e052      	b.n	80038e0 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d104      	bne.n	800384c <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2202      	movs	r2, #2
 8003846:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e049      	b.n	80038e0 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00c      	beq.n	800386e <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d101      	bne.n	8003864 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	e03d      	b.n	80038e0 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2204      	movs	r2, #4
 8003868:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e038      	b.n	80038e0 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d104      	bne.n	8003880 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2204      	movs	r2, #4
 800387a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e02f      	b.n	80038e0 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f107 0220 	add.w	r2, r7, #32
 8003894:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fbd7 	bl	800404c <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80038a2:	f107 030c 	add.w	r3, r7, #12
 80038a6:	461a      	mov	r2, r3
 80038a8:	2100      	movs	r1, #0
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fbfe 	bl	80040ac <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80038ba:	4013      	ands	r3, r2
 80038bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4610      	mov	r0, r2
 80038c2:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80038c4:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80038c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3728      	adds	r7, #40	@ 0x28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_DMAEx_List_LinkQ+0x16>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e072      	b.n	80039e8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003908:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d002      	beq.n	800391c <HAL_DMAEx_List_LinkQ+0x34>
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	2b05      	cmp	r3, #5
 800391a:	d108      	bne.n	800392e <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2240      	movs	r2, #64	@ 0x40
 8003920:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e05c      	b.n	80039e8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	7b1b      	ldrb	r3, [r3, #12]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d104      	bne.n	8003942 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2201      	movs	r2, #1
 800393c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e052      	b.n	80039e8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a2b      	ldr	r2, [pc, #172]	@ (80039f4 <HAL_DMAEx_List_LinkQ+0x10c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d022      	beq.n	8003992 <HAL_DMAEx_List_LinkQ+0xaa>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a29      	ldr	r2, [pc, #164]	@ (80039f8 <HAL_DMAEx_List_LinkQ+0x110>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d01d      	beq.n	8003992 <HAL_DMAEx_List_LinkQ+0xaa>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a28      	ldr	r2, [pc, #160]	@ (80039fc <HAL_DMAEx_List_LinkQ+0x114>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d018      	beq.n	8003992 <HAL_DMAEx_List_LinkQ+0xaa>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a26      	ldr	r2, [pc, #152]	@ (8003a00 <HAL_DMAEx_List_LinkQ+0x118>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d013      	beq.n	8003992 <HAL_DMAEx_List_LinkQ+0xaa>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a25      	ldr	r2, [pc, #148]	@ (8003a04 <HAL_DMAEx_List_LinkQ+0x11c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00e      	beq.n	8003992 <HAL_DMAEx_List_LinkQ+0xaa>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a23      	ldr	r2, [pc, #140]	@ (8003a08 <HAL_DMAEx_List_LinkQ+0x120>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d009      	beq.n	8003992 <HAL_DMAEx_List_LinkQ+0xaa>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a22      	ldr	r2, [pc, #136]	@ (8003a0c <HAL_DMAEx_List_LinkQ+0x124>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d004      	beq.n	8003992 <HAL_DMAEx_List_LinkQ+0xaa>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a20      	ldr	r2, [pc, #128]	@ (8003a10 <HAL_DMAEx_List_LinkQ+0x128>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d101      	bne.n	8003996 <HAL_DMAEx_List_LinkQ+0xae>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <HAL_DMAEx_List_LinkQ+0xb0>
 8003996:	2300      	movs	r3, #0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10b      	bne.n	80039b4 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d004      	beq.n	80039b4 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2203      	movs	r2, #3
 80039ae:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e019      	b.n	80039e8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b8:	2b81      	cmp	r3, #129	@ 0x81
 80039ba:	d108      	bne.n	80039ce <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10d      	bne.n	80039e0 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2204      	movs	r2, #4
 80039c8:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e00c      	b.n	80039e8 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d004      	beq.n	80039e0 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2204      	movs	r2, #4
 80039da:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e003      	b.n	80039e8 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	40020650 	.word	0x40020650
 80039f8:	50020650 	.word	0x50020650
 80039fc:	400206d0 	.word	0x400206d0
 8003a00:	500206d0 	.word	0x500206d0
 8003a04:	40020750 	.word	0x40020750
 8003a08:	50020750 	.word	0x50020750
 8003a0c:	400207d0 	.word	0x400207d0
 8003a10:	500207d0 	.word	0x500207d0

08003a14 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a85      	ldr	r2, [pc, #532]	@ (8003c44 <DMA_List_Init+0x230>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	f000 80a0 	beq.w	8003b74 <DMA_List_Init+0x160>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a83      	ldr	r2, [pc, #524]	@ (8003c48 <DMA_List_Init+0x234>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	f000 809a 	beq.w	8003b74 <DMA_List_Init+0x160>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a81      	ldr	r2, [pc, #516]	@ (8003c4c <DMA_List_Init+0x238>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	f000 8094 	beq.w	8003b74 <DMA_List_Init+0x160>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a7f      	ldr	r2, [pc, #508]	@ (8003c50 <DMA_List_Init+0x23c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	f000 808e 	beq.w	8003b74 <DMA_List_Init+0x160>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a7d      	ldr	r2, [pc, #500]	@ (8003c54 <DMA_List_Init+0x240>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	f000 8088 	beq.w	8003b74 <DMA_List_Init+0x160>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a7b      	ldr	r2, [pc, #492]	@ (8003c58 <DMA_List_Init+0x244>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	f000 8082 	beq.w	8003b74 <DMA_List_Init+0x160>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a79      	ldr	r2, [pc, #484]	@ (8003c5c <DMA_List_Init+0x248>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d07c      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a78      	ldr	r2, [pc, #480]	@ (8003c60 <DMA_List_Init+0x24c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d077      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a76      	ldr	r2, [pc, #472]	@ (8003c64 <DMA_List_Init+0x250>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d072      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a75      	ldr	r2, [pc, #468]	@ (8003c68 <DMA_List_Init+0x254>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d06d      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a73      	ldr	r2, [pc, #460]	@ (8003c6c <DMA_List_Init+0x258>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d068      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a72      	ldr	r2, [pc, #456]	@ (8003c70 <DMA_List_Init+0x25c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d063      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a70      	ldr	r2, [pc, #448]	@ (8003c74 <DMA_List_Init+0x260>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d05e      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6f      	ldr	r2, [pc, #444]	@ (8003c78 <DMA_List_Init+0x264>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d059      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a6d      	ldr	r2, [pc, #436]	@ (8003c7c <DMA_List_Init+0x268>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d054      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6c      	ldr	r2, [pc, #432]	@ (8003c80 <DMA_List_Init+0x26c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d04f      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6a      	ldr	r2, [pc, #424]	@ (8003c84 <DMA_List_Init+0x270>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d04a      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a69      	ldr	r2, [pc, #420]	@ (8003c88 <DMA_List_Init+0x274>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d045      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a67      	ldr	r2, [pc, #412]	@ (8003c8c <DMA_List_Init+0x278>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d040      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a66      	ldr	r2, [pc, #408]	@ (8003c90 <DMA_List_Init+0x27c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d03b      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a64      	ldr	r2, [pc, #400]	@ (8003c94 <DMA_List_Init+0x280>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d036      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a63      	ldr	r2, [pc, #396]	@ (8003c98 <DMA_List_Init+0x284>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d031      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a61      	ldr	r2, [pc, #388]	@ (8003c9c <DMA_List_Init+0x288>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d02c      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a60      	ldr	r2, [pc, #384]	@ (8003ca0 <DMA_List_Init+0x28c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d027      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a5e      	ldr	r2, [pc, #376]	@ (8003ca4 <DMA_List_Init+0x290>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d022      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a5d      	ldr	r2, [pc, #372]	@ (8003ca8 <DMA_List_Init+0x294>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d01d      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a5b      	ldr	r2, [pc, #364]	@ (8003cac <DMA_List_Init+0x298>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d018      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a5a      	ldr	r2, [pc, #360]	@ (8003cb0 <DMA_List_Init+0x29c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d013      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a58      	ldr	r2, [pc, #352]	@ (8003cb4 <DMA_List_Init+0x2a0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00e      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a57      	ldr	r2, [pc, #348]	@ (8003cb8 <DMA_List_Init+0x2a4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d009      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a55      	ldr	r2, [pc, #340]	@ (8003cbc <DMA_List_Init+0x2a8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d004      	beq.n	8003b74 <DMA_List_Init+0x160>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a54      	ldr	r2, [pc, #336]	@ (8003cc0 <DMA_List_Init+0x2ac>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d101      	bne.n	8003b78 <DMA_List_Init+0x164>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <DMA_List_Init+0x166>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d004      	beq.n	8003b88 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003bac:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a36      	ldr	r2, [pc, #216]	@ (8003ca4 <DMA_List_Init+0x290>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d022      	beq.n	8003c16 <DMA_List_Init+0x202>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a34      	ldr	r2, [pc, #208]	@ (8003ca8 <DMA_List_Init+0x294>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d01d      	beq.n	8003c16 <DMA_List_Init+0x202>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a33      	ldr	r2, [pc, #204]	@ (8003cac <DMA_List_Init+0x298>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d018      	beq.n	8003c16 <DMA_List_Init+0x202>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a31      	ldr	r2, [pc, #196]	@ (8003cb0 <DMA_List_Init+0x29c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d013      	beq.n	8003c16 <DMA_List_Init+0x202>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a30      	ldr	r2, [pc, #192]	@ (8003cb4 <DMA_List_Init+0x2a0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00e      	beq.n	8003c16 <DMA_List_Init+0x202>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a2e      	ldr	r2, [pc, #184]	@ (8003cb8 <DMA_List_Init+0x2a4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d009      	beq.n	8003c16 <DMA_List_Init+0x202>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a2d      	ldr	r2, [pc, #180]	@ (8003cbc <DMA_List_Init+0x2a8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d004      	beq.n	8003c16 <DMA_List_Init+0x202>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc0 <DMA_List_Init+0x2ac>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d101      	bne.n	8003c1a <DMA_List_Init+0x206>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <DMA_List_Init+0x208>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d007      	beq.n	8003c30 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2200      	movs	r2, #0
 8003c26:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2200      	movs	r2, #0
 8003c36:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	40020050 	.word	0x40020050
 8003c48:	50020050 	.word	0x50020050
 8003c4c:	400200d0 	.word	0x400200d0
 8003c50:	500200d0 	.word	0x500200d0
 8003c54:	40020150 	.word	0x40020150
 8003c58:	50020150 	.word	0x50020150
 8003c5c:	400201d0 	.word	0x400201d0
 8003c60:	500201d0 	.word	0x500201d0
 8003c64:	40020250 	.word	0x40020250
 8003c68:	50020250 	.word	0x50020250
 8003c6c:	400202d0 	.word	0x400202d0
 8003c70:	500202d0 	.word	0x500202d0
 8003c74:	40020350 	.word	0x40020350
 8003c78:	50020350 	.word	0x50020350
 8003c7c:	400203d0 	.word	0x400203d0
 8003c80:	500203d0 	.word	0x500203d0
 8003c84:	40020450 	.word	0x40020450
 8003c88:	50020450 	.word	0x50020450
 8003c8c:	400204d0 	.word	0x400204d0
 8003c90:	500204d0 	.word	0x500204d0
 8003c94:	40020550 	.word	0x40020550
 8003c98:	50020550 	.word	0x50020550
 8003c9c:	400205d0 	.word	0x400205d0
 8003ca0:	500205d0 	.word	0x500205d0
 8003ca4:	40020650 	.word	0x40020650
 8003ca8:	50020650 	.word	0x50020650
 8003cac:	400206d0 	.word	0x400206d0
 8003cb0:	500206d0 	.word	0x500206d0
 8003cb4:	40020750 	.word	0x40020750
 8003cb8:	50020750 	.word	0x50020750
 8003cbc:	400207d0 	.word	0x400207d0
 8003cc0:	500207d0 	.word	0x500207d0

08003cc4 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003cd6:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8003cdc:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003ce2:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8003ce8:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d017      	beq.n	8003d2a <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d06:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	051b      	lsls	r3, r3, #20
 8003d10:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003d14:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003d22:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003d24:	431a      	orrs	r2, r3
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6859      	ldr	r1, [r3, #4]
 8003d32:	f240 237f 	movw	r3, #639	@ 0x27f
 8003d36:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d46:	d10c      	bne.n	8003d62 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d011      	beq.n	8003d78 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	605a      	str	r2, [r3, #4]
 8003d60:	e00a      	b.n	8003d78 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d6a:	d105      	bne.n	8003d78 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00f      	beq.n	8003da0 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d92:	041b      	lsls	r3, r3, #16
 8003d94:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003d98:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d04e      	beq.n	8003e54 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	0419      	lsls	r1, r3, #16
 8003dc2:	4b6a      	ldr	r3, [pc, #424]	@ (8003f6c <DMA_List_BuildNode+0x2a8>)
 8003dc4:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	da06      	bge.n	8003de2 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	e005      	b.n	8003dee <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	da06      	bge.n	8003e04 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	609a      	str	r2, [r3, #8]
 8003e02:	e005      	b.n	8003e10 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	da06      	bge.n	8003e26 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	e005      	b.n	8003e32 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	da06      	bge.n	8003e48 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	609a      	str	r2, [r3, #8]
 8003e46:	e005      	b.n	8003e54 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d05d      	beq.n	8003f2c <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	da09      	bge.n	8003e8c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e7c:	425b      	negs	r3, r3
 8003e7e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	615a      	str	r2, [r3, #20]
 8003e8a:	e005      	b.n	8003e98 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e90:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	da0d      	bge.n	8003ebc <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea4:	425b      	negs	r3, r3
 8003ea6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	695a      	ldr	r2, [r3, #20]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	0419      	lsls	r1, r3, #16
 8003eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8003f70 <DMA_List_BuildNode+0x2ac>)
 8003eb2:	400b      	ands	r3, r1
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	615a      	str	r2, [r3, #20]
 8003eba:	e009      	b.n	8003ed0 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec4:	0419      	lsls	r1, r3, #16
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8003f70 <DMA_List_BuildNode+0x2ac>)
 8003ec8:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	da08      	bge.n	8003eea <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003edc:	425b      	negs	r3, r3
 8003ede:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	619a      	str	r2, [r3, #24]
 8003ee8:	e004      	b.n	8003ef4 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eee:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	da0b      	bge.n	8003f14 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f00:	425b      	negs	r3, r3
 8003f02:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	619a      	str	r2, [r3, #24]
 8003f12:	e007      	b.n	8003f24 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f1c:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2200      	movs	r2, #0
 8003f28:	61da      	str	r2, [r3, #28]
 8003f2a:	e002      	b.n	8003f32 <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d006      	beq.n	8003f54 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8003f52:	e005      	b.n	8003f60 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	621a      	str	r2, [r3, #32]
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	07ff0000 	.word	0x07ff0000
 8003f70:	1fff0000 	.word	0x1fff0000

08003f74 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	0c1b      	lsrs	r3, r3, #16
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	e00a      	b.n	8003fb6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	e004      	b.n	8003fb6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	0c1b      	lsrs	r3, r3, #16
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d001      	beq.n	8003fc6 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d004      	beq.n	8003ff4 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	e00e      	b.n	8004012 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d004      	beq.n	8004004 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	e006      	b.n	8004012 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d007      	beq.n	8004028 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	429a      	cmp	r2, r3
 8004022:	d001      	beq.n	8004028 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8004024:	2302      	movs	r3, #2
 8004026:	e00b      	b.n	8004040 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	b2db      	uxtb	r3, r3
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	429a      	cmp	r2, r3
 8004038:	d001      	beq.n	800403e <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800403a:	2303      	movs	r3, #3
 800403c:	e000      	b.n	8004040 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00c      	beq.n	800407e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4a0d      	ldr	r2, [pc, #52]	@ (80040a4 <DMA_List_GetCLLRNodeInfo+0x58>)
 800406e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00f      	beq.n	8004096 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2207      	movs	r2, #7
 800407a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800407c:	e00b      	b.n	8004096 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4a08      	ldr	r2, [pc, #32]	@ (80040a8 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8004088:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2205      	movs	r2, #5
 8004094:	601a      	str	r2, [r3, #0]
}
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	fe010000 	.word	0xfe010000
 80040a8:	f8010000 	.word	0xf8010000

080040ac <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b089      	sub	sp, #36	@ 0x24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d142      	bne.n	8004156 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80040d0:	e01d      	b.n	800410e <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d107      	bne.n	80040e8 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80040e2:	4013      	ands	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	e00f      	b.n	8004108 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	0c1b      	lsrs	r3, r3, #16
 80040f2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4413      	add	r3, r2
 80040f8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004100:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	3301      	adds	r3, #1
 800410c:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	429a      	cmp	r2, r3
 8004116:	d3dc      	bcc.n	80040d2 <DMA_List_FindNode+0x26>
 8004118:	e029      	b.n	800416e <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d107      	bne.n	8004130 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800412a:	4013      	ands	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	e00f      	b.n	8004150 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4413      	add	r3, r2
 8004140:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004148:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800414c:	4013      	ands	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	3301      	adds	r3, #1
 8004154:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	429a      	cmp	r2, r3
 800415e:	d206      	bcs.n	800416e <DMA_List_FindNode+0xc2>
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004166:	4013      	ands	r3, r2
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	429a      	cmp	r2, r3
 800416c:	d1d5      	bne.n	800411a <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800417a:	4013      	ands	r3, r2
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	429a      	cmp	r2, r3
 8004180:	d001      	beq.n	8004186 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8004182:	2301      	movs	r3, #1
 8004184:	e02b      	b.n	80041de <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	041b      	lsls	r3, r3, #16
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	041b      	lsls	r3, r3, #16
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	461a      	mov	r2, r3
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00f      	beq.n	80041dc <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	461a      	mov	r2, r3
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80041cc:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	0c1b      	lsrs	r3, r3, #16
 80041d4:	041b      	lsls	r3, r3, #16
 80041d6:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3724      	adds	r7, #36	@ 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b089      	sub	sp, #36	@ 0x24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80041fe:	e1ba      	b.n	8004576 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	2101      	movs	r1, #1
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	fa01 f303 	lsl.w	r3, r1, r3
 800420c:	4013      	ands	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 81aa 	beq.w	8004570 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a55      	ldr	r2, [pc, #340]	@ (8004374 <HAL_GPIO_Init+0x188>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d15d      	bne.n	80042e0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800422a:	2201      	movs	r2, #1
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43db      	mvns	r3, r3
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	4013      	ands	r3, r2
 8004238:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f003 0201 	and.w	r2, r3, #1
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	4313      	orrs	r3, r2
 800424c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004254:	4a48      	ldr	r2, [pc, #288]	@ (8004378 <HAL_GPIO_Init+0x18c>)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800425c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800425e:	4a46      	ldr	r2, [pc, #280]	@ (8004378 <HAL_GPIO_Init+0x18c>)
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	4413      	add	r3, r2
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	08da      	lsrs	r2, r3, #3
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	3208      	adds	r2, #8
 8004272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004276:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	220f      	movs	r2, #15
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	4013      	ands	r3, r2
 800428c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	220b      	movs	r2, #11
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	08da      	lsrs	r2, r3, #3
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	3208      	adds	r2, #8
 80042aa:	69f9      	ldr	r1, [r7, #28]
 80042ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	2203      	movs	r2, #3
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	43db      	mvns	r3, r3
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	4013      	ands	r3, r2
 80042c6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	2202      	movs	r2, #2
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	e067      	b.n	80043b0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d003      	beq.n	80042f0 <HAL_GPIO_Init+0x104>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b12      	cmp	r3, #18
 80042ee:	d145      	bne.n	800437c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	08da      	lsrs	r2, r3, #3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3208      	adds	r2, #8
 80042f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	220f      	movs	r2, #15
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	4013      	ands	r3, r2
 8004312:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f003 020f 	and.w	r2, r3, #15
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	4313      	orrs	r3, r2
 800432c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	08da      	lsrs	r2, r3, #3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3208      	adds	r2, #8
 8004336:	69f9      	ldr	r1, [r7, #28]
 8004338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	2203      	movs	r2, #3
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	4013      	ands	r3, r2
 8004352:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f003 0203 	and.w	r2, r3, #3
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	4313      	orrs	r3, r2
 8004368:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	e01e      	b.n	80043b0 <HAL_GPIO_Init+0x1c4>
 8004372:	bf00      	nop
 8004374:	46020000 	.word	0x46020000
 8004378:	0800e628 	.word	0x0800e628
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	2203      	movs	r2, #3
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	4013      	ands	r3, r2
 8004392:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 0203 	and.w	r2, r3, #3
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d00b      	beq.n	80043d0 <HAL_GPIO_Init+0x1e4>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d007      	beq.n	80043d0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043c4:	2b11      	cmp	r3, #17
 80043c6:	d003      	beq.n	80043d0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b12      	cmp	r3, #18
 80043ce:	d130      	bne.n	8004432 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	2203      	movs	r2, #3
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	4013      	ands	r3, r2
 80043e6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004406:	2201      	movs	r2, #1
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43db      	mvns	r3, r3
 8004410:	69fa      	ldr	r2, [r7, #28]
 8004412:	4013      	ands	r3, r2
 8004414:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	f003 0201 	and.w	r2, r3, #1
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	4313      	orrs	r3, r2
 800442a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b03      	cmp	r3, #3
 8004438:	d017      	beq.n	800446a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	2203      	movs	r2, #3
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	43db      	mvns	r3, r3
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	4013      	ands	r3, r2
 8004450:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	4313      	orrs	r3, r2
 8004462:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	69fa      	ldr	r2, [r7, #28]
 8004468:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d07c      	beq.n	8004570 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004476:	4a47      	ldr	r2, [pc, #284]	@ (8004594 <HAL_GPIO_Init+0x3a8>)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	089b      	lsrs	r3, r3, #2
 800447c:	3318      	adds	r3, #24
 800447e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004482:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	220f      	movs	r2, #15
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43db      	mvns	r3, r3
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	4013      	ands	r3, r2
 8004498:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	0a9a      	lsrs	r2, r3, #10
 800449e:	4b3e      	ldr	r3, [pc, #248]	@ (8004598 <HAL_GPIO_Init+0x3ac>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	f002 0203 	and.w	r2, r2, #3
 80044a8:	00d2      	lsls	r2, r2, #3
 80044aa:	4093      	lsls	r3, r2
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80044b2:	4938      	ldr	r1, [pc, #224]	@ (8004594 <HAL_GPIO_Init+0x3a8>)
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	089b      	lsrs	r3, r3, #2
 80044b8:	3318      	adds	r3, #24
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80044c0:	4b34      	ldr	r3, [pc, #208]	@ (8004594 <HAL_GPIO_Init+0x3a8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	43db      	mvns	r3, r3
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	4013      	ands	r3, r2
 80044ce:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80044e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004594 <HAL_GPIO_Init+0x3a8>)
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80044ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004594 <HAL_GPIO_Init+0x3a8>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	43db      	mvns	r3, r3
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	4013      	ands	r3, r2
 80044f8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800450e:	4a21      	ldr	r2, [pc, #132]	@ (8004594 <HAL_GPIO_Init+0x3a8>)
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004514:	4b1f      	ldr	r3, [pc, #124]	@ (8004594 <HAL_GPIO_Init+0x3a8>)
 8004516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800451a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	43db      	mvns	r3, r3
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	4013      	ands	r3, r2
 8004524:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800453a:	4a16      	ldr	r2, [pc, #88]	@ (8004594 <HAL_GPIO_Init+0x3a8>)
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004542:	4b14      	ldr	r3, [pc, #80]	@ (8004594 <HAL_GPIO_Init+0x3a8>)
 8004544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004548:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	43db      	mvns	r3, r3
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	4013      	ands	r3, r2
 8004552:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004568:	4a0a      	ldr	r2, [pc, #40]	@ (8004594 <HAL_GPIO_Init+0x3a8>)
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	3301      	adds	r3, #1
 8004574:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	fa22 f303 	lsr.w	r3, r2, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	f47f ae3d 	bne.w	8004200 <HAL_GPIO_Init+0x14>
  }
}
 8004586:	bf00      	nop
 8004588:	bf00      	nop
 800458a:	3724      	adds	r7, #36	@ 0x24
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	46022000 	.word	0x46022000
 8004598:	002f7f7f 	.word	0x002f7f7f

0800459c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800459c:	b480      	push	{r7}
 800459e:	b089      	sub	sp, #36	@ 0x24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80045ae:	e0bc      	b.n	800472a <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80045b0:	2201      	movs	r2, #1
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	4013      	ands	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80ad 	beq.w	8004724 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a5e      	ldr	r2, [pc, #376]	@ (8004748 <HAL_GPIO_DeInit+0x1ac>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d115      	bne.n	80045fe <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 80045d2:	4a5e      	ldr	r2, [pc, #376]	@ (800474c <HAL_GPIO_DeInit+0x1b0>)
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045da:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80045dc:	4a5b      	ldr	r2, [pc, #364]	@ (800474c <HAL_GPIO_DeInit+0x1b0>)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4413      	add	r3, r2
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 80045e8:	4b57      	ldr	r3, [pc, #348]	@ (8004748 <HAL_GPIO_DeInit+0x1ac>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	2101      	movs	r1, #1
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	fa01 f303 	lsl.w	r3, r1, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	4954      	ldr	r1, [pc, #336]	@ (8004748 <HAL_GPIO_DeInit+0x1ac>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	600b      	str	r3, [r1, #0]
 80045fc:	e053      	b.n	80046a6 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 80045fe:	4a54      	ldr	r2, [pc, #336]	@ (8004750 <HAL_GPIO_DeInit+0x1b4>)
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	089b      	lsrs	r3, r3, #2
 8004604:	3318      	adds	r3, #24
 8004606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800460a:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	220f      	movs	r2, #15
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4013      	ands	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	0a9a      	lsrs	r2, r3, #10
 8004624:	4b4b      	ldr	r3, [pc, #300]	@ (8004754 <HAL_GPIO_DeInit+0x1b8>)
 8004626:	4013      	ands	r3, r2
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	f002 0203 	and.w	r2, r2, #3
 800462e:	00d2      	lsls	r2, r2, #3
 8004630:	4093      	lsls	r3, r2
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	429a      	cmp	r2, r3
 8004636:	d136      	bne.n	80046a6 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8004638:	4b45      	ldr	r3, [pc, #276]	@ (8004750 <HAL_GPIO_DeInit+0x1b4>)
 800463a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	43db      	mvns	r3, r3
 8004642:	4943      	ldr	r1, [pc, #268]	@ (8004750 <HAL_GPIO_DeInit+0x1b4>)
 8004644:	4013      	ands	r3, r2
 8004646:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800464a:	4b41      	ldr	r3, [pc, #260]	@ (8004750 <HAL_GPIO_DeInit+0x1b4>)
 800464c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	43db      	mvns	r3, r3
 8004654:	493e      	ldr	r1, [pc, #248]	@ (8004750 <HAL_GPIO_DeInit+0x1b4>)
 8004656:	4013      	ands	r3, r2
 8004658:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 800465c:	4b3c      	ldr	r3, [pc, #240]	@ (8004750 <HAL_GPIO_DeInit+0x1b4>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	43db      	mvns	r3, r3
 8004664:	493a      	ldr	r1, [pc, #232]	@ (8004750 <HAL_GPIO_DeInit+0x1b4>)
 8004666:	4013      	ands	r3, r2
 8004668:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800466a:	4b39      	ldr	r3, [pc, #228]	@ (8004750 <HAL_GPIO_DeInit+0x1b4>)
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	43db      	mvns	r3, r3
 8004672:	4937      	ldr	r1, [pc, #220]	@ (8004750 <HAL_GPIO_DeInit+0x1b4>)
 8004674:	4013      	ands	r3, r2
 8004676:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	220f      	movs	r2, #15
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8004688:	4a31      	ldr	r2, [pc, #196]	@ (8004750 <HAL_GPIO_DeInit+0x1b4>)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	089b      	lsrs	r3, r3, #2
 800468e:	3318      	adds	r3, #24
 8004690:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	43da      	mvns	r2, r3
 8004698:	482d      	ldr	r0, [pc, #180]	@ (8004750 <HAL_GPIO_DeInit+0x1b4>)
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	089b      	lsrs	r3, r3, #2
 800469e:	400a      	ands	r2, r1
 80046a0:	3318      	adds	r3, #24
 80046a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	2103      	movs	r1, #3
 80046b0:	fa01 f303 	lsl.w	r3, r1, r3
 80046b4:	431a      	orrs	r2, r3
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	08da      	lsrs	r2, r3, #3
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	3208      	adds	r2, #8
 80046c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	220f      	movs	r2, #15
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	08d2      	lsrs	r2, r2, #3
 80046da:	4019      	ands	r1, r3
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	3208      	adds	r2, #8
 80046e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	2103      	movs	r1, #3
 80046ee:	fa01 f303 	lsl.w	r3, r1, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	401a      	ands	r2, r3
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	2101      	movs	r1, #1
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	fa01 f303 	lsl.w	r3, r1, r3
 8004706:	43db      	mvns	r3, r3
 8004708:	401a      	ands	r2, r3
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	2103      	movs	r1, #3
 8004718:	fa01 f303 	lsl.w	r3, r1, r3
 800471c:	43db      	mvns	r3, r3
 800471e:	401a      	ands	r2, r3
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	3301      	adds	r3, #1
 8004728:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	fa22 f303 	lsr.w	r3, r2, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	f47f af3c 	bne.w	80045b0 <HAL_GPIO_DeInit+0x14>
  }
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	3724      	adds	r7, #36	@ 0x24
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	46020000 	.word	0x46020000
 800474c:	0800e628 	.word	0x0800e628
 8004750:	46022000 	.word	0x46022000
 8004754:	002f7f7f 	.word	0x002f7f7f

08004758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	807b      	strh	r3, [r7, #2]
 8004764:	4613      	mov	r3, r2
 8004766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004768:	787b      	ldrb	r3, [r7, #1]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800476e:	887a      	ldrh	r2, [r7, #2]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004774:	e002      	b.n	800477c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004776:	887a      	ldrh	r2, [r7, #2]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8004792:	4b0f      	ldr	r3, [pc, #60]	@ (80047d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	4013      	ands	r3, r2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d006      	beq.n	80047ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800479e:	4a0c      	ldr	r2, [pc, #48]	@ (80047d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f814 	bl	80047d4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80047ac:	4b08      	ldr	r3, [pc, #32]	@ (80047d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	4013      	ands	r3, r2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d006      	beq.n	80047c6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80047b8:	4a05      	ldr	r2, [pc, #20]	@ (80047d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fc fdf9 	bl	80013b8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80047c6:	bf00      	nop
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	46022000 	.word	0x46022000

080047d4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b082      	sub	sp, #8
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e08d      	b.n	8004918 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d106      	bne.n	8004816 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f8b4 	bl	800497e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2224      	movs	r2, #36	@ 0x24
 800481a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0201 	bic.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800483a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800484a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d107      	bne.n	8004864 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004860:	609a      	str	r2, [r3, #8]
 8004862:	e006      	b.n	8004872 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004870:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d108      	bne.n	800488c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	e007      	b.n	800489c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800489a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6812      	ldr	r2, [r2, #0]
 80048a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80048aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048ae:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048be:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69d9      	ldr	r1, [r3, #28]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1a      	ldr	r2, [r3, #32]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0201 	orr.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e021      	b.n	8004976 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2224      	movs	r2, #36	@ 0x24
 8004936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0201 	bic.w	r2, r2, #1
 8004948:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f821 	bl	8004992 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	461a      	mov	r2, r3
 80049b4:	460b      	mov	r3, r1
 80049b6:	817b      	strh	r3, [r7, #10]
 80049b8:	4613      	mov	r3, r2
 80049ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	f040 80da 	bne.w	8004b7e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_I2C_Master_Transmit+0x30>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e0d3      	b.n	8004b80 <HAL_I2C_Master_Transmit+0x1d8>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049e0:	f7fe f958 	bl	8002c94 <HAL_GetTick>
 80049e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	2319      	movs	r3, #25
 80049ec:	2201      	movs	r2, #1
 80049ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fcd6 	bl	80053a4 <I2C_WaitOnFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e0be      	b.n	8004b80 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2221      	movs	r2, #33	@ 0x21
 8004a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2210      	movs	r2, #16
 8004a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	893a      	ldrh	r2, [r7, #8]
 8004a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2bff      	cmp	r3, #255	@ 0xff
 8004a32:	d90e      	bls.n	8004a52 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	22ff      	movs	r2, #255	@ 0xff
 8004a38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	8979      	ldrh	r1, [r7, #10]
 8004a42:	4b51      	ldr	r3, [pc, #324]	@ (8004b88 <HAL_I2C_Master_Transmit+0x1e0>)
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 fefa 	bl	8005844 <I2C_TransferConfig>
 8004a50:	e06c      	b.n	8004b2c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	8979      	ldrh	r1, [r7, #10]
 8004a64:	4b48      	ldr	r3, [pc, #288]	@ (8004b88 <HAL_I2C_Master_Transmit+0x1e0>)
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 fee9 	bl	8005844 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004a72:	e05b      	b.n	8004b2c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	6a39      	ldr	r1, [r7, #32]
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fcec 	bl	8005456 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e07b      	b.n	8004b80 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	781a      	ldrb	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d034      	beq.n	8004b2c <HAL_I2C_Master_Transmit+0x184>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d130      	bne.n	8004b2c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2180      	movs	r1, #128	@ 0x80
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 fc65 	bl	80053a4 <I2C_WaitOnFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e04d      	b.n	8004b80 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2bff      	cmp	r3, #255	@ 0xff
 8004aec:	d90e      	bls.n	8004b0c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	22ff      	movs	r2, #255	@ 0xff
 8004af2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	8979      	ldrh	r1, [r7, #10]
 8004afc:	2300      	movs	r3, #0
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 fe9d 	bl	8005844 <I2C_TransferConfig>
 8004b0a:	e00f      	b.n	8004b2c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	8979      	ldrh	r1, [r7, #10]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 fe8c 	bl	8005844 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d19e      	bne.n	8004a74 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	6a39      	ldr	r1, [r7, #32]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fcd2 	bl	80054e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e01a      	b.n	8004b80 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6859      	ldr	r1, [r3, #4]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b8c <HAL_I2C_Master_Transmit+0x1e4>)
 8004b5e:	400b      	ands	r3, r1
 8004b60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e000      	b.n	8004b80 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004b7e:	2302      	movs	r3, #2
  }
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	80002000 	.word	0x80002000
 8004b8c:	fe00e800 	.word	0xfe00e800

08004b90 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	817b      	strh	r3, [r7, #10]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	f040 80db 	bne.w	8004d68 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_I2C_Master_Receive+0x30>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e0d4      	b.n	8004d6a <HAL_I2C_Master_Receive+0x1da>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bc8:	f7fe f864 	bl	8002c94 <HAL_GetTick>
 8004bcc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	2319      	movs	r3, #25
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fbe2 	bl	80053a4 <I2C_WaitOnFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e0bf      	b.n	8004d6a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2222      	movs	r2, #34	@ 0x22
 8004bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2210      	movs	r2, #16
 8004bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	893a      	ldrh	r2, [r7, #8]
 8004c0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2bff      	cmp	r3, #255	@ 0xff
 8004c1a:	d90e      	bls.n	8004c3a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	22ff      	movs	r2, #255	@ 0xff
 8004c20:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	8979      	ldrh	r1, [r7, #10]
 8004c2a:	4b52      	ldr	r3, [pc, #328]	@ (8004d74 <HAL_I2C_Master_Receive+0x1e4>)
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 fe06 	bl	8005844 <I2C_TransferConfig>
 8004c38:	e06d      	b.n	8004d16 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	8979      	ldrh	r1, [r7, #10]
 8004c4c:	4b49      	ldr	r3, [pc, #292]	@ (8004d74 <HAL_I2C_Master_Receive+0x1e4>)
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 fdf5 	bl	8005844 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004c5a:	e05c      	b.n	8004d16 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	6a39      	ldr	r1, [r7, #32]
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 fc83 	bl	800556c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e07c      	b.n	8004d6a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d034      	beq.n	8004d16 <HAL_I2C_Master_Receive+0x186>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d130      	bne.n	8004d16 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2180      	movs	r1, #128	@ 0x80
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 fb70 	bl	80053a4 <I2C_WaitOnFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e04d      	b.n	8004d6a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2bff      	cmp	r3, #255	@ 0xff
 8004cd6:	d90e      	bls.n	8004cf6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	22ff      	movs	r2, #255	@ 0xff
 8004cdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	8979      	ldrh	r1, [r7, #10]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 fda8 	bl	8005844 <I2C_TransferConfig>
 8004cf4:	e00f      	b.n	8004d16 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	8979      	ldrh	r1, [r7, #10]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 fd97 	bl	8005844 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d19d      	bne.n	8004c5c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	6a39      	ldr	r1, [r7, #32]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fbdd 	bl	80054e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e01a      	b.n	8004d6a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6859      	ldr	r1, [r3, #4]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4b0c      	ldr	r3, [pc, #48]	@ (8004d78 <HAL_I2C_Master_Receive+0x1e8>)
 8004d48:	400b      	ands	r3, r1
 8004d4a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	e000      	b.n	8004d6a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
  }
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	80002400 	.word	0x80002400
 8004d78:	fe00e800 	.word	0xfe00e800

08004d7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	4608      	mov	r0, r1
 8004d86:	4611      	mov	r1, r2
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	817b      	strh	r3, [r7, #10]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	813b      	strh	r3, [r7, #8]
 8004d92:	4613      	mov	r3, r2
 8004d94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	f040 80f9 	bne.w	8004f96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_I2C_Mem_Write+0x34>
 8004daa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d105      	bne.n	8004dbc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004db6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e0ed      	b.n	8004f98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_I2C_Mem_Write+0x4e>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e0e6      	b.n	8004f98 <HAL_I2C_Mem_Write+0x21c>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004dd2:	f7fd ff5f 	bl	8002c94 <HAL_GetTick>
 8004dd6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	2319      	movs	r3, #25
 8004dde:	2201      	movs	r2, #1
 8004de0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fadd 	bl	80053a4 <I2C_WaitOnFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0d1      	b.n	8004f98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2221      	movs	r2, #33	@ 0x21
 8004df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2240      	movs	r2, #64	@ 0x40
 8004e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a3a      	ldr	r2, [r7, #32]
 8004e0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e1c:	88f8      	ldrh	r0, [r7, #6]
 8004e1e:	893a      	ldrh	r2, [r7, #8]
 8004e20:	8979      	ldrh	r1, [r7, #10]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	9301      	str	r3, [sp, #4]
 8004e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f9ed 	bl	800520c <I2C_RequestMemoryWrite>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0a9      	b.n	8004f98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2bff      	cmp	r3, #255	@ 0xff
 8004e4c:	d90e      	bls.n	8004e6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	22ff      	movs	r2, #255	@ 0xff
 8004e52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	8979      	ldrh	r1, [r7, #10]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 fced 	bl	8005844 <I2C_TransferConfig>
 8004e6a:	e00f      	b.n	8004e8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	8979      	ldrh	r1, [r7, #10]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 fcdc 	bl	8005844 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 fae0 	bl	8005456 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e07b      	b.n	8004f98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea4:	781a      	ldrb	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d034      	beq.n	8004f44 <HAL_I2C_Mem_Write+0x1c8>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d130      	bne.n	8004f44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2180      	movs	r1, #128	@ 0x80
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 fa59 	bl	80053a4 <I2C_WaitOnFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e04d      	b.n	8004f98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2bff      	cmp	r3, #255	@ 0xff
 8004f04:	d90e      	bls.n	8004f24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	22ff      	movs	r2, #255	@ 0xff
 8004f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	8979      	ldrh	r1, [r7, #10]
 8004f14:	2300      	movs	r3, #0
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 fc91 	bl	8005844 <I2C_TransferConfig>
 8004f22:	e00f      	b.n	8004f44 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	8979      	ldrh	r1, [r7, #10]
 8004f36:	2300      	movs	r3, #0
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 fc80 	bl	8005844 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d19e      	bne.n	8004e8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 fac6 	bl	80054e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e01a      	b.n	8004f98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2220      	movs	r2, #32
 8004f68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6859      	ldr	r1, [r3, #4]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa0 <HAL_I2C_Mem_Write+0x224>)
 8004f76:	400b      	ands	r3, r1
 8004f78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	e000      	b.n	8004f98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004f96:	2302      	movs	r3, #2
  }
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	fe00e800 	.word	0xfe00e800

08004fa4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	4608      	mov	r0, r1
 8004fae:	4611      	mov	r1, r2
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	817b      	strh	r3, [r7, #10]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	813b      	strh	r3, [r7, #8]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	f040 80fd 	bne.w	80051c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_I2C_Mem_Read+0x34>
 8004fd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fde:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e0f1      	b.n	80051c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d101      	bne.n	8004ff2 <HAL_I2C_Mem_Read+0x4e>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e0ea      	b.n	80051c8 <HAL_I2C_Mem_Read+0x224>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ffa:	f7fd fe4b 	bl	8002c94 <HAL_GetTick>
 8004ffe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	2319      	movs	r3, #25
 8005006:	2201      	movs	r2, #1
 8005008:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 f9c9 	bl	80053a4 <I2C_WaitOnFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0d5      	b.n	80051c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2222      	movs	r2, #34	@ 0x22
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2240      	movs	r2, #64	@ 0x40
 8005028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a3a      	ldr	r2, [r7, #32]
 8005036:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800503c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005044:	88f8      	ldrh	r0, [r7, #6]
 8005046:	893a      	ldrh	r2, [r7, #8]
 8005048:	8979      	ldrh	r1, [r7, #10]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	4603      	mov	r3, r0
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f92d 	bl	80052b4 <I2C_RequestMemoryRead>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0ad      	b.n	80051c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	2bff      	cmp	r3, #255	@ 0xff
 8005074:	d90e      	bls.n	8005094 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	22ff      	movs	r2, #255	@ 0xff
 800507a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005080:	b2da      	uxtb	r2, r3
 8005082:	8979      	ldrh	r1, [r7, #10]
 8005084:	4b52      	ldr	r3, [pc, #328]	@ (80051d0 <HAL_I2C_Mem_Read+0x22c>)
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fbd9 	bl	8005844 <I2C_TransferConfig>
 8005092:	e00f      	b.n	80050b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	8979      	ldrh	r1, [r7, #10]
 80050a6:	4b4a      	ldr	r3, [pc, #296]	@ (80051d0 <HAL_I2C_Mem_Read+0x22c>)
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 fbc8 	bl	8005844 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ba:	2200      	movs	r2, #0
 80050bc:	2104      	movs	r1, #4
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 f970 	bl	80053a4 <I2C_WaitOnFlagUntilTimeout>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e07c      	b.n	80051c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d034      	beq.n	8005174 <HAL_I2C_Mem_Read+0x1d0>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800510e:	2b00      	cmp	r3, #0
 8005110:	d130      	bne.n	8005174 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005118:	2200      	movs	r2, #0
 800511a:	2180      	movs	r1, #128	@ 0x80
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f941 	bl	80053a4 <I2C_WaitOnFlagUntilTimeout>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e04d      	b.n	80051c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005130:	b29b      	uxth	r3, r3
 8005132:	2bff      	cmp	r3, #255	@ 0xff
 8005134:	d90e      	bls.n	8005154 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	22ff      	movs	r2, #255	@ 0xff
 800513a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005140:	b2da      	uxtb	r2, r3
 8005142:	8979      	ldrh	r1, [r7, #10]
 8005144:	2300      	movs	r3, #0
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 fb79 	bl	8005844 <I2C_TransferConfig>
 8005152:	e00f      	b.n	8005174 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005162:	b2da      	uxtb	r2, r3
 8005164:	8979      	ldrh	r1, [r7, #10]
 8005166:	2300      	movs	r3, #0
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 fb68 	bl	8005844 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005178:	b29b      	uxth	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d19a      	bne.n	80050b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f9ae 	bl	80054e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e01a      	b.n	80051c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2220      	movs	r2, #32
 8005198:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6859      	ldr	r1, [r3, #4]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	4b0b      	ldr	r3, [pc, #44]	@ (80051d4 <HAL_I2C_Mem_Read+0x230>)
 80051a6:	400b      	ands	r3, r1
 80051a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	e000      	b.n	80051c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80051c6:	2302      	movs	r3, #2
  }
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	80002400 	.word	0x80002400
 80051d4:	fe00e800 	.word	0xfe00e800

080051d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051e6:	b2db      	uxtb	r3, r3
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	4608      	mov	r0, r1
 8005216:	4611      	mov	r1, r2
 8005218:	461a      	mov	r2, r3
 800521a:	4603      	mov	r3, r0
 800521c:	817b      	strh	r3, [r7, #10]
 800521e:	460b      	mov	r3, r1
 8005220:	813b      	strh	r3, [r7, #8]
 8005222:	4613      	mov	r3, r2
 8005224:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005226:	88fb      	ldrh	r3, [r7, #6]
 8005228:	b2da      	uxtb	r2, r3
 800522a:	8979      	ldrh	r1, [r7, #10]
 800522c:	4b20      	ldr	r3, [pc, #128]	@ (80052b0 <I2C_RequestMemoryWrite+0xa4>)
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 fb05 	bl	8005844 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	69b9      	ldr	r1, [r7, #24]
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f909 	bl	8005456 <I2C_WaitOnTXISFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e02c      	b.n	80052a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d105      	bne.n	8005260 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005254:	893b      	ldrh	r3, [r7, #8]
 8005256:	b2da      	uxtb	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	629a      	str	r2, [r3, #40]	@ 0x28
 800525e:	e015      	b.n	800528c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005260:	893b      	ldrh	r3, [r7, #8]
 8005262:	0a1b      	lsrs	r3, r3, #8
 8005264:	b29b      	uxth	r3, r3
 8005266:	b2da      	uxtb	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	69b9      	ldr	r1, [r7, #24]
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f8ef 	bl	8005456 <I2C_WaitOnTXISFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e012      	b.n	80052a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005282:	893b      	ldrh	r3, [r7, #8]
 8005284:	b2da      	uxtb	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	2200      	movs	r2, #0
 8005294:	2180      	movs	r1, #128	@ 0x80
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 f884 	bl	80053a4 <I2C_WaitOnFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	80002000 	.word	0x80002000

080052b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	4608      	mov	r0, r1
 80052be:	4611      	mov	r1, r2
 80052c0:	461a      	mov	r2, r3
 80052c2:	4603      	mov	r3, r0
 80052c4:	817b      	strh	r3, [r7, #10]
 80052c6:	460b      	mov	r3, r1
 80052c8:	813b      	strh	r3, [r7, #8]
 80052ca:	4613      	mov	r3, r2
 80052cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	8979      	ldrh	r1, [r7, #10]
 80052d4:	4b20      	ldr	r3, [pc, #128]	@ (8005358 <I2C_RequestMemoryRead+0xa4>)
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	2300      	movs	r3, #0
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 fab2 	bl	8005844 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	69b9      	ldr	r1, [r7, #24]
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f8b6 	bl	8005456 <I2C_WaitOnTXISFlagUntilTimeout>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e02c      	b.n	800534e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052f4:	88fb      	ldrh	r3, [r7, #6]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d105      	bne.n	8005306 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052fa:	893b      	ldrh	r3, [r7, #8]
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	629a      	str	r2, [r3, #40]	@ 0x28
 8005304:	e015      	b.n	8005332 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005306:	893b      	ldrh	r3, [r7, #8]
 8005308:	0a1b      	lsrs	r3, r3, #8
 800530a:	b29b      	uxth	r3, r3
 800530c:	b2da      	uxtb	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	69b9      	ldr	r1, [r7, #24]
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 f89c 	bl	8005456 <I2C_WaitOnTXISFlagUntilTimeout>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e012      	b.n	800534e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005328:	893b      	ldrh	r3, [r7, #8]
 800532a:	b2da      	uxtb	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	2200      	movs	r2, #0
 800533a:	2140      	movs	r1, #64	@ 0x40
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f831 	bl	80053a4 <I2C_WaitOnFlagUntilTimeout>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e000      	b.n	800534e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	80002000 	.word	0x80002000

0800535c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b02      	cmp	r3, #2
 8005370:	d103      	bne.n	800537a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2200      	movs	r2, #0
 8005378:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b01      	cmp	r3, #1
 8005386:	d007      	beq.n	8005398 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699a      	ldr	r2, [r3, #24]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	619a      	str	r2, [r3, #24]
  }
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	4613      	mov	r3, r2
 80053b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053b4:	e03b      	b.n	800542e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 f962 	bl	8005684 <I2C_IsErrorOccurred>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e041      	b.n	800544e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053d0:	d02d      	beq.n	800542e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d2:	f7fd fc5f 	bl	8002c94 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d302      	bcc.n	80053e8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d122      	bne.n	800542e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4013      	ands	r3, r2
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	429a      	cmp	r2, r3
 8005404:	d113      	bne.n	800542e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800540a:	f043 0220 	orr.w	r2, r3, #32
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e00f      	b.n	800544e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699a      	ldr	r2, [r3, #24]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4013      	ands	r3, r2
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	429a      	cmp	r2, r3
 800543c:	bf0c      	ite	eq
 800543e:	2301      	moveq	r3, #1
 8005440:	2300      	movne	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	429a      	cmp	r2, r3
 800544a:	d0b4      	beq.n	80053b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005462:	e033      	b.n	80054cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	68b9      	ldr	r1, [r7, #8]
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f90b 	bl	8005684 <I2C_IsErrorOccurred>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e031      	b.n	80054dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800547e:	d025      	beq.n	80054cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005480:	f7fd fc08 	bl	8002c94 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	429a      	cmp	r2, r3
 800548e:	d302      	bcc.n	8005496 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d11a      	bne.n	80054cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d013      	beq.n	80054cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a8:	f043 0220 	orr.w	r2, r3, #32
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e007      	b.n	80054dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d1c4      	bne.n	8005464 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054f0:	e02f      	b.n	8005552 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f8c4 	bl	8005684 <I2C_IsErrorOccurred>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e02d      	b.n	8005562 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005506:	f7fd fbc5 	bl	8002c94 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	429a      	cmp	r2, r3
 8005514:	d302      	bcc.n	800551c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d11a      	bne.n	8005552 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b20      	cmp	r3, #32
 8005528:	d013      	beq.n	8005552 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800552e:	f043 0220 	orr.w	r2, r3, #32
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e007      	b.n	8005562 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b20      	cmp	r3, #32
 800555e:	d1c8      	bne.n	80054f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
	...

0800556c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800557c:	e071      	b.n	8005662 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f87e 	bl	8005684 <I2C_IsErrorOccurred>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	f003 0320 	and.w	r3, r3, #32
 800559c:	2b20      	cmp	r3, #32
 800559e:	d13b      	bne.n	8005618 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80055a0:	7dfb      	ldrb	r3, [r7, #23]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d138      	bne.n	8005618 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d105      	bne.n	80055c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80055bc:	2300      	movs	r3, #0
 80055be:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b10      	cmp	r3, #16
 80055cc:	d121      	bne.n	8005612 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2210      	movs	r2, #16
 80055d4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2204      	movs	r2, #4
 80055da:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2220      	movs	r2, #32
 80055e2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6859      	ldr	r1, [r3, #4]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b24      	ldr	r3, [pc, #144]	@ (8005680 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80055f0:	400b      	ands	r3, r1
 80055f2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	75fb      	strb	r3, [r7, #23]
 8005610:	e002      	b.n	8005618 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005618:	f7fd fb3c 	bl	8002c94 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	429a      	cmp	r2, r3
 8005626:	d302      	bcc.n	800562e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d119      	bne.n	8005662 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800562e:	7dfb      	ldrb	r3, [r7, #23]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d116      	bne.n	8005662 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f003 0304 	and.w	r3, r3, #4
 800563e:	2b04      	cmp	r3, #4
 8005640:	d00f      	beq.n	8005662 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005646:	f043 0220 	orr.w	r2, r3, #32
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b04      	cmp	r3, #4
 800566e:	d002      	beq.n	8005676 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005670:	7dfb      	ldrb	r3, [r7, #23]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d083      	beq.n	800557e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005676:	7dfb      	ldrb	r3, [r7, #23]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	fe00e800 	.word	0xfe00e800

08005684 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b08a      	sub	sp, #40	@ 0x28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d068      	beq.n	8005782 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2210      	movs	r2, #16
 80056b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056b8:	e049      	b.n	800574e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056c0:	d045      	beq.n	800574e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056c2:	f7fd fae7 	bl	8002c94 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d302      	bcc.n	80056d8 <I2C_IsErrorOccurred+0x54>
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d13a      	bne.n	800574e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056fa:	d121      	bne.n	8005740 <I2C_IsErrorOccurred+0xbc>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005702:	d01d      	beq.n	8005740 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005704:	7cfb      	ldrb	r3, [r7, #19]
 8005706:	2b20      	cmp	r3, #32
 8005708:	d01a      	beq.n	8005740 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005718:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800571a:	f7fd fabb 	bl	8002c94 <HAL_GetTick>
 800571e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005720:	e00e      	b.n	8005740 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005722:	f7fd fab7 	bl	8002c94 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b19      	cmp	r3, #25
 800572e:	d907      	bls.n	8005740 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	f043 0320 	orr.w	r3, r3, #32
 8005736:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800573e:	e006      	b.n	800574e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b20      	cmp	r3, #32
 800574c:	d1e9      	bne.n	8005722 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	f003 0320 	and.w	r3, r3, #32
 8005758:	2b20      	cmp	r3, #32
 800575a:	d003      	beq.n	8005764 <I2C_IsErrorOccurred+0xe0>
 800575c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0aa      	beq.n	80056ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005768:	2b00      	cmp	r3, #0
 800576a:	d103      	bne.n	8005774 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2220      	movs	r2, #32
 8005772:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	f043 0304 	orr.w	r3, r3, #4
 800577a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00b      	beq.n	80057ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	f043 0301 	orr.w	r3, r3, #1
 800579a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00b      	beq.n	80057ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	f043 0308 	orr.w	r3, r3, #8
 80057bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80057c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00b      	beq.n	80057f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	f043 0302 	orr.w	r3, r3, #2
 80057de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80057f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01c      	beq.n	8005832 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f7ff fdaf 	bl	800535c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6859      	ldr	r1, [r3, #4]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <I2C_IsErrorOccurred+0x1bc>)
 800580a:	400b      	ands	r3, r1
 800580c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	431a      	orrs	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005832:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005836:	4618      	mov	r0, r3
 8005838:	3728      	adds	r7, #40	@ 0x28
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	fe00e800 	.word	0xfe00e800

08005844 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	607b      	str	r3, [r7, #4]
 800584e:	460b      	mov	r3, r1
 8005850:	817b      	strh	r3, [r7, #10]
 8005852:	4613      	mov	r3, r2
 8005854:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005856:	897b      	ldrh	r3, [r7, #10]
 8005858:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800585c:	7a7b      	ldrb	r3, [r7, #9]
 800585e:	041b      	lsls	r3, r3, #16
 8005860:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005864:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	4313      	orrs	r3, r2
 800586e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005872:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	0d5b      	lsrs	r3, r3, #21
 800587e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005882:	4b08      	ldr	r3, [pc, #32]	@ (80058a4 <I2C_TransferConfig+0x60>)
 8005884:	430b      	orrs	r3, r1
 8005886:	43db      	mvns	r3, r3
 8005888:	ea02 0103 	and.w	r1, r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	430a      	orrs	r2, r1
 8005894:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005896:	bf00      	nop
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	03ff63ff 	.word	0x03ff63ff

080058a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d138      	bne.n	8005930 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d101      	bne.n	80058cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80058c8:	2302      	movs	r3, #2
 80058ca:	e032      	b.n	8005932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2224      	movs	r2, #36	@ 0x24
 80058d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0201 	bic.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80058fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6819      	ldr	r1, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0201 	orr.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	e000      	b.n	8005932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005930:	2302      	movs	r3, #2
  }
}
 8005932:	4618      	mov	r0, r3
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800593e:	b480      	push	{r7}
 8005940:	b085      	sub	sp, #20
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b20      	cmp	r3, #32
 8005952:	d139      	bne.n	80059c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800595e:	2302      	movs	r3, #2
 8005960:	e033      	b.n	80059ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2224      	movs	r2, #36	@ 0x24
 800596e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0201 	bic.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005990:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0201 	orr.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	e000      	b.n	80059ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80059c8:	2302      	movs	r3, #2
  }
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e0:	2300      	movs	r3, #0
 80059e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80059e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	73fb      	strb	r3, [r7, #15]
 80059f4:	e007      	b.n	8005a06 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80059f6:	4b07      	ldr	r3, [pc, #28]	@ (8005a14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f023 0204 	bic.w	r2, r3, #4
 80059fe:	4905      	ldr	r1, [pc, #20]	@ (8005a14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	40030400 	.word	0x40030400

08005a18 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005a1c:	4b05      	ldr	r3, [pc, #20]	@ (8005a34 <HAL_ICACHE_Enable+0x1c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a04      	ldr	r2, [pc, #16]	@ (8005a34 <HAL_ICACHE_Enable+0x1c>)
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	40030400 	.word	0x40030400

08005a38 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d102      	bne.n	8005a50 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	73fb      	strb	r3, [r7, #15]
 8005a4e:	e141      	b.n	8005cd4 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fa8f 	bl	8005f78 <MDF_GetHandleNumberFromInstance>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	4a86      	ldr	r2, [pc, #536]	@ (8005c78 <HAL_MDF_Init+0x240>)
 8005a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	73fb      	strb	r3, [r7, #15]
 8005a6a:	e133      	b.n	8005cd4 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7fc f9c9 	bl	8001e04 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8005a72:	4b82      	ldr	r3, [pc, #520]	@ (8005c7c <HAL_MDF_Init+0x244>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d11d      	bne.n	8005ab6 <HAL_MDF_Init+0x7e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a80      	ldr	r2, [pc, #512]	@ (8005c80 <HAL_MDF_Init+0x248>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d023      	beq.n	8005acc <HAL_MDF_Init+0x94>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a7e      	ldr	r2, [pc, #504]	@ (8005c84 <HAL_MDF_Init+0x24c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d01e      	beq.n	8005acc <HAL_MDF_Init+0x94>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a7d      	ldr	r2, [pc, #500]	@ (8005c88 <HAL_MDF_Init+0x250>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d019      	beq.n	8005acc <HAL_MDF_Init+0x94>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a7b      	ldr	r2, [pc, #492]	@ (8005c8c <HAL_MDF_Init+0x254>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d014      	beq.n	8005acc <HAL_MDF_Init+0x94>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a7a      	ldr	r2, [pc, #488]	@ (8005c90 <HAL_MDF_Init+0x258>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00f      	beq.n	8005acc <HAL_MDF_Init+0x94>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a78      	ldr	r2, [pc, #480]	@ (8005c94 <HAL_MDF_Init+0x25c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00a      	beq.n	8005acc <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8005ab6:	4b78      	ldr	r3, [pc, #480]	@ (8005c98 <HAL_MDF_Init+0x260>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f040 8090 	bne.w	8005be0 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a75      	ldr	r2, [pc, #468]	@ (8005c9c <HAL_MDF_Init+0x264>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	f040 808a 	bne.w	8005be0 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a72      	ldr	r2, [pc, #456]	@ (8005c9c <HAL_MDF_Init+0x264>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d101      	bne.n	8005ada <HAL_MDF_Init+0xa2>
 8005ad6:	4b72      	ldr	r3, [pc, #456]	@ (8005ca0 <HAL_MDF_Init+0x268>)
 8005ad8:	e000      	b.n	8005adc <HAL_MDF_Init+0xa4>
 8005ada:	4b72      	ldr	r3, [pc, #456]	@ (8005ca4 <HAL_MDF_Init+0x26c>)
 8005adc:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	da02      	bge.n	8005aec <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	73fb      	strb	r3, [r7, #15]
 8005aea:	e079      	b.n	8005be0 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a63      	ldr	r2, [pc, #396]	@ (8005c80 <HAL_MDF_Init+0x248>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d018      	beq.n	8005b28 <HAL_MDF_Init+0xf0>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a62      	ldr	r2, [pc, #392]	@ (8005c84 <HAL_MDF_Init+0x24c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d013      	beq.n	8005b28 <HAL_MDF_Init+0xf0>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a60      	ldr	r2, [pc, #384]	@ (8005c88 <HAL_MDF_Init+0x250>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00e      	beq.n	8005b28 <HAL_MDF_Init+0xf0>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a5f      	ldr	r2, [pc, #380]	@ (8005c8c <HAL_MDF_Init+0x254>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d009      	beq.n	8005b28 <HAL_MDF_Init+0xf0>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a5d      	ldr	r2, [pc, #372]	@ (8005c90 <HAL_MDF_Init+0x258>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d004      	beq.n	8005b28 <HAL_MDF_Init+0xf0>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a5c      	ldr	r2, [pc, #368]	@ (8005c94 <HAL_MDF_Init+0x25c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d10d      	bne.n	8005b44 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	011b      	lsls	r3, r3, #4
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2200      	movs	r2, #0
 8005b48:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	061b      	lsls	r3, r3, #24
 8005b56:	431a      	orrs	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	7b1b      	ldrb	r3, [r3, #12]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d137      	bne.n	8005bd4 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8005b74:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8005b7c:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	7e1b      	ldrb	r3, [r3, #24]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d123      	bne.n	8005bd4 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a3b      	ldr	r2, [pc, #236]	@ (8005c80 <HAL_MDF_Init+0x248>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d012      	beq.n	8005bbc <HAL_MDF_Init+0x184>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a3a      	ldr	r2, [pc, #232]	@ (8005c84 <HAL_MDF_Init+0x24c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00d      	beq.n	8005bbc <HAL_MDF_Init+0x184>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a38      	ldr	r2, [pc, #224]	@ (8005c88 <HAL_MDF_Init+0x250>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d008      	beq.n	8005bbc <HAL_MDF_Init+0x184>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a37      	ldr	r2, [pc, #220]	@ (8005c8c <HAL_MDF_Init+0x254>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d003      	beq.n	8005bbc <HAL_MDF_Init+0x184>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a35      	ldr	r2, [pc, #212]	@ (8005c90 <HAL_MDF_Init+0x258>)
 8005bba:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f043 0210 	orr.w	r2, r3, #16
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f043 0201 	orr.w	r2, r3, #1
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d128      	bne.n	8005c38 <HAL_MDF_Init+0x200>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d123      	bne.n	8005c38 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	da02      	bge.n	8005c00 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	73fb      	strb	r3, [r7, #15]
 8005bfe:	e01b      	b.n	8005c38 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6819      	ldr	r1, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c12:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8005c18:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1e:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	430a      	orrs	r2, r1
 8005c26:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d14a      	bne.n	8005cd4 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 021f 	bic.w	r2, r2, #31
 8005c4c:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6859      	ldr	r1, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a0d      	ldr	r2, [pc, #52]	@ (8005c9c <HAL_MDF_Init+0x264>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d11e      	bne.n	8005ca8 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8005c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c98 <HAL_MDF_Init+0x260>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	4a09      	ldr	r2, [pc, #36]	@ (8005c98 <HAL_MDF_Init+0x260>)
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	e01d      	b.n	8005cb2 <HAL_MDF_Init+0x27a>
 8005c76:	bf00      	nop
 8005c78:	200025b8 	.word	0x200025b8
 8005c7c:	200025b0 	.word	0x200025b0
 8005c80:	40025080 	.word	0x40025080
 8005c84:	40025100 	.word	0x40025100
 8005c88:	40025180 	.word	0x40025180
 8005c8c:	40025200 	.word	0x40025200
 8005c90:	40025280 	.word	0x40025280
 8005c94:	40025300 	.word	0x40025300
 8005c98:	200025b4 	.word	0x200025b4
 8005c9c:	46024080 	.word	0x46024080
 8005ca0:	46024000 	.word	0x46024000
 8005ca4:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8005ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce0 <HAL_MDF_Init+0x2a8>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3301      	adds	r3, #1
 8005cae:	4a0c      	ldr	r2, [pc, #48]	@ (8005ce0 <HAL_MDF_Init+0x2a8>)
 8005cb0:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 f95e 	bl	8005f78 <MDF_GetHandleNumberFromInstance>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	4909      	ldr	r1, [pc, #36]	@ (8005ce4 <HAL_MDF_Init+0x2ac>)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	641a      	str	r2, [r3, #64]	@ 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	200025b0 	.word	0x200025b0
 8005ce4:	200025b8 	.word	0x200025b8

08005ce8 <HAL_MDF_SndLvlCallback>:
  * @param  AmbientNoise Ambient noise value computed by sound activity detector.
  *         This parameter can be a value between Min_Data = 0 and Max_Data = 32767.
  * @retval None.
  */
__weak void HAL_MDF_SndLvlCallback(MDF_HandleTypeDef *hmdf, uint32_t SoundLevel, uint32_t AmbientNoise)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  UNUSED(SoundLevel);
  UNUSED(AmbientNoise);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_MDF_SndLvlCallback could be implemented in the user file */
}
 8005cf4:	bf00      	nop
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_MDF_SadCallback>:
  * @brief  MDF sound activity detector callback.
  * @param  hmdf MDF handle.
  * @retval None.
  */
__weak void HAL_MDF_SadCallback(MDF_HandleTypeDef *hmdf)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hmdf);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_MDF_SadCallback could be implemented in the user file */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_MDF_OldCallback>:
  * @param  ThresholdInfo Threshold information of out-off limit detection.
  *         This parameter can be a value of @ref MDF_OldThresholdInfo.
  * @retval None.
  */
__weak void HAL_MDF_OldCallback(MDF_HandleTypeDef *hmdf, uint32_t ThresholdInfo)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  UNUSED(hmdf);
  UNUSED(ThresholdInfo);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_MDF_OldCallback could be implemented in the user file */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <HAL_MDF_IRQHandler>:
  * @brief  This function handles the MDF interrupts.
  * @param  hmdf MDF handle.
  * @retval None.
  */
void HAL_MDF_IRQHandler(MDF_HandleTypeDef *hmdf)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b088      	sub	sp, #32
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  uint32_t tmp_reg1;
  uint32_t tmp_reg2;
  uint32_t interrupts;

  /* Read current flags and interrupts and determine which ones occur */
  tmp_reg1 = hmdf->Instance->DFLTIER;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d38:	61bb      	str	r3, [r7, #24]
  tmp_reg2 = hmdf->Instance->DFLTISR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d40:	617b      	str	r3, [r7, #20]
  interrupts = (tmp_reg1 & tmp_reg2);
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	4013      	ands	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]

  /* Check if data overflow occurs */
  if ((interrupts & MDF_DFLTISR_DOVRF) == MDF_DFLTISR_DOVRF)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d011      	beq.n	8005d78 <HAL_MDF_IRQHandler+0x4e>
  {
    /* Clear data overflow flag */
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_DOVRF;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0202 	orr.w	r2, r2, #2
 8005d62:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Update error code */
    hmdf->ErrorCode |= MDF_ERROR_ACQUISITION_OVERFLOW;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d68:	f043 0201 	orr.w	r2, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call error callback */
#if (USE_HAL_MDF_REGISTER_CALLBACKS == 1)
    hmdf->ErrorCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
    HAL_MDF_ErrorCallback(hmdf);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f8f7 	bl	8005f64 <HAL_MDF_ErrorCallback>
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      HAL_MDF_SndLvlCallback(hmdf, sound_level, ambient_noise);
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */
    }
  }
}
 8005d76:	e0f1      	b.n	8005f5c <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_SSOVRF) == MDF_DFLTISR_SSOVRF)
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d011      	beq.n	8005da6 <HAL_MDF_IRQHandler+0x7c>
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_SSOVRF;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d90:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdf->ErrorCode |= MDF_ERROR_ACQUISITION_OVERFLOW;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d96:	f043 0201 	orr.w	r2, r3, #1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_MDF_ErrorCallback(hmdf);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f8e0 	bl	8005f64 <HAL_MDF_ErrorCallback>
}
 8005da4:	e0da      	b.n	8005f5c <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_FTHF) == MDF_DFLTISR_FTHF)
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00f      	beq.n	8005dd0 <HAL_MDF_IRQHandler+0xa6>
    HAL_MDF_AcqCpltCallback(hmdf);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7fb f91b 	bl	8000fec <HAL_MDF_AcqCpltCallback>
    if ((hmdf->Instance->DFLTCR & MDF_DFLTCR_ACQMOD) == MDF_MODE_ASYNC_SINGLE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dc0:	2b10      	cmp	r3, #16
 8005dc2:	f040 80cb 	bne.w	8005f5c <HAL_MDF_IRQHandler+0x232>
      hmdf->State = HAL_MDF_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005dce:	e0c5      	b.n	8005f5c <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_SSDRF) == MDF_DFLTISR_SSDRF)
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f003 0304 	and.w	r3, r3, #4
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00b      	beq.n	8005df2 <HAL_MDF_IRQHandler+0xc8>
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_SSDRF;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0204 	orr.w	r2, r2, #4
 8005de8:	631a      	str	r2, [r3, #48]	@ 0x30
    HAL_MDF_AcqCpltCallback(hmdf);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fb f8fe 	bl	8000fec <HAL_MDF_AcqCpltCallback>
}
 8005df0:	e0b4      	b.n	8005f5c <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_RFOVRF) == MDF_DFLTISR_RFOVRF)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d011      	beq.n	8005e20 <HAL_MDF_IRQHandler+0xf6>
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_RFOVRF;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e0a:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdf->ErrorCode |= MDF_ERROR_RSF_OVERRUN;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e10:	f043 0202 	orr.w	r2, r3, #2
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_MDF_ErrorCallback(hmdf);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f8a3 	bl	8005f64 <HAL_MDF_ErrorCallback>
}
 8005e1e:	e09d      	b.n	8005f5c <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_CKABF) == MDF_DFLTISR_CKABF)
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d011      	beq.n	8005e4e <HAL_MDF_IRQHandler+0x124>
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_CKABF;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e38:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdf->ErrorCode |= MDF_ERROR_CLOCK_ABSENCE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3e:	f043 0204 	orr.w	r2, r3, #4
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_MDF_ErrorCallback(hmdf);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f88c 	bl	8005f64 <HAL_MDF_ErrorCallback>
}
 8005e4c:	e086      	b.n	8005f5c <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_SATF) == MDF_DFLTISR_SATF)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d011      	beq.n	8005e7c <HAL_MDF_IRQHandler+0x152>
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_SATF;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e66:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdf->ErrorCode |= MDF_ERROR_SATURATION;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6c:	f043 0210 	orr.w	r2, r3, #16
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_MDF_ErrorCallback(hmdf);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f875 	bl	8005f64 <HAL_MDF_ErrorCallback>
}
 8005e7a:	e06f      	b.n	8005f5c <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_SCDF) == MDF_DFLTISR_SCDF)
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d011      	beq.n	8005eaa <HAL_MDF_IRQHandler+0x180>
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_SCDF;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e94:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdf->ErrorCode |= MDF_ERROR_SHORT_CIRCUIT;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9a:	f043 0208 	orr.w	r2, r3, #8
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_MDF_ErrorCallback(hmdf);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f85e 	bl	8005f64 <HAL_MDF_ErrorCallback>
}
 8005ea8:	e058      	b.n	8005f5c <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_OLDF) == MDF_DFLTISR_OLDF)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d028      	beq.n	8005f06 <HAL_MDF_IRQHandler+0x1dc>
    if ((hmdf->Instance->DFLTISR & (MDF_DFLTISR_THLF | MDF_DFLTISR_THHF)) == 0U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d102      	bne.n	8005ec8 <HAL_MDF_IRQHandler+0x19e>
      threshold_info = MDF_OLD_IN_THRESHOLDS;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61fb      	str	r3, [r7, #28]
 8005ec6:	e00b      	b.n	8005ee0 <HAL_MDF_IRQHandler+0x1b6>
    else if ((hmdf->Instance->DFLTISR & MDF_DFLTISR_THLF) == MDF_DFLTISR_THLF)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	d102      	bne.n	8005edc <HAL_MDF_IRQHandler+0x1b2>
      threshold_info = MDF_OLD_LOW_THRESHOLD;
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	61fb      	str	r3, [r7, #28]
 8005eda:	e001      	b.n	8005ee0 <HAL_MDF_IRQHandler+0x1b6>
      threshold_info = MDF_OLD_HIGH_THRESHOLD;
 8005edc:	2301      	movs	r3, #1
 8005ede:	61fb      	str	r3, [r7, #28]
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_OLDF;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0210 	orr.w	r2, r2, #16
 8005eee:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdf->ErrorCode |= MDF_ERROR_OUT_OFF_LIMIT;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef4:	f043 0220 	orr.w	r2, r3, #32
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_MDF_OldCallback(hmdf, threshold_info);
 8005efc:	69f9      	ldr	r1, [r7, #28]
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7ff ff08 	bl	8005d14 <HAL_MDF_OldCallback>
}
 8005f04:	e02a      	b.n	8005f5c <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_SDDETF) == MDF_DFLTISR_SDDETF)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00b      	beq.n	8005f28 <HAL_MDF_IRQHandler+0x1fe>
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_SDDETF;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f1e:	631a      	str	r2, [r3, #48]	@ 0x30
    HAL_MDF_SadCallback(hmdf);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff feed 	bl	8005d00 <HAL_MDF_SadCallback>
}
 8005f26:	e019      	b.n	8005f5c <HAL_MDF_IRQHandler+0x232>
    if ((interrupts & MDF_DFLTISR_SDLVLF) == MDF_DFLTISR_SDLVLF)
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d014      	beq.n	8005f5c <HAL_MDF_IRQHandler+0x232>
      sound_level = hmdf->Instance->SADSDLVR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f38:	60fb      	str	r3, [r7, #12]
      ambient_noise = hmdf->Instance->SADANLVR;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f40:	60bb      	str	r3, [r7, #8]
      hmdf->Instance->DFLTISR |= MDF_DFLTISR_SDLVLF;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f50:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_MDF_SndLvlCallback(hmdf, sound_level, ambient_noise);
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	68f9      	ldr	r1, [r7, #12]
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff fec6 	bl	8005ce8 <HAL_MDF_SndLvlCallback>
}
 8005f5c:	bf00      	nop
 8005f5e:	3720      	adds	r7, #32
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_MDF_ErrorCallback>:
  * @brief  MDF error callback.
  * @param  hmdf MDF handle.
  * @retval None.
  */
__weak void HAL_MDF_ErrorCallback(MDF_HandleTypeDef *hmdf)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hmdf);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_MDF_ErrorCallback could be implemented in the user file */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a19      	ldr	r2, [pc, #100]	@ (8005fe8 <MDF_GetHandleNumberFromInstance+0x70>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d102      	bne.n	8005f8e <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	e024      	b.n	8005fd8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a16      	ldr	r2, [pc, #88]	@ (8005fec <MDF_GetHandleNumberFromInstance+0x74>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d102      	bne.n	8005f9c <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8005f96:	2301      	movs	r3, #1
 8005f98:	60fb      	str	r3, [r7, #12]
 8005f9a:	e01d      	b.n	8005fd8 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a14      	ldr	r2, [pc, #80]	@ (8005ff0 <MDF_GetHandleNumberFromInstance+0x78>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d102      	bne.n	8005faa <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	e016      	b.n	8005fd8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a11      	ldr	r2, [pc, #68]	@ (8005ff4 <MDF_GetHandleNumberFromInstance+0x7c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d102      	bne.n	8005fb8 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	e00f      	b.n	8005fd8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a0f      	ldr	r2, [pc, #60]	@ (8005ff8 <MDF_GetHandleNumberFromInstance+0x80>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d102      	bne.n	8005fc6 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e008      	b.n	8005fd8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a0c      	ldr	r2, [pc, #48]	@ (8005ffc <MDF_GetHandleNumberFromInstance+0x84>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d102      	bne.n	8005fd4 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8005fce:	2305      	movs	r3, #5
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	e001      	b.n	8005fd8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8005fd4:	2306      	movs	r3, #6
 8005fd6:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	40025080 	.word	0x40025080
 8005fec:	40025100 	.word	0x40025100
 8005ff0:	40025180 	.word	0x40025180
 8005ff4:	40025200 	.word	0x40025200
 8005ff8:	40025280 	.word	0x40025280
 8005ffc:	40025300 	.word	0x40025300

08006000 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8006008:	4b39      	ldr	r3, [pc, #228]	@ (80060f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800600a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800600c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006010:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	429a      	cmp	r2, r3
 8006018:	d10b      	bne.n	8006032 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006020:	d905      	bls.n	800602e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006022:	4b33      	ldr	r3, [pc, #204]	@ (80060f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	4a32      	ldr	r2, [pc, #200]	@ (80060f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800602c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	e057      	b.n	80060e2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006038:	d90a      	bls.n	8006050 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800603a:	4b2d      	ldr	r3, [pc, #180]	@ (80060f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4313      	orrs	r3, r2
 8006046:	4a2a      	ldr	r2, [pc, #168]	@ (80060f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800604c:	60d3      	str	r3, [r2, #12]
 800604e:	e007      	b.n	8006060 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006050:	4b27      	ldr	r3, [pc, #156]	@ (80060f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006058:	4925      	ldr	r1, [pc, #148]	@ (80060f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4313      	orrs	r3, r2
 800605e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006060:	4b24      	ldr	r3, [pc, #144]	@ (80060f4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a24      	ldr	r2, [pc, #144]	@ (80060f8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006066:	fba2 2303 	umull	r2, r3, r2, r3
 800606a:	099b      	lsrs	r3, r3, #6
 800606c:	2232      	movs	r2, #50	@ 0x32
 800606e:	fb02 f303 	mul.w	r3, r2, r3
 8006072:	4a21      	ldr	r2, [pc, #132]	@ (80060f8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006074:	fba2 2303 	umull	r2, r3, r2, r3
 8006078:	099b      	lsrs	r3, r3, #6
 800607a:	3301      	adds	r3, #1
 800607c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800607e:	e002      	b.n	8006086 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3b01      	subs	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006086:	4b1a      	ldr	r3, [pc, #104]	@ (80060f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d102      	bne.n	8006098 <HAL_PWREx_ControlVoltageScaling+0x98>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1f3      	bne.n	8006080 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d01b      	beq.n	80060d6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800609e:	4b15      	ldr	r3, [pc, #84]	@ (80060f4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a15      	ldr	r2, [pc, #84]	@ (80060f8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80060a4:	fba2 2303 	umull	r2, r3, r2, r3
 80060a8:	099b      	lsrs	r3, r3, #6
 80060aa:	2232      	movs	r2, #50	@ 0x32
 80060ac:	fb02 f303 	mul.w	r3, r2, r3
 80060b0:	4a11      	ldr	r2, [pc, #68]	@ (80060f8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	099b      	lsrs	r3, r3, #6
 80060b8:	3301      	adds	r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80060bc:	e002      	b.n	80060c4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3b01      	subs	r3, #1
 80060c2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80060c4:	4b0a      	ldr	r3, [pc, #40]	@ (80060f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80060c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d102      	bne.n	80060d6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1f3      	bne.n	80060be <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e000      	b.n	80060e2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	46020800 	.word	0x46020800
 80060f4:	20000000 	.word	0x20000000
 80060f8:	10624dd3 	.word	0x10624dd3

080060fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8006100:	4b04      	ldr	r3, [pc, #16]	@ (8006114 <HAL_PWREx_GetVoltageRange+0x18>)
 8006102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006104:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8006108:	4618      	mov	r0, r3
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	46020800 	.word	0x46020800

08006118 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08e      	sub	sp, #56	@ 0x38
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006120:	2300      	movs	r3, #0
 8006122:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d102      	bne.n	8006132 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	f000 bec8 	b.w	8006ec2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006132:	4b99      	ldr	r3, [pc, #612]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	f003 030c 	and.w	r3, r3, #12
 800613a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800613c:	4b96      	ldr	r3, [pc, #600]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 800613e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006140:	f003 0303 	and.w	r3, r3, #3
 8006144:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0310 	and.w	r3, r3, #16
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 816c 	beq.w	800642c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	2b00      	cmp	r3, #0
 8006158:	d007      	beq.n	800616a <HAL_RCC_OscConfig+0x52>
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	2b0c      	cmp	r3, #12
 800615e:	f040 80de 	bne.w	800631e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006164:	2b01      	cmp	r3, #1
 8006166:	f040 80da 	bne.w	800631e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d102      	bne.n	8006178 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	f000 bea5 	b.w	8006ec2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800617c:	4b86      	ldr	r3, [pc, #536]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d004      	beq.n	8006192 <HAL_RCC_OscConfig+0x7a>
 8006188:	4b83      	ldr	r3, [pc, #524]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006190:	e005      	b.n	800619e <HAL_RCC_OscConfig+0x86>
 8006192:	4b81      	ldr	r3, [pc, #516]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006194:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006198:	041b      	lsls	r3, r3, #16
 800619a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800619e:	4293      	cmp	r3, r2
 80061a0:	d255      	bcs.n	800624e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ac:	4618      	mov	r0, r3
 80061ae:	f001 f9d9 	bl	8007564 <RCC_SetFlashLatencyFromMSIRange>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	f000 be82 	b.w	8006ec2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80061be:	4b76      	ldr	r3, [pc, #472]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	4a75      	ldr	r2, [pc, #468]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 80061c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80061c8:	6093      	str	r3, [r2, #8]
 80061ca:	4b73      	ldr	r3, [pc, #460]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d6:	4970      	ldr	r1, [pc, #448]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80061e4:	d309      	bcc.n	80061fa <HAL_RCC_OscConfig+0xe2>
 80061e6:	4b6c      	ldr	r3, [pc, #432]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f023 021f 	bic.w	r2, r3, #31
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	4969      	ldr	r1, [pc, #420]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60cb      	str	r3, [r1, #12]
 80061f8:	e07e      	b.n	80062f8 <HAL_RCC_OscConfig+0x1e0>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fe:	2b00      	cmp	r3, #0
 8006200:	da0a      	bge.n	8006218 <HAL_RCC_OscConfig+0x100>
 8006202:	4b65      	ldr	r3, [pc, #404]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	015b      	lsls	r3, r3, #5
 8006210:	4961      	ldr	r1, [pc, #388]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006212:	4313      	orrs	r3, r2
 8006214:	60cb      	str	r3, [r1, #12]
 8006216:	e06f      	b.n	80062f8 <HAL_RCC_OscConfig+0x1e0>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006220:	d30a      	bcc.n	8006238 <HAL_RCC_OscConfig+0x120>
 8006222:	4b5d      	ldr	r3, [pc, #372]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	029b      	lsls	r3, r3, #10
 8006230:	4959      	ldr	r1, [pc, #356]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006232:	4313      	orrs	r3, r2
 8006234:	60cb      	str	r3, [r1, #12]
 8006236:	e05f      	b.n	80062f8 <HAL_RCC_OscConfig+0x1e0>
 8006238:	4b57      	ldr	r3, [pc, #348]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	03db      	lsls	r3, r3, #15
 8006246:	4954      	ldr	r1, [pc, #336]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006248:	4313      	orrs	r3, r2
 800624a:	60cb      	str	r3, [r1, #12]
 800624c:	e054      	b.n	80062f8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800624e:	4b52      	ldr	r3, [pc, #328]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	4a51      	ldr	r2, [pc, #324]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006254:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006258:	6093      	str	r3, [r2, #8]
 800625a:	4b4f      	ldr	r3, [pc, #316]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006266:	494c      	ldr	r1, [pc, #304]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006268:	4313      	orrs	r3, r2
 800626a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006270:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006274:	d309      	bcc.n	800628a <HAL_RCC_OscConfig+0x172>
 8006276:	4b48      	ldr	r3, [pc, #288]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f023 021f 	bic.w	r2, r3, #31
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	4945      	ldr	r1, [pc, #276]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006284:	4313      	orrs	r3, r2
 8006286:	60cb      	str	r3, [r1, #12]
 8006288:	e028      	b.n	80062dc <HAL_RCC_OscConfig+0x1c4>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628e:	2b00      	cmp	r3, #0
 8006290:	da0a      	bge.n	80062a8 <HAL_RCC_OscConfig+0x190>
 8006292:	4b41      	ldr	r3, [pc, #260]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	015b      	lsls	r3, r3, #5
 80062a0:	493d      	ldr	r1, [pc, #244]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60cb      	str	r3, [r1, #12]
 80062a6:	e019      	b.n	80062dc <HAL_RCC_OscConfig+0x1c4>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b0:	d30a      	bcc.n	80062c8 <HAL_RCC_OscConfig+0x1b0>
 80062b2:	4b39      	ldr	r3, [pc, #228]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	029b      	lsls	r3, r3, #10
 80062c0:	4935      	ldr	r1, [pc, #212]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60cb      	str	r3, [r1, #12]
 80062c6:	e009      	b.n	80062dc <HAL_RCC_OscConfig+0x1c4>
 80062c8:	4b33      	ldr	r3, [pc, #204]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	03db      	lsls	r3, r3, #15
 80062d6:	4930      	ldr	r1, [pc, #192]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80062dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10a      	bne.n	80062f8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e6:	4618      	mov	r0, r3
 80062e8:	f001 f93c 	bl	8007564 <RCC_SetFlashLatencyFromMSIRange>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	f000 bde5 	b.w	8006ec2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80062f8:	f001 f8de 	bl	80074b8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80062fc:	4b27      	ldr	r3, [pc, #156]	@ (800639c <HAL_RCC_OscConfig+0x284>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4618      	mov	r0, r3
 8006302:	f7fc fc3d 	bl	8002b80 <HAL_InitTick>
 8006306:	4603      	mov	r3, r0
 8006308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800630c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 808a 	beq.w	800642a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8006316:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800631a:	f000 bdd2 	b.w	8006ec2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d066      	beq.n	80063f4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8006326:	4b1c      	ldr	r3, [pc, #112]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a1b      	ldr	r2, [pc, #108]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 800632c:	f043 0301 	orr.w	r3, r3, #1
 8006330:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006332:	f7fc fcaf 	bl	8002c94 <HAL_GetTick>
 8006336:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006338:	e009      	b.n	800634e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800633a:	f7fc fcab 	bl	8002c94 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d902      	bls.n	800634e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	f000 bdba 	b.w	8006ec2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800634e:	4b12      	ldr	r3, [pc, #72]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0304 	and.w	r3, r3, #4
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0ef      	beq.n	800633a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800635a:	4b0f      	ldr	r3, [pc, #60]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	4a0e      	ldr	r2, [pc, #56]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006360:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006364:	6093      	str	r3, [r2, #8]
 8006366:	4b0c      	ldr	r3, [pc, #48]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006372:	4909      	ldr	r1, [pc, #36]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006374:	4313      	orrs	r3, r2
 8006376:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006380:	d30e      	bcc.n	80063a0 <HAL_RCC_OscConfig+0x288>
 8006382:	4b05      	ldr	r3, [pc, #20]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f023 021f 	bic.w	r2, r3, #31
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	4902      	ldr	r1, [pc, #8]	@ (8006398 <HAL_RCC_OscConfig+0x280>)
 8006390:	4313      	orrs	r3, r2
 8006392:	60cb      	str	r3, [r1, #12]
 8006394:	e04a      	b.n	800642c <HAL_RCC_OscConfig+0x314>
 8006396:	bf00      	nop
 8006398:	46020c00 	.word	0x46020c00
 800639c:	20000004 	.word	0x20000004
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	da0a      	bge.n	80063be <HAL_RCC_OscConfig+0x2a6>
 80063a8:	4b98      	ldr	r3, [pc, #608]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	015b      	lsls	r3, r3, #5
 80063b6:	4995      	ldr	r1, [pc, #596]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60cb      	str	r3, [r1, #12]
 80063bc:	e036      	b.n	800642c <HAL_RCC_OscConfig+0x314>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c6:	d30a      	bcc.n	80063de <HAL_RCC_OscConfig+0x2c6>
 80063c8:	4b90      	ldr	r3, [pc, #576]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	029b      	lsls	r3, r3, #10
 80063d6:	498d      	ldr	r1, [pc, #564]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	60cb      	str	r3, [r1, #12]
 80063dc:	e026      	b.n	800642c <HAL_RCC_OscConfig+0x314>
 80063de:	4b8b      	ldr	r3, [pc, #556]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	03db      	lsls	r3, r3, #15
 80063ec:	4987      	ldr	r1, [pc, #540]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60cb      	str	r3, [r1, #12]
 80063f2:	e01b      	b.n	800642c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80063f4:	4b85      	ldr	r3, [pc, #532]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a84      	ldr	r2, [pc, #528]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80063fa:	f023 0301 	bic.w	r3, r3, #1
 80063fe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006400:	f7fc fc48 	bl	8002c94 <HAL_GetTick>
 8006404:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006406:	e009      	b.n	800641c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006408:	f7fc fc44 	bl	8002c94 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b02      	cmp	r3, #2
 8006414:	d902      	bls.n	800641c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	f000 bd53 	b.w	8006ec2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800641c:	4b7b      	ldr	r3, [pc, #492]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0304 	and.w	r3, r3, #4
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1ef      	bne.n	8006408 <HAL_RCC_OscConfig+0x2f0>
 8006428:	e000      	b.n	800642c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800642a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 808b 	beq.w	8006550 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800643a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643c:	2b08      	cmp	r3, #8
 800643e:	d005      	beq.n	800644c <HAL_RCC_OscConfig+0x334>
 8006440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006442:	2b0c      	cmp	r3, #12
 8006444:	d109      	bne.n	800645a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006448:	2b03      	cmp	r3, #3
 800644a:	d106      	bne.n	800645a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d17d      	bne.n	8006550 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	f000 bd34 	b.w	8006ec2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006462:	d106      	bne.n	8006472 <HAL_RCC_OscConfig+0x35a>
 8006464:	4b69      	ldr	r3, [pc, #420]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a68      	ldr	r2, [pc, #416]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 800646a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	e041      	b.n	80064f6 <HAL_RCC_OscConfig+0x3de>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800647a:	d112      	bne.n	80064a2 <HAL_RCC_OscConfig+0x38a>
 800647c:	4b63      	ldr	r3, [pc, #396]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a62      	ldr	r2, [pc, #392]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 8006482:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	4b60      	ldr	r3, [pc, #384]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a5f      	ldr	r2, [pc, #380]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 800648e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	4b5d      	ldr	r3, [pc, #372]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a5c      	ldr	r2, [pc, #368]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 800649a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	e029      	b.n	80064f6 <HAL_RCC_OscConfig+0x3de>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80064aa:	d112      	bne.n	80064d2 <HAL_RCC_OscConfig+0x3ba>
 80064ac:	4b57      	ldr	r3, [pc, #348]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a56      	ldr	r2, [pc, #344]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80064b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	4b54      	ldr	r3, [pc, #336]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a53      	ldr	r2, [pc, #332]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80064be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	4b51      	ldr	r3, [pc, #324]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a50      	ldr	r2, [pc, #320]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80064ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	e011      	b.n	80064f6 <HAL_RCC_OscConfig+0x3de>
 80064d2:	4b4e      	ldr	r3, [pc, #312]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a4d      	ldr	r2, [pc, #308]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80064d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	4b4b      	ldr	r3, [pc, #300]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a4a      	ldr	r2, [pc, #296]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80064e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	4b48      	ldr	r3, [pc, #288]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a47      	ldr	r2, [pc, #284]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80064f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80064f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d014      	beq.n	8006528 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80064fe:	f7fc fbc9 	bl	8002c94 <HAL_GetTick>
 8006502:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006504:	e009      	b.n	800651a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006506:	f7fc fbc5 	bl	8002c94 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b64      	cmp	r3, #100	@ 0x64
 8006512:	d902      	bls.n	800651a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	f000 bcd4 	b.w	8006ec2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800651a:	4b3c      	ldr	r3, [pc, #240]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0ef      	beq.n	8006506 <HAL_RCC_OscConfig+0x3ee>
 8006526:	e013      	b.n	8006550 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006528:	f7fc fbb4 	bl	8002c94 <HAL_GetTick>
 800652c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800652e:	e009      	b.n	8006544 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006530:	f7fc fbb0 	bl	8002c94 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b64      	cmp	r3, #100	@ 0x64
 800653c:	d902      	bls.n	8006544 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	f000 bcbf 	b.w	8006ec2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006544:	4b31      	ldr	r3, [pc, #196]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1ef      	bne.n	8006530 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d05f      	beq.n	800661c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800655c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655e:	2b04      	cmp	r3, #4
 8006560:	d005      	beq.n	800656e <HAL_RCC_OscConfig+0x456>
 8006562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006564:	2b0c      	cmp	r3, #12
 8006566:	d114      	bne.n	8006592 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656a:	2b02      	cmp	r3, #2
 800656c:	d111      	bne.n	8006592 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	f000 bca3 	b.w	8006ec2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800657c:	4b23      	ldr	r3, [pc, #140]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	041b      	lsls	r3, r3, #16
 800658a:	4920      	ldr	r1, [pc, #128]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 800658c:	4313      	orrs	r3, r2
 800658e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006590:	e044      	b.n	800661c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d024      	beq.n	80065e4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800659a:	4b1c      	ldr	r3, [pc, #112]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1b      	ldr	r2, [pc, #108]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80065a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065a4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80065a6:	f7fc fb75 	bl	8002c94 <HAL_GetTick>
 80065aa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065ac:	e009      	b.n	80065c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065ae:	f7fc fb71 	bl	8002c94 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d902      	bls.n	80065c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	f000 bc80 	b.w	8006ec2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065c2:	4b12      	ldr	r3, [pc, #72]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0ef      	beq.n	80065ae <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80065ce:	4b0f      	ldr	r3, [pc, #60]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	041b      	lsls	r3, r3, #16
 80065dc:	490b      	ldr	r1, [pc, #44]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	610b      	str	r3, [r1, #16]
 80065e2:	e01b      	b.n	800661c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80065e4:	4b09      	ldr	r3, [pc, #36]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a08      	ldr	r2, [pc, #32]	@ (800660c <HAL_RCC_OscConfig+0x4f4>)
 80065ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065ee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80065f0:	f7fc fb50 	bl	8002c94 <HAL_GetTick>
 80065f4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065f6:	e00b      	b.n	8006610 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065f8:	f7fc fb4c 	bl	8002c94 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d904      	bls.n	8006610 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	f000 bc5b 	b.w	8006ec2 <HAL_RCC_OscConfig+0xdaa>
 800660c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006610:	4baf      	ldr	r3, [pc, #700]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1ed      	bne.n	80065f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 80c8 	beq.w	80067ba <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800662a:	2300      	movs	r3, #0
 800662c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006630:	4ba7      	ldr	r3, [pc, #668]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 8006632:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006636:	f003 0304 	and.w	r3, r3, #4
 800663a:	2b00      	cmp	r3, #0
 800663c:	d111      	bne.n	8006662 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800663e:	4ba4      	ldr	r3, [pc, #656]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 8006640:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006644:	4aa2      	ldr	r2, [pc, #648]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 8006646:	f043 0304 	orr.w	r3, r3, #4
 800664a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800664e:	4ba0      	ldr	r3, [pc, #640]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 8006650:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800665c:	2301      	movs	r3, #1
 800665e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006662:	4b9c      	ldr	r3, [pc, #624]	@ (80068d4 <HAL_RCC_OscConfig+0x7bc>)
 8006664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	d119      	bne.n	80066a2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800666e:	4b99      	ldr	r3, [pc, #612]	@ (80068d4 <HAL_RCC_OscConfig+0x7bc>)
 8006670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006672:	4a98      	ldr	r2, [pc, #608]	@ (80068d4 <HAL_RCC_OscConfig+0x7bc>)
 8006674:	f043 0301 	orr.w	r3, r3, #1
 8006678:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800667a:	f7fc fb0b 	bl	8002c94 <HAL_GetTick>
 800667e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006680:	e009      	b.n	8006696 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006682:	f7fc fb07 	bl	8002c94 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d902      	bls.n	8006696 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	f000 bc16 	b.w	8006ec2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006696:	4b8f      	ldr	r3, [pc, #572]	@ (80068d4 <HAL_RCC_OscConfig+0x7bc>)
 8006698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0ef      	beq.n	8006682 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d05f      	beq.n	800676a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80066aa:	4b89      	ldr	r3, [pc, #548]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 80066ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066b0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699a      	ldr	r2, [r3, #24]
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066bc:	429a      	cmp	r2, r3
 80066be:	d037      	beq.n	8006730 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d006      	beq.n	80066d8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80066ca:	6a3b      	ldr	r3, [r7, #32]
 80066cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e3f4      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d01b      	beq.n	800671a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80066e2:	4b7b      	ldr	r3, [pc, #492]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 80066e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066e8:	4a79      	ldr	r2, [pc, #484]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 80066ea:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80066ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80066f2:	f7fc facf 	bl	8002c94 <HAL_GetTick>
 80066f6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80066f8:	e008      	b.n	800670c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066fa:	f7fc facb 	bl	8002c94 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b05      	cmp	r3, #5
 8006706:	d901      	bls.n	800670c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e3da      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800670c:	4b70      	ldr	r3, [pc, #448]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 800670e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006712:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1ef      	bne.n	80066fa <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800671a:	4b6d      	ldr	r3, [pc, #436]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 800671c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006720:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	4969      	ldr	r1, [pc, #420]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 800672a:	4313      	orrs	r3, r2
 800672c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006730:	4b67      	ldr	r3, [pc, #412]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 8006732:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006736:	4a66      	ldr	r2, [pc, #408]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 8006738:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800673c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006740:	f7fc faa8 	bl	8002c94 <HAL_GetTick>
 8006744:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006748:	f7fc faa4 	bl	8002c94 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b05      	cmp	r3, #5
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e3b3      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800675a:	4b5d      	ldr	r3, [pc, #372]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 800675c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0ef      	beq.n	8006748 <HAL_RCC_OscConfig+0x630>
 8006768:	e01b      	b.n	80067a2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800676a:	4b59      	ldr	r3, [pc, #356]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 800676c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006770:	4a57      	ldr	r2, [pc, #348]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 8006772:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006776:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800677a:	f7fc fa8b 	bl	8002c94 <HAL_GetTick>
 800677e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006780:	e008      	b.n	8006794 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006782:	f7fc fa87 	bl	8002c94 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	2b05      	cmp	r3, #5
 800678e:	d901      	bls.n	8006794 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e396      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006794:	4b4e      	ldr	r3, [pc, #312]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 8006796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800679a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1ef      	bne.n	8006782 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067a2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d107      	bne.n	80067ba <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067aa:	4b49      	ldr	r3, [pc, #292]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 80067ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067b0:	4a47      	ldr	r2, [pc, #284]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 80067b2:	f023 0304 	bic.w	r3, r3, #4
 80067b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 8111 	beq.w	80069ea <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80067c8:	2300      	movs	r3, #0
 80067ca:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ce:	4b40      	ldr	r3, [pc, #256]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 80067d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d111      	bne.n	8006800 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067dc:	4b3c      	ldr	r3, [pc, #240]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 80067de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067e2:	4a3b      	ldr	r2, [pc, #236]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 80067e4:	f043 0304 	orr.w	r3, r3, #4
 80067e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80067ec:	4b38      	ldr	r3, [pc, #224]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 80067ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067f2:	f003 0304 	and.w	r3, r3, #4
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80067fa:	2301      	movs	r3, #1
 80067fc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006800:	4b34      	ldr	r3, [pc, #208]	@ (80068d4 <HAL_RCC_OscConfig+0x7bc>)
 8006802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d118      	bne.n	800683e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800680c:	4b31      	ldr	r3, [pc, #196]	@ (80068d4 <HAL_RCC_OscConfig+0x7bc>)
 800680e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006810:	4a30      	ldr	r2, [pc, #192]	@ (80068d4 <HAL_RCC_OscConfig+0x7bc>)
 8006812:	f043 0301 	orr.w	r3, r3, #1
 8006816:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006818:	f7fc fa3c 	bl	8002c94 <HAL_GetTick>
 800681c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006820:	f7fc fa38 	bl	8002c94 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e347      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006832:	4b28      	ldr	r3, [pc, #160]	@ (80068d4 <HAL_RCC_OscConfig+0x7bc>)
 8006834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0f0      	beq.n	8006820 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d01f      	beq.n	800688a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d010      	beq.n	8006878 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006856:	4b1e      	ldr	r3, [pc, #120]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 8006858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800685c:	4a1c      	ldr	r2, [pc, #112]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 800685e:	f043 0304 	orr.w	r3, r3, #4
 8006862:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006866:	4b1a      	ldr	r3, [pc, #104]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 8006868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800686c:	4a18      	ldr	r2, [pc, #96]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 800686e:	f043 0301 	orr.w	r3, r3, #1
 8006872:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006876:	e018      	b.n	80068aa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006878:	4b15      	ldr	r3, [pc, #84]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 800687a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800687e:	4a14      	ldr	r2, [pc, #80]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 8006880:	f043 0301 	orr.w	r3, r3, #1
 8006884:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006888:	e00f      	b.n	80068aa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800688a:	4b11      	ldr	r3, [pc, #68]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 800688c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006890:	4a0f      	ldr	r2, [pc, #60]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 8006892:	f023 0301 	bic.w	r3, r3, #1
 8006896:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800689a:	4b0d      	ldr	r3, [pc, #52]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 800689c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068a0:	4a0b      	ldr	r2, [pc, #44]	@ (80068d0 <HAL_RCC_OscConfig+0x7b8>)
 80068a2:	f023 0304 	bic.w	r3, r3, #4
 80068a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d057      	beq.n	8006962 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80068b2:	f7fc f9ef 	bl	8002c94 <HAL_GetTick>
 80068b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068b8:	e00e      	b.n	80068d8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ba:	f7fc f9eb 	bl	8002c94 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d905      	bls.n	80068d8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e2f8      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
 80068d0:	46020c00 	.word	0x46020c00
 80068d4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068d8:	4b9c      	ldr	r3, [pc, #624]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 80068da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0e9      	beq.n	80068ba <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d01b      	beq.n	800692a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80068f2:	4b96      	ldr	r3, [pc, #600]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 80068f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068f8:	4a94      	ldr	r2, [pc, #592]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 80068fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006902:	e00a      	b.n	800691a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006904:	f7fc f9c6 	bl	8002c94 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006912:	4293      	cmp	r3, r2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e2d3      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800691a:	4b8c      	ldr	r3, [pc, #560]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 800691c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006920:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0ed      	beq.n	8006904 <HAL_RCC_OscConfig+0x7ec>
 8006928:	e053      	b.n	80069d2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800692a:	4b88      	ldr	r3, [pc, #544]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 800692c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006930:	4a86      	ldr	r2, [pc, #536]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006936:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800693a:	e00a      	b.n	8006952 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800693c:	f7fc f9aa 	bl	8002c94 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800694a:	4293      	cmp	r3, r2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e2b7      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006952:	4b7e      	ldr	r3, [pc, #504]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1ed      	bne.n	800693c <HAL_RCC_OscConfig+0x824>
 8006960:	e037      	b.n	80069d2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006962:	f7fc f997 	bl	8002c94 <HAL_GetTick>
 8006966:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006968:	e00a      	b.n	8006980 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800696a:	f7fc f993 	bl	8002c94 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006978:	4293      	cmp	r3, r2
 800697a:	d901      	bls.n	8006980 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e2a0      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006980:	4b72      	ldr	r3, [pc, #456]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1ed      	bne.n	800696a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800698e:	4b6f      	ldr	r3, [pc, #444]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01a      	beq.n	80069d2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800699c:	4b6b      	ldr	r3, [pc, #428]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 800699e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069a2:	4a6a      	ldr	r2, [pc, #424]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 80069a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80069ac:	e00a      	b.n	80069c4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ae:	f7fc f971 	bl	8002c94 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069bc:	4293      	cmp	r3, r2
 80069be:	d901      	bls.n	80069c4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e27e      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80069c4:	4b61      	ldr	r3, [pc, #388]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 80069c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1ed      	bne.n	80069ae <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069d2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d107      	bne.n	80069ea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069da:	4b5c      	ldr	r3, [pc, #368]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 80069dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069e0:	4a5a      	ldr	r2, [pc, #360]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 80069e2:	f023 0304 	bic.w	r3, r3, #4
 80069e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0320 	and.w	r3, r3, #32
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d036      	beq.n	8006a64 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d019      	beq.n	8006a32 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80069fe:	4b53      	ldr	r3, [pc, #332]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a52      	ldr	r2, [pc, #328]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006a04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006a08:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006a0a:	f7fc f943 	bl	8002c94 <HAL_GetTick>
 8006a0e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006a10:	e008      	b.n	8006a24 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a12:	f7fc f93f 	bl	8002c94 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e24e      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006a24:	4b49      	ldr	r3, [pc, #292]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f0      	beq.n	8006a12 <HAL_RCC_OscConfig+0x8fa>
 8006a30:	e018      	b.n	8006a64 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006a32:	4b46      	ldr	r3, [pc, #280]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a45      	ldr	r2, [pc, #276]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006a38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a3c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006a3e:	f7fc f929 	bl	8002c94 <HAL_GetTick>
 8006a42:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006a44:	e008      	b.n	8006a58 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a46:	f7fc f925 	bl	8002c94 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e234      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006a58:	4b3c      	ldr	r3, [pc, #240]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1f0      	bne.n	8006a46 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d036      	beq.n	8006ade <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d019      	beq.n	8006aac <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006a78:	4b34      	ldr	r3, [pc, #208]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a33      	ldr	r2, [pc, #204]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006a7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a82:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006a84:	f7fc f906 	bl	8002c94 <HAL_GetTick>
 8006a88:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006a8c:	f7fc f902 	bl	8002c94 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e211      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0f0      	beq.n	8006a8c <HAL_RCC_OscConfig+0x974>
 8006aaa:	e018      	b.n	8006ade <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006aac:	4b27      	ldr	r3, [pc, #156]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a26      	ldr	r2, [pc, #152]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006ab2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ab6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006ab8:	f7fc f8ec 	bl	8002c94 <HAL_GetTick>
 8006abc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006ac0:	f7fc f8e8 	bl	8002c94 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e1f7      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1f0      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d07f      	beq.n	8006bea <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d062      	beq.n	8006bb8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006af2:	4b16      	ldr	r3, [pc, #88]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	4a15      	ldr	r2, [pc, #84]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006af8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006afc:	6093      	str	r3, [r2, #8]
 8006afe:	4b13      	ldr	r3, [pc, #76]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0a:	4910      	ldr	r1, [pc, #64]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b14:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006b18:	d309      	bcc.n	8006b2e <HAL_RCC_OscConfig+0xa16>
 8006b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f023 021f 	bic.w	r2, r3, #31
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	4909      	ldr	r1, [pc, #36]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60cb      	str	r3, [r1, #12]
 8006b2c:	e02a      	b.n	8006b84 <HAL_RCC_OscConfig+0xa6c>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	da0c      	bge.n	8006b50 <HAL_RCC_OscConfig+0xa38>
 8006b36:	4b05      	ldr	r3, [pc, #20]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	015b      	lsls	r3, r3, #5
 8006b44:	4901      	ldr	r1, [pc, #4]	@ (8006b4c <HAL_RCC_OscConfig+0xa34>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60cb      	str	r3, [r1, #12]
 8006b4a:	e01b      	b.n	8006b84 <HAL_RCC_OscConfig+0xa6c>
 8006b4c:	46020c00 	.word	0x46020c00
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b58:	d30a      	bcc.n	8006b70 <HAL_RCC_OscConfig+0xa58>
 8006b5a:	4ba1      	ldr	r3, [pc, #644]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	029b      	lsls	r3, r3, #10
 8006b68:	499d      	ldr	r1, [pc, #628]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60cb      	str	r3, [r1, #12]
 8006b6e:	e009      	b.n	8006b84 <HAL_RCC_OscConfig+0xa6c>
 8006b70:	4b9b      	ldr	r3, [pc, #620]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	03db      	lsls	r3, r3, #15
 8006b7e:	4998      	ldr	r1, [pc, #608]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006b84:	4b96      	ldr	r3, [pc, #600]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a95      	ldr	r2, [pc, #596]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006b8a:	f043 0310 	orr.w	r3, r3, #16
 8006b8e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006b90:	f7fc f880 	bl	8002c94 <HAL_GetTick>
 8006b94:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006b96:	e008      	b.n	8006baa <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006b98:	f7fc f87c 	bl	8002c94 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e18b      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006baa:	4b8d      	ldr	r3, [pc, #564]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0f0      	beq.n	8006b98 <HAL_RCC_OscConfig+0xa80>
 8006bb6:	e018      	b.n	8006bea <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006bb8:	4b89      	ldr	r3, [pc, #548]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a88      	ldr	r2, [pc, #544]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006bbe:	f023 0310 	bic.w	r3, r3, #16
 8006bc2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006bc4:	f7fc f866 	bl	8002c94 <HAL_GetTick>
 8006bc8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006bca:	e008      	b.n	8006bde <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006bcc:	f7fc f862 	bl	8002c94 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e171      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006bde:	4b80      	ldr	r3, [pc, #512]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0320 	and.w	r3, r3, #32
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1f0      	bne.n	8006bcc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 8166 	beq.w	8006ec0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bfa:	4b79      	ldr	r3, [pc, #484]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	f003 030c 	and.w	r3, r3, #12
 8006c02:	2b0c      	cmp	r3, #12
 8006c04:	f000 80f2 	beq.w	8006dec <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	f040 80c5 	bne.w	8006d9c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006c12:	4b73      	ldr	r3, [pc, #460]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a72      	ldr	r2, [pc, #456]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006c18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c1c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006c1e:	f7fc f839 	bl	8002c94 <HAL_GetTick>
 8006c22:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006c24:	e008      	b.n	8006c38 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c26:	f7fc f835 	bl	8002c94 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e144      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006c38:	4b69      	ldr	r3, [pc, #420]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1f0      	bne.n	8006c26 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c44:	4b66      	ldr	r3, [pc, #408]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d111      	bne.n	8006c76 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006c52:	4b63      	ldr	r3, [pc, #396]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c58:	4a61      	ldr	r2, [pc, #388]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006c5a:	f043 0304 	orr.w	r3, r3, #4
 8006c5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006c62:	4b5f      	ldr	r3, [pc, #380]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006c76:	4b5b      	ldr	r3, [pc, #364]	@ (8006de4 <HAL_RCC_OscConfig+0xccc>)
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c82:	d102      	bne.n	8006c8a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8006c84:	2301      	movs	r3, #1
 8006c86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006c8a:	4b56      	ldr	r3, [pc, #344]	@ (8006de4 <HAL_RCC_OscConfig+0xccc>)
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	4a55      	ldr	r2, [pc, #340]	@ (8006de4 <HAL_RCC_OscConfig+0xccc>)
 8006c90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c94:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006c96:	4b52      	ldr	r3, [pc, #328]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c9e:	f023 0303 	bic.w	r3, r3, #3
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006caa:	3a01      	subs	r2, #1
 8006cac:	0212      	lsls	r2, r2, #8
 8006cae:	4311      	orrs	r1, r2
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	494a      	ldr	r1, [pc, #296]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	628b      	str	r3, [r1, #40]	@ 0x28
 8006cbc:	4b48      	ldr	r3, [pc, #288]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006cbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cc0:	4b49      	ldr	r3, [pc, #292]	@ (8006de8 <HAL_RCC_OscConfig+0xcd0>)
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006cc8:	3a01      	subs	r2, #1
 8006cca:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006cd2:	3a01      	subs	r2, #1
 8006cd4:	0252      	lsls	r2, r2, #9
 8006cd6:	b292      	uxth	r2, r2
 8006cd8:	4311      	orrs	r1, r2
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006cde:	3a01      	subs	r2, #1
 8006ce0:	0412      	lsls	r2, r2, #16
 8006ce2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006ce6:	4311      	orrs	r1, r2
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006cec:	3a01      	subs	r2, #1
 8006cee:	0612      	lsls	r2, r2, #24
 8006cf0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	493a      	ldr	r1, [pc, #232]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006cfc:	4b38      	ldr	r3, [pc, #224]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d00:	4a37      	ldr	r2, [pc, #220]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006d02:	f023 0310 	bic.w	r3, r3, #16
 8006d06:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d0c:	4a34      	ldr	r2, [pc, #208]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006d12:	4b33      	ldr	r3, [pc, #204]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d16:	4a32      	ldr	r2, [pc, #200]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006d18:	f043 0310 	orr.w	r3, r3, #16
 8006d1c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006d1e:	4b30      	ldr	r3, [pc, #192]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d22:	f023 020c 	bic.w	r2, r3, #12
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d2a:	492d      	ldr	r1, [pc, #180]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8006d30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d105      	bne.n	8006d44 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006d38:	4b2a      	ldr	r3, [pc, #168]	@ (8006de4 <HAL_RCC_OscConfig+0xccc>)
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	4a29      	ldr	r2, [pc, #164]	@ (8006de4 <HAL_RCC_OscConfig+0xccc>)
 8006d3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d42:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8006d44:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d107      	bne.n	8006d5c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006d4c:	4b24      	ldr	r3, [pc, #144]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d52:	4a23      	ldr	r2, [pc, #140]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006d54:	f023 0304 	bic.w	r3, r3, #4
 8006d58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8006d5c:	4b20      	ldr	r3, [pc, #128]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a1f      	ldr	r2, [pc, #124]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006d62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d66:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006d68:	f7fb ff94 	bl	8002c94 <HAL_GetTick>
 8006d6c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d70:	f7fb ff90 	bl	8002c94 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e09f      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006d82:	4b17      	ldr	r3, [pc, #92]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0f0      	beq.n	8006d70 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006d8e:	4b14      	ldr	r3, [pc, #80]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d92:	4a13      	ldr	r2, [pc, #76]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006d94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d98:	6293      	str	r3, [r2, #40]	@ 0x28
 8006d9a:	e091      	b.n	8006ec0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006d9c:	4b10      	ldr	r3, [pc, #64]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a0f      	ldr	r2, [pc, #60]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006da2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006da6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006da8:	f7fb ff74 	bl	8002c94 <HAL_GetTick>
 8006dac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006db0:	f7fb ff70 	bl	8002c94 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e07f      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006dc2:	4b07      	ldr	r3, [pc, #28]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f0      	bne.n	8006db0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006dce:	4b04      	ldr	r3, [pc, #16]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd2:	4a03      	ldr	r2, [pc, #12]	@ (8006de0 <HAL_RCC_OscConfig+0xcc8>)
 8006dd4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006dd8:	f023 0303 	bic.w	r3, r3, #3
 8006ddc:	6293      	str	r3, [r2, #40]	@ 0x28
 8006dde:	e06f      	b.n	8006ec0 <HAL_RCC_OscConfig+0xda8>
 8006de0:	46020c00 	.word	0x46020c00
 8006de4:	46020800 	.word	0x46020800
 8006de8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006dec:	4b37      	ldr	r3, [pc, #220]	@ (8006ecc <HAL_RCC_OscConfig+0xdb4>)
 8006dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006df2:	4b36      	ldr	r3, [pc, #216]	@ (8006ecc <HAL_RCC_OscConfig+0xdb4>)
 8006df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006df6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d039      	beq.n	8006e74 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	f003 0203 	and.w	r2, r3, #3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d132      	bne.n	8006e74 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	0a1b      	lsrs	r3, r3, #8
 8006e12:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d129      	bne.n	8006e74 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d122      	bne.n	8006e74 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e38:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d11a      	bne.n	8006e74 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	0a5b      	lsrs	r3, r3, #9
 8006e42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d111      	bne.n	8006e74 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	0c1b      	lsrs	r3, r3, #16
 8006e54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e5c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d108      	bne.n	8006e74 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	0e1b      	lsrs	r3, r3, #24
 8006e66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e6e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d001      	beq.n	8006e78 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e024      	b.n	8006ec2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006e78:	4b14      	ldr	r3, [pc, #80]	@ (8006ecc <HAL_RCC_OscConfig+0xdb4>)
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7c:	08db      	lsrs	r3, r3, #3
 8006e7e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d01a      	beq.n	8006ec0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006e8a:	4b10      	ldr	r3, [pc, #64]	@ (8006ecc <HAL_RCC_OscConfig+0xdb4>)
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8006ecc <HAL_RCC_OscConfig+0xdb4>)
 8006e90:	f023 0310 	bic.w	r3, r3, #16
 8006e94:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e96:	f7fb fefd 	bl	8002c94 <HAL_GetTick>
 8006e9a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8006e9c:	bf00      	nop
 8006e9e:	f7fb fef9 	bl	8002c94 <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d0f9      	beq.n	8006e9e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eae:	4a07      	ldr	r2, [pc, #28]	@ (8006ecc <HAL_RCC_OscConfig+0xdb4>)
 8006eb0:	00db      	lsls	r3, r3, #3
 8006eb2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006eb4:	4b05      	ldr	r3, [pc, #20]	@ (8006ecc <HAL_RCC_OscConfig+0xdb4>)
 8006eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb8:	4a04      	ldr	r2, [pc, #16]	@ (8006ecc <HAL_RCC_OscConfig+0xdb4>)
 8006eba:	f043 0310 	orr.w	r3, r3, #16
 8006ebe:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3738      	adds	r7, #56	@ 0x38
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	46020c00 	.word	0x46020c00

08006ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e1d9      	b.n	8007298 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ee4:	4b9b      	ldr	r3, [pc, #620]	@ (8007154 <HAL_RCC_ClockConfig+0x284>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 030f 	and.w	r3, r3, #15
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d910      	bls.n	8006f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ef2:	4b98      	ldr	r3, [pc, #608]	@ (8007154 <HAL_RCC_ClockConfig+0x284>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f023 020f 	bic.w	r2, r3, #15
 8006efa:	4996      	ldr	r1, [pc, #600]	@ (8007154 <HAL_RCC_ClockConfig+0x284>)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f02:	4b94      	ldr	r3, [pc, #592]	@ (8007154 <HAL_RCC_ClockConfig+0x284>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d001      	beq.n	8006f14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e1c1      	b.n	8007298 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0310 	and.w	r3, r3, #16
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d010      	beq.n	8006f42 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	695a      	ldr	r2, [r3, #20]
 8006f24:	4b8c      	ldr	r3, [pc, #560]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8006f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d908      	bls.n	8006f42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006f30:	4b89      	ldr	r3, [pc, #548]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8006f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	4986      	ldr	r1, [pc, #536]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0308 	and.w	r3, r3, #8
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d012      	beq.n	8006f74 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691a      	ldr	r2, [r3, #16]
 8006f52:	4b81      	ldr	r3, [pc, #516]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	091b      	lsrs	r3, r3, #4
 8006f58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d909      	bls.n	8006f74 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006f60:	4b7d      	ldr	r3, [pc, #500]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	497a      	ldr	r1, [pc, #488]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d010      	beq.n	8006fa2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68da      	ldr	r2, [r3, #12]
 8006f84:	4b74      	ldr	r3, [pc, #464]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d908      	bls.n	8006fa2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006f90:	4b71      	ldr	r3, [pc, #452]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	496e      	ldr	r1, [pc, #440]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d010      	beq.n	8006fd0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	4b69      	ldr	r3, [pc, #420]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d908      	bls.n	8006fd0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006fbe:	4b66      	ldr	r3, [pc, #408]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	f023 020f 	bic.w	r2, r3, #15
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	4963      	ldr	r1, [pc, #396]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 80d2 	beq.w	8007182 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d143      	bne.n	8007072 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fea:	4b5b      	ldr	r3, [pc, #364]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8006fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d110      	bne.n	800701a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006ff8:	4b57      	ldr	r3, [pc, #348]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8006ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ffe:	4a56      	ldr	r2, [pc, #344]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8007000:	f043 0304 	orr.w	r3, r3, #4
 8007004:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007008:	4b53      	ldr	r3, [pc, #332]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 800700a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	60bb      	str	r3, [r7, #8]
 8007014:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007016:	2301      	movs	r3, #1
 8007018:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800701a:	f7fb fe3b 	bl	8002c94 <HAL_GetTick>
 800701e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007020:	4b4e      	ldr	r3, [pc, #312]	@ (800715c <HAL_RCC_ClockConfig+0x28c>)
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00f      	beq.n	800704c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800702c:	e008      	b.n	8007040 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800702e:	f7fb fe31 	bl	8002c94 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b02      	cmp	r3, #2
 800703a:	d901      	bls.n	8007040 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e12b      	b.n	8007298 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007040:	4b46      	ldr	r3, [pc, #280]	@ (800715c <HAL_RCC_ClockConfig+0x28c>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0f0      	beq.n	800702e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800704c:	7dfb      	ldrb	r3, [r7, #23]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d107      	bne.n	8007062 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007052:	4b41      	ldr	r3, [pc, #260]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8007054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007058:	4a3f      	ldr	r2, [pc, #252]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 800705a:	f023 0304 	bic.w	r3, r3, #4
 800705e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007062:	4b3d      	ldr	r3, [pc, #244]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d121      	bne.n	80070b2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e112      	b.n	8007298 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b02      	cmp	r3, #2
 8007078:	d107      	bne.n	800708a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800707a:	4b37      	ldr	r3, [pc, #220]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d115      	bne.n	80070b2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e106      	b.n	8007298 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d107      	bne.n	80070a2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007092:	4b31      	ldr	r3, [pc, #196]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0304 	and.w	r3, r3, #4
 800709a:	2b00      	cmp	r3, #0
 800709c:	d109      	bne.n	80070b2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e0fa      	b.n	8007298 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070a2:	4b2d      	ldr	r3, [pc, #180]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e0f2      	b.n	8007298 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80070b2:	4b29      	ldr	r3, [pc, #164]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	f023 0203 	bic.w	r2, r3, #3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	4926      	ldr	r1, [pc, #152]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80070c4:	f7fb fde6 	bl	8002c94 <HAL_GetTick>
 80070c8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d112      	bne.n	80070f8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070d2:	e00a      	b.n	80070ea <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070d4:	f7fb fdde 	bl	8002c94 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d901      	bls.n	80070ea <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e0d6      	b.n	8007298 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070ea:	4b1b      	ldr	r3, [pc, #108]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	f003 030c 	and.w	r3, r3, #12
 80070f2:	2b0c      	cmp	r3, #12
 80070f4:	d1ee      	bne.n	80070d4 <HAL_RCC_ClockConfig+0x204>
 80070f6:	e044      	b.n	8007182 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d112      	bne.n	8007126 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007100:	e00a      	b.n	8007118 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007102:	f7fb fdc7 	bl	8002c94 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007110:	4293      	cmp	r3, r2
 8007112:	d901      	bls.n	8007118 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e0bf      	b.n	8007298 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007118:	4b0f      	ldr	r3, [pc, #60]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	f003 030c 	and.w	r3, r3, #12
 8007120:	2b08      	cmp	r3, #8
 8007122:	d1ee      	bne.n	8007102 <HAL_RCC_ClockConfig+0x232>
 8007124:	e02d      	b.n	8007182 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d123      	bne.n	8007176 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800712e:	e00a      	b.n	8007146 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007130:	f7fb fdb0 	bl	8002c94 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800713e:	4293      	cmp	r3, r2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e0a8      	b.n	8007298 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007146:	4b04      	ldr	r3, [pc, #16]	@ (8007158 <HAL_RCC_ClockConfig+0x288>)
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	f003 030c 	and.w	r3, r3, #12
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1ee      	bne.n	8007130 <HAL_RCC_ClockConfig+0x260>
 8007152:	e016      	b.n	8007182 <HAL_RCC_ClockConfig+0x2b2>
 8007154:	40022000 	.word	0x40022000
 8007158:	46020c00 	.word	0x46020c00
 800715c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007160:	f7fb fd98 	bl	8002c94 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800716e:	4293      	cmp	r3, r2
 8007170:	d901      	bls.n	8007176 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e090      	b.n	8007298 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007176:	4b4a      	ldr	r3, [pc, #296]	@ (80072a0 <HAL_RCC_ClockConfig+0x3d0>)
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	f003 030c 	and.w	r3, r3, #12
 800717e:	2b04      	cmp	r3, #4
 8007180:	d1ee      	bne.n	8007160 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b00      	cmp	r3, #0
 800718c:	d010      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689a      	ldr	r2, [r3, #8]
 8007192:	4b43      	ldr	r3, [pc, #268]	@ (80072a0 <HAL_RCC_ClockConfig+0x3d0>)
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	429a      	cmp	r2, r3
 800719c:	d208      	bcs.n	80071b0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800719e:	4b40      	ldr	r3, [pc, #256]	@ (80072a0 <HAL_RCC_ClockConfig+0x3d0>)
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	f023 020f 	bic.w	r2, r3, #15
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	493d      	ldr	r1, [pc, #244]	@ (80072a0 <HAL_RCC_ClockConfig+0x3d0>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071b0:	4b3c      	ldr	r3, [pc, #240]	@ (80072a4 <HAL_RCC_ClockConfig+0x3d4>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 030f 	and.w	r3, r3, #15
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d210      	bcs.n	80071e0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071be:	4b39      	ldr	r3, [pc, #228]	@ (80072a4 <HAL_RCC_ClockConfig+0x3d4>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f023 020f 	bic.w	r2, r3, #15
 80071c6:	4937      	ldr	r1, [pc, #220]	@ (80072a4 <HAL_RCC_ClockConfig+0x3d4>)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ce:	4b35      	ldr	r3, [pc, #212]	@ (80072a4 <HAL_RCC_ClockConfig+0x3d4>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 030f 	and.w	r3, r3, #15
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d001      	beq.n	80071e0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e05b      	b.n	8007298 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d010      	beq.n	800720e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68da      	ldr	r2, [r3, #12]
 80071f0:	4b2b      	ldr	r3, [pc, #172]	@ (80072a0 <HAL_RCC_ClockConfig+0x3d0>)
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d208      	bcs.n	800720e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80071fc:	4b28      	ldr	r3, [pc, #160]	@ (80072a0 <HAL_RCC_ClockConfig+0x3d0>)
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	4925      	ldr	r1, [pc, #148]	@ (80072a0 <HAL_RCC_ClockConfig+0x3d0>)
 800720a:	4313      	orrs	r3, r2
 800720c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0308 	and.w	r3, r3, #8
 8007216:	2b00      	cmp	r3, #0
 8007218:	d012      	beq.n	8007240 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691a      	ldr	r2, [r3, #16]
 800721e:	4b20      	ldr	r3, [pc, #128]	@ (80072a0 <HAL_RCC_ClockConfig+0x3d0>)
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	091b      	lsrs	r3, r3, #4
 8007224:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007228:	429a      	cmp	r2, r3
 800722a:	d209      	bcs.n	8007240 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800722c:	4b1c      	ldr	r3, [pc, #112]	@ (80072a0 <HAL_RCC_ClockConfig+0x3d0>)
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	011b      	lsls	r3, r3, #4
 800723a:	4919      	ldr	r1, [pc, #100]	@ (80072a0 <HAL_RCC_ClockConfig+0x3d0>)
 800723c:	4313      	orrs	r3, r2
 800723e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0310 	and.w	r3, r3, #16
 8007248:	2b00      	cmp	r3, #0
 800724a:	d010      	beq.n	800726e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	695a      	ldr	r2, [r3, #20]
 8007250:	4b13      	ldr	r3, [pc, #76]	@ (80072a0 <HAL_RCC_ClockConfig+0x3d0>)
 8007252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007254:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007258:	429a      	cmp	r2, r3
 800725a:	d208      	bcs.n	800726e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800725c:	4b10      	ldr	r3, [pc, #64]	@ (80072a0 <HAL_RCC_ClockConfig+0x3d0>)
 800725e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007260:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	490d      	ldr	r1, [pc, #52]	@ (80072a0 <HAL_RCC_ClockConfig+0x3d0>)
 800726a:	4313      	orrs	r3, r2
 800726c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800726e:	f000 f821 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 8007272:	4602      	mov	r2, r0
 8007274:	4b0a      	ldr	r3, [pc, #40]	@ (80072a0 <HAL_RCC_ClockConfig+0x3d0>)
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	f003 030f 	and.w	r3, r3, #15
 800727c:	490a      	ldr	r1, [pc, #40]	@ (80072a8 <HAL_RCC_ClockConfig+0x3d8>)
 800727e:	5ccb      	ldrb	r3, [r1, r3]
 8007280:	fa22 f303 	lsr.w	r3, r2, r3
 8007284:	4a09      	ldr	r2, [pc, #36]	@ (80072ac <HAL_RCC_ClockConfig+0x3dc>)
 8007286:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007288:	4b09      	ldr	r3, [pc, #36]	@ (80072b0 <HAL_RCC_ClockConfig+0x3e0>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4618      	mov	r0, r3
 800728e:	f7fb fc77 	bl	8002b80 <HAL_InitTick>
 8007292:	4603      	mov	r3, r0
 8007294:	73fb      	strb	r3, [r7, #15]

  return status;
 8007296:	7bfb      	ldrb	r3, [r7, #15]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	46020c00 	.word	0x46020c00
 80072a4:	40022000 	.word	0x40022000
 80072a8:	0800e5d0 	.word	0x0800e5d0
 80072ac:	20000000 	.word	0x20000000
 80072b0:	20000004 	.word	0x20000004

080072b4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b08b      	sub	sp, #44	@ 0x2c
 80072b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072c2:	4b78      	ldr	r3, [pc, #480]	@ (80074a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	f003 030c 	and.w	r3, r3, #12
 80072ca:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072cc:	4b75      	ldr	r3, [pc, #468]	@ (80074a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d0:	f003 0303 	and.w	r3, r3, #3
 80072d4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d005      	beq.n	80072e8 <HAL_RCC_GetSysClockFreq+0x34>
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2b0c      	cmp	r3, #12
 80072e0:	d121      	bne.n	8007326 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d11e      	bne.n	8007326 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80072e8:	4b6e      	ldr	r3, [pc, #440]	@ (80074a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d107      	bne.n	8007304 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80072f4:	4b6b      	ldr	r3, [pc, #428]	@ (80074a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072fa:	0b1b      	lsrs	r3, r3, #12
 80072fc:	f003 030f 	and.w	r3, r3, #15
 8007300:	627b      	str	r3, [r7, #36]	@ 0x24
 8007302:	e005      	b.n	8007310 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8007304:	4b67      	ldr	r3, [pc, #412]	@ (80074a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	0f1b      	lsrs	r3, r3, #28
 800730a:	f003 030f 	and.w	r3, r3, #15
 800730e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007310:	4a65      	ldr	r2, [pc, #404]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8007312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007318:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d110      	bne.n	8007342 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007322:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007324:	e00d      	b.n	8007342 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007326:	4b5f      	ldr	r3, [pc, #380]	@ (80074a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	f003 030c 	and.w	r3, r3, #12
 800732e:	2b04      	cmp	r3, #4
 8007330:	d102      	bne.n	8007338 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007332:	4b5e      	ldr	r3, [pc, #376]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007334:	623b      	str	r3, [r7, #32]
 8007336:	e004      	b.n	8007342 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	2b08      	cmp	r3, #8
 800733c:	d101      	bne.n	8007342 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800733e:	4b5b      	ldr	r3, [pc, #364]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007340:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	2b0c      	cmp	r3, #12
 8007346:	f040 80a5 	bne.w	8007494 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800734a:	4b56      	ldr	r3, [pc, #344]	@ (80074a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800734c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734e:	f003 0303 	and.w	r3, r3, #3
 8007352:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007354:	4b53      	ldr	r3, [pc, #332]	@ (80074a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007358:	0a1b      	lsrs	r3, r3, #8
 800735a:	f003 030f 	and.w	r3, r3, #15
 800735e:	3301      	adds	r3, #1
 8007360:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007362:	4b50      	ldr	r3, [pc, #320]	@ (80074a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007366:	091b      	lsrs	r3, r3, #4
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800736e:	4b4d      	ldr	r3, [pc, #308]	@ (80074a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007372:	08db      	lsrs	r3, r3, #3
 8007374:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	fb02 f303 	mul.w	r3, r2, r3
 800737e:	ee07 3a90 	vmov	s15, r3
 8007382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007386:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	2b02      	cmp	r3, #2
 800738e:	d003      	beq.n	8007398 <HAL_RCC_GetSysClockFreq+0xe4>
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	2b03      	cmp	r3, #3
 8007394:	d022      	beq.n	80073dc <HAL_RCC_GetSysClockFreq+0x128>
 8007396:	e043      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80074b0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80073a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073aa:	4b3e      	ldr	r3, [pc, #248]	@ (80074a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80073ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80073ba:	ed97 6a01 	vldr	s12, [r7, #4]
 80073be:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80074b4 <HAL_RCC_GetSysClockFreq+0x200>
 80073c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80073ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073da:	e046      	b.n	800746a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	ee07 3a90 	vmov	s15, r3
 80073e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80074b0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80073ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ee:	4b2d      	ldr	r3, [pc, #180]	@ (80074a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80073f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80073fe:	ed97 6a01 	vldr	s12, [r7, #4]
 8007402:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80074b4 <HAL_RCC_GetSysClockFreq+0x200>
 8007406:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800740a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800740e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007412:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800741e:	e024      	b.n	800746a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	ee07 3a90 	vmov	s15, r3
 8007430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007438:	4b1a      	ldr	r3, [pc, #104]	@ (80074a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800743a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800743c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007440:	ee07 3a90 	vmov	s15, r3
 8007444:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007448:	ed97 6a01 	vldr	s12, [r7, #4]
 800744c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80074b4 <HAL_RCC_GetSysClockFreq+0x200>
 8007450:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007454:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007458:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800745c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007464:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007468:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800746a:	4b0e      	ldr	r3, [pc, #56]	@ (80074a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800746c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800746e:	0e1b      	lsrs	r3, r3, #24
 8007470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007474:	3301      	adds	r3, #1
 8007476:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007482:	edd7 6a07 	vldr	s13, [r7, #28]
 8007486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800748a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800748e:	ee17 3a90 	vmov	r3, s15
 8007492:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8007494:	6a3b      	ldr	r3, [r7, #32]
}
 8007496:	4618      	mov	r0, r3
 8007498:	372c      	adds	r7, #44	@ 0x2c
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	46020c00 	.word	0x46020c00
 80074a8:	0800e5e8 	.word	0x0800e5e8
 80074ac:	00f42400 	.word	0x00f42400
 80074b0:	4b742400 	.word	0x4b742400
 80074b4:	46000000 	.word	0x46000000

080074b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80074bc:	f7ff fefa 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 80074c0:	4602      	mov	r2, r0
 80074c2:	4b07      	ldr	r3, [pc, #28]	@ (80074e0 <HAL_RCC_GetHCLKFreq+0x28>)
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	f003 030f 	and.w	r3, r3, #15
 80074ca:	4906      	ldr	r1, [pc, #24]	@ (80074e4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80074cc:	5ccb      	ldrb	r3, [r1, r3]
 80074ce:	fa22 f303 	lsr.w	r3, r2, r3
 80074d2:	4a05      	ldr	r2, [pc, #20]	@ (80074e8 <HAL_RCC_GetHCLKFreq+0x30>)
 80074d4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80074d6:	4b04      	ldr	r3, [pc, #16]	@ (80074e8 <HAL_RCC_GetHCLKFreq+0x30>)
 80074d8:	681b      	ldr	r3, [r3, #0]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	46020c00 	.word	0x46020c00
 80074e4:	0800e5d0 	.word	0x0800e5d0
 80074e8:	20000000 	.word	0x20000000

080074ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80074f0:	f7ff ffe2 	bl	80074b8 <HAL_RCC_GetHCLKFreq>
 80074f4:	4602      	mov	r2, r0
 80074f6:	4b05      	ldr	r3, [pc, #20]	@ (800750c <HAL_RCC_GetPCLK1Freq+0x20>)
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	091b      	lsrs	r3, r3, #4
 80074fc:	f003 0307 	and.w	r3, r3, #7
 8007500:	4903      	ldr	r1, [pc, #12]	@ (8007510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007502:	5ccb      	ldrb	r3, [r1, r3]
 8007504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007508:	4618      	mov	r0, r3
 800750a:	bd80      	pop	{r7, pc}
 800750c:	46020c00 	.word	0x46020c00
 8007510:	0800e5e0 	.word	0x0800e5e0

08007514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007518:	f7ff ffce 	bl	80074b8 <HAL_RCC_GetHCLKFreq>
 800751c:	4602      	mov	r2, r0
 800751e:	4b05      	ldr	r3, [pc, #20]	@ (8007534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	0a1b      	lsrs	r3, r3, #8
 8007524:	f003 0307 	and.w	r3, r3, #7
 8007528:	4903      	ldr	r1, [pc, #12]	@ (8007538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800752a:	5ccb      	ldrb	r3, [r1, r3]
 800752c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007530:	4618      	mov	r0, r3
 8007532:	bd80      	pop	{r7, pc}
 8007534:	46020c00 	.word	0x46020c00
 8007538:	0800e5e0 	.word	0x0800e5e0

0800753c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8007540:	f7ff ffba 	bl	80074b8 <HAL_RCC_GetHCLKFreq>
 8007544:	4602      	mov	r2, r0
 8007546:	4b05      	ldr	r3, [pc, #20]	@ (800755c <HAL_RCC_GetPCLK3Freq+0x20>)
 8007548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754a:	091b      	lsrs	r3, r3, #4
 800754c:	f003 0307 	and.w	r3, r3, #7
 8007550:	4903      	ldr	r1, [pc, #12]	@ (8007560 <HAL_RCC_GetPCLK3Freq+0x24>)
 8007552:	5ccb      	ldrb	r3, [r1, r3]
 8007554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007558:	4618      	mov	r0, r3
 800755a:	bd80      	pop	{r7, pc}
 800755c:	46020c00 	.word	0x46020c00
 8007560:	0800e5e0 	.word	0x0800e5e0

08007564 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800756c:	4b3e      	ldr	r3, [pc, #248]	@ (8007668 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800756e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007572:	f003 0304 	and.w	r3, r3, #4
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800757a:	f7fe fdbf 	bl	80060fc <HAL_PWREx_GetVoltageRange>
 800757e:	6178      	str	r0, [r7, #20]
 8007580:	e019      	b.n	80075b6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007582:	4b39      	ldr	r3, [pc, #228]	@ (8007668 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007584:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007588:	4a37      	ldr	r2, [pc, #220]	@ (8007668 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800758a:	f043 0304 	orr.w	r3, r3, #4
 800758e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007592:	4b35      	ldr	r3, [pc, #212]	@ (8007668 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007598:	f003 0304 	and.w	r3, r3, #4
 800759c:	60fb      	str	r3, [r7, #12]
 800759e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80075a0:	f7fe fdac 	bl	80060fc <HAL_PWREx_GetVoltageRange>
 80075a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80075a6:	4b30      	ldr	r3, [pc, #192]	@ (8007668 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80075a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075ac:	4a2e      	ldr	r2, [pc, #184]	@ (8007668 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80075ae:	f023 0304 	bic.w	r3, r3, #4
 80075b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075bc:	d003      	beq.n	80075c6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075c4:	d109      	bne.n	80075da <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075cc:	d202      	bcs.n	80075d4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80075ce:	2301      	movs	r3, #1
 80075d0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80075d2:	e033      	b.n	800763c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80075d4:	2300      	movs	r3, #0
 80075d6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80075d8:	e030      	b.n	800763c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075e0:	d208      	bcs.n	80075f4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075e8:	d102      	bne.n	80075f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80075ea:	2303      	movs	r3, #3
 80075ec:	613b      	str	r3, [r7, #16]
 80075ee:	e025      	b.n	800763c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e035      	b.n	8007660 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075fa:	d90f      	bls.n	800761c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d109      	bne.n	8007616 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007608:	d902      	bls.n	8007610 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800760a:	2300      	movs	r3, #0
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	e015      	b.n	800763c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007610:	2301      	movs	r3, #1
 8007612:	613b      	str	r3, [r7, #16]
 8007614:	e012      	b.n	800763c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007616:	2300      	movs	r3, #0
 8007618:	613b      	str	r3, [r7, #16]
 800761a:	e00f      	b.n	800763c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007622:	d109      	bne.n	8007638 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800762a:	d102      	bne.n	8007632 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800762c:	2301      	movs	r3, #1
 800762e:	613b      	str	r3, [r7, #16]
 8007630:	e004      	b.n	800763c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007632:	2302      	movs	r3, #2
 8007634:	613b      	str	r3, [r7, #16]
 8007636:	e001      	b.n	800763c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007638:	2301      	movs	r3, #1
 800763a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800763c:	4b0b      	ldr	r3, [pc, #44]	@ (800766c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f023 020f 	bic.w	r2, r3, #15
 8007644:	4909      	ldr	r1, [pc, #36]	@ (800766c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	4313      	orrs	r3, r2
 800764a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800764c:	4b07      	ldr	r3, [pc, #28]	@ (800766c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 030f 	and.w	r3, r3, #15
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	429a      	cmp	r2, r3
 8007658:	d001      	beq.n	800765e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e000      	b.n	8007660 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	46020c00 	.word	0x46020c00
 800766c:	40022000 	.word	0x40022000

08007670 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007674:	b0b8      	sub	sp, #224	@ 0xe0
 8007676:	af00      	add	r7, sp, #0
 8007678:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800767c:	2300      	movs	r3, #0
 800767e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007682:	2300      	movs	r3, #0
 8007684:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007688:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	f002 0401 	and.w	r4, r2, #1
 8007694:	2500      	movs	r5, #0
 8007696:	ea54 0305 	orrs.w	r3, r4, r5
 800769a:	d00b      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800769c:	4bca      	ldr	r3, [pc, #808]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800769e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076a2:	f023 0103 	bic.w	r1, r3, #3
 80076a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076ac:	4ac6      	ldr	r2, [pc, #792]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80076ae:	430b      	orrs	r3, r1
 80076b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076bc:	f002 0802 	and.w	r8, r2, #2
 80076c0:	f04f 0900 	mov.w	r9, #0
 80076c4:	ea58 0309 	orrs.w	r3, r8, r9
 80076c8:	d00b      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80076ca:	4bbf      	ldr	r3, [pc, #764]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80076cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076d0:	f023 010c 	bic.w	r1, r3, #12
 80076d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076da:	4abb      	ldr	r2, [pc, #748]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80076dc:	430b      	orrs	r3, r1
 80076de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	f002 0a04 	and.w	sl, r2, #4
 80076ee:	f04f 0b00 	mov.w	fp, #0
 80076f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80076f6:	d00b      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80076f8:	4bb3      	ldr	r3, [pc, #716]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80076fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076fe:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007702:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007708:	4aaf      	ldr	r2, [pc, #700]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800770a:	430b      	orrs	r3, r1
 800770c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007710:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	f002 0308 	and.w	r3, r2, #8
 800771c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007720:	2300      	movs	r3, #0
 8007722:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007726:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800772a:	460b      	mov	r3, r1
 800772c:	4313      	orrs	r3, r2
 800772e:	d00b      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007730:	4ba5      	ldr	r3, [pc, #660]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007736:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800773a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800773e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007740:	4aa1      	ldr	r2, [pc, #644]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007742:	430b      	orrs	r3, r1
 8007744:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007748:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007750:	f002 0310 	and.w	r3, r2, #16
 8007754:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007758:	2300      	movs	r3, #0
 800775a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800775e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007762:	460b      	mov	r3, r1
 8007764:	4313      	orrs	r3, r2
 8007766:	d00b      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007768:	4b97      	ldr	r3, [pc, #604]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800776a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800776e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007772:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007778:	4a93      	ldr	r2, [pc, #588]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800777a:	430b      	orrs	r3, r1
 800777c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007780:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	f002 0320 	and.w	r3, r2, #32
 800778c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007790:	2300      	movs	r3, #0
 8007792:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007796:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800779a:	460b      	mov	r3, r1
 800779c:	4313      	orrs	r3, r2
 800779e:	d00b      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80077a0:	4b89      	ldr	r3, [pc, #548]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80077a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077a6:	f023 0107 	bic.w	r1, r3, #7
 80077aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077b0:	4a85      	ldr	r2, [pc, #532]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80077b2:	430b      	orrs	r3, r1
 80077b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80077c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80077c8:	2300      	movs	r3, #0
 80077ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077ce:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80077d2:	460b      	mov	r3, r1
 80077d4:	4313      	orrs	r3, r2
 80077d6:	d00b      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80077d8:	4b7b      	ldr	r3, [pc, #492]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80077da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077de:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80077e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077e8:	4a77      	ldr	r2, [pc, #476]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80077ea:	430b      	orrs	r3, r1
 80077ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80077fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007800:	2300      	movs	r3, #0
 8007802:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007806:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800780a:	460b      	mov	r3, r1
 800780c:	4313      	orrs	r3, r2
 800780e:	d00b      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007810:	4b6d      	ldr	r3, [pc, #436]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007816:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800781a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800781e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007820:	4a69      	ldr	r2, [pc, #420]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007822:	430b      	orrs	r3, r1
 8007824:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007828:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800782c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007830:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007834:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007838:	2300      	movs	r3, #0
 800783a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800783e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007842:	460b      	mov	r3, r1
 8007844:	4313      	orrs	r3, r2
 8007846:	d00b      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007848:	4b5f      	ldr	r3, [pc, #380]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800784a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800784e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007852:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007858:	4a5b      	ldr	r2, [pc, #364]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800785a:	430b      	orrs	r3, r1
 800785c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007860:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800786c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007870:	2300      	movs	r3, #0
 8007872:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007876:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800787a:	460b      	mov	r3, r1
 800787c:	4313      	orrs	r3, r2
 800787e:	d00b      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007880:	4b51      	ldr	r3, [pc, #324]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007886:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800788a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800788e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007890:	4a4d      	ldr	r2, [pc, #308]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007892:	430b      	orrs	r3, r1
 8007894:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007898:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80078a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80078a8:	2300      	movs	r3, #0
 80078aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80078ae:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80078b2:	460b      	mov	r3, r1
 80078b4:	4313      	orrs	r3, r2
 80078b6:	d00b      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80078b8:	4b43      	ldr	r3, [pc, #268]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80078ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078be:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80078c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80078c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078c8:	4a3f      	ldr	r2, [pc, #252]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80078ca:	430b      	orrs	r3, r1
 80078cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80078d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80078dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80078e0:	2300      	movs	r3, #0
 80078e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80078ea:	460b      	mov	r3, r1
 80078ec:	4313      	orrs	r3, r2
 80078ee:	d00b      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80078f0:	4b35      	ldr	r3, [pc, #212]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80078f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078f6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80078fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80078fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007900:	4a31      	ldr	r2, [pc, #196]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007902:	430b      	orrs	r3, r1
 8007904:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007908:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800790c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007910:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007914:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007916:	2300      	movs	r3, #0
 8007918:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800791a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800791e:	460b      	mov	r3, r1
 8007920:	4313      	orrs	r3, r2
 8007922:	d00c      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007924:	4b28      	ldr	r3, [pc, #160]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007926:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800792a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800792e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007936:	4a24      	ldr	r2, [pc, #144]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007938:	430b      	orrs	r3, r1
 800793a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800793e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007946:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800794a:	673b      	str	r3, [r7, #112]	@ 0x70
 800794c:	2300      	movs	r3, #0
 800794e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007950:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007954:	460b      	mov	r3, r1
 8007956:	4313      	orrs	r3, r2
 8007958:	d04f      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800795a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800795e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007962:	2b80      	cmp	r3, #128	@ 0x80
 8007964:	d02d      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8007966:	2b80      	cmp	r3, #128	@ 0x80
 8007968:	d827      	bhi.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800796a:	2b60      	cmp	r3, #96	@ 0x60
 800796c:	d02e      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800796e:	2b60      	cmp	r3, #96	@ 0x60
 8007970:	d823      	bhi.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007972:	2b40      	cmp	r3, #64	@ 0x40
 8007974:	d006      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8007976:	2b40      	cmp	r3, #64	@ 0x40
 8007978:	d81f      	bhi.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800797a:	2b00      	cmp	r3, #0
 800797c:	d009      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800797e:	2b20      	cmp	r3, #32
 8007980:	d011      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007982:	e01a      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007984:	4b10      	ldr	r3, [pc, #64]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007988:	4a0f      	ldr	r2, [pc, #60]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800798a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800798e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007990:	e01d      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007992:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007996:	3308      	adds	r3, #8
 8007998:	4618      	mov	r0, r3
 800799a:	f002 f9d1 	bl	8009d40 <RCCEx_PLL2_Config>
 800799e:	4603      	mov	r3, r0
 80079a0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80079a4:	e013      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80079a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80079aa:	332c      	adds	r3, #44	@ 0x2c
 80079ac:	4618      	mov	r0, r3
 80079ae:	f002 fa5f 	bl	8009e70 <RCCEx_PLL3_Config>
 80079b2:	4603      	mov	r3, r0
 80079b4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80079b8:	e009      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80079c0:	e005      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80079c2:	bf00      	nop
 80079c4:	e003      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80079c6:	bf00      	nop
 80079c8:	46020c00 	.word	0x46020c00
        break;
 80079cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ce:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10d      	bne.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80079d6:	4bb6      	ldr	r3, [pc, #728]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80079d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079dc:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80079e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80079e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079e8:	4ab1      	ldr	r2, [pc, #708]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80079ea:	430b      	orrs	r3, r1
 80079ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80079f0:	e003      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80079f6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80079fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80079fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a02:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007a06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a08:	2300      	movs	r3, #0
 8007a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a0c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007a10:	460b      	mov	r3, r1
 8007a12:	4313      	orrs	r3, r2
 8007a14:	d053      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007a16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a22:	d033      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007a24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a28:	d82c      	bhi.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007a2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a2e:	d02f      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007a30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a34:	d826      	bhi.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007a36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a3a:	d008      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a40:	d820      	bhi.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00a      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a4a:	d011      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8007a4c:	e01a      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007a4e:	4b98      	ldr	r3, [pc, #608]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a52:	4a97      	ldr	r2, [pc, #604]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a58:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007a5a:	e01a      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a60:	3308      	adds	r3, #8
 8007a62:	4618      	mov	r0, r3
 8007a64:	f002 f96c 	bl	8009d40 <RCCEx_PLL2_Config>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007a6e:	e010      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a74:	332c      	adds	r3, #44	@ 0x2c
 8007a76:	4618      	mov	r0, r3
 8007a78:	f002 f9fa 	bl	8009e70 <RCCEx_PLL3_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007a82:	e006      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007a8a:	e002      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8007a8c:	bf00      	nop
 8007a8e:	e000      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8007a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a92:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10d      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007a9a:	4b85      	ldr	r3, [pc, #532]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007a9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007aa0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007aa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007aac:	4a80      	ldr	r2, [pc, #512]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007aae:	430b      	orrs	r3, r1
 8007ab0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007ab4:	e003      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007aba:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007abe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007aca:	663b      	str	r3, [r7, #96]	@ 0x60
 8007acc:	2300      	movs	r3, #0
 8007ace:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ad0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	d046      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007ada:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ade:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ae2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007ae6:	d028      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007ae8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007aec:	d821      	bhi.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007aee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007af2:	d022      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007af4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007af8:	d81b      	bhi.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007afa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007afe:	d01c      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007b00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b04:	d815      	bhi.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007b06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b0a:	d008      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007b0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b10:	d80f      	bhi.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d011      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007b16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b1a:	d00e      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007b1c:	e009      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b22:	3308      	adds	r3, #8
 8007b24:	4618      	mov	r0, r3
 8007b26:	f002 f90b 	bl	8009d40 <RCCEx_PLL2_Config>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007b30:	e004      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007b38:	e000      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8007b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b3c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10d      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007b44:	4b5a      	ldr	r3, [pc, #360]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007b46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b4a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007b4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007b56:	4a56      	ldr	r2, [pc, #344]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007b58:	430b      	orrs	r3, r1
 8007b5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007b5e:	e003      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b60:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007b64:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007b68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b70:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007b74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b76:	2300      	movs	r3, #0
 8007b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4313      	orrs	r3, r2
 8007b82:	d03f      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8007b84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	d81e      	bhi.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8007b90:	a201      	add	r2, pc, #4	@ (adr r2, 8007b98 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8007b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b96:	bf00      	nop
 8007b98:	08007bd7 	.word	0x08007bd7
 8007b9c:	08007bad 	.word	0x08007bad
 8007ba0:	08007bbb 	.word	0x08007bbb
 8007ba4:	08007bd7 	.word	0x08007bd7
 8007ba8:	08007bd7 	.word	0x08007bd7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007bac:	4b40      	ldr	r3, [pc, #256]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb0:	4a3f      	ldr	r2, [pc, #252]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007bb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bb6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007bb8:	e00e      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007bba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bbe:	332c      	adds	r3, #44	@ 0x2c
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f002 f955 	bl	8009e70 <RCCEx_PLL3_Config>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007bcc:	e004      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007bd4:	e000      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8007bd6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007bd8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10d      	bne.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007be0:	4b33      	ldr	r3, [pc, #204]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007be2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007be6:	f023 0107 	bic.w	r1, r3, #7
 8007bea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf2:	4a2f      	ldr	r2, [pc, #188]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007bfa:	e003      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007c00:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007c04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007c10:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c12:	2300      	movs	r3, #0
 8007c14:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	d04d      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007c20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c2c:	d028      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8007c2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c32:	d821      	bhi.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007c34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c38:	d024      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8007c3a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c3e:	d81b      	bhi.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007c40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c44:	d00e      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8007c46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c4a:	d815      	bhi.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d01b      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8007c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c54:	d110      	bne.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c56:	4b16      	ldr	r3, [pc, #88]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c5a:	4a15      	ldr	r2, [pc, #84]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c60:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007c62:	e012      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c68:	332c      	adds	r3, #44	@ 0x2c
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f002 f900 	bl	8009e70 <RCCEx_PLL3_Config>
 8007c70:	4603      	mov	r3, r0
 8007c72:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007c76:	e008      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007c7e:	e004      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8007c80:	bf00      	nop
 8007c82:	e002      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8007c84:	bf00      	nop
 8007c86:	e000      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8007c88:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007c8a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d110      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007c92:	4b07      	ldr	r3, [pc, #28]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c98:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007c9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ca4:	4a02      	ldr	r2, [pc, #8]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007ca6:	430b      	orrs	r3, r1
 8007ca8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007cac:	e006      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007cae:	bf00      	nop
 8007cb0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007cb8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cca:	2300      	movs	r3, #0
 8007ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	f000 80b5 	beq.w	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ce0:	4b9d      	ldr	r3, [pc, #628]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ce6:	f003 0304 	and.w	r3, r3, #4
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d113      	bne.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cee:	4b9a      	ldr	r3, [pc, #616]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cf4:	4a98      	ldr	r2, [pc, #608]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007cf6:	f043 0304 	orr.w	r3, r3, #4
 8007cfa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007cfe:	4b96      	ldr	r3, [pc, #600]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d04:	f003 0304 	and.w	r3, r3, #4
 8007d08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007d16:	4b91      	ldr	r3, [pc, #580]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1a:	4a90      	ldr	r2, [pc, #576]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d1c:	f043 0301 	orr.w	r3, r3, #1
 8007d20:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d22:	f7fa ffb7 	bl	8002c94 <HAL_GetTick>
 8007d26:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007d2a:	e00b      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d2c:	f7fa ffb2 	bl	8002c94 <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d903      	bls.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007d42:	e005      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007d44:	4b85      	ldr	r3, [pc, #532]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d0ed      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8007d50:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d165      	bne.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007d58:	4b7f      	ldr	r3, [pc, #508]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d023      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8007d6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d72:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8007d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d01b      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d7e:	4b76      	ldr	r3, [pc, #472]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d8c:	4b72      	ldr	r3, [pc, #456]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d92:	4a71      	ldr	r2, [pc, #452]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d9c:	4b6e      	ldr	r3, [pc, #440]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007da2:	4a6d      	ldr	r2, [pc, #436]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007da4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007da8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007dac:	4a6a      	ldr	r2, [pc, #424]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007db2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d019      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc2:	f7fa ff67 	bl	8002c94 <HAL_GetTick>
 8007dc6:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dca:	e00d      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dcc:	f7fa ff62 	bl	8002c94 <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dd6:	1ad2      	subs	r2, r2, r3
 8007dd8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d903      	bls.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8007de6:	e006      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007de8:	4b5b      	ldr	r3, [pc, #364]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007dea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0ea      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8007df6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10d      	bne.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007dfe:	4b56      	ldr	r3, [pc, #344]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e04:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e0c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007e10:	4a51      	ldr	r2, [pc, #324]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007e12:	430b      	orrs	r3, r1
 8007e14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007e18:	e008      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e1a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007e1e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8007e22:	e003      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e24:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007e28:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e2c:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d107      	bne.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e34:	4b48      	ldr	r3, [pc, #288]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e3a:	4a47      	ldr	r2, [pc, #284]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007e3c:	f023 0304 	bic.w	r3, r3, #4
 8007e40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007e44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007e50:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e52:	2300      	movs	r3, #0
 8007e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e56:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	d042      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007e60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e68:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007e6c:	d022      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8007e6e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007e72:	d81b      	bhi.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007e74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e78:	d011      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8007e7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e7e:	d815      	bhi.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d019      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8007e84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e88:	d110      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e8e:	3308      	adds	r3, #8
 8007e90:	4618      	mov	r0, r3
 8007e92:	f001 ff55 	bl	8009d40 <RCCEx_PLL2_Config>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007e9c:	e00d      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea2:	4a2d      	ldr	r2, [pc, #180]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ea8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007eaa:	e006      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007eb2:	e002      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8007eb4:	bf00      	nop
 8007eb6:	e000      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8007eb8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007eba:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10d      	bne.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007ec2:	4b25      	ldr	r3, [pc, #148]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ec8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007ecc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ed0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ed4:	4a20      	ldr	r2, [pc, #128]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007ed6:	430b      	orrs	r3, r1
 8007ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007edc:	e003      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ede:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007ee2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ee6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ef8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007efc:	460b      	mov	r3, r1
 8007efe:	4313      	orrs	r3, r2
 8007f00:	d032      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007f02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f0e:	d00b      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007f10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f14:	d804      	bhi.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d008      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f1e:	d007      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007f26:	e004      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8007f28:	bf00      	nop
 8007f2a:	e002      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8007f2c:	bf00      	nop
 8007f2e:	e000      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8007f30:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007f32:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d112      	bne.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007f3a:	4b07      	ldr	r3, [pc, #28]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007f3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f40:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f4c:	4a02      	ldr	r2, [pc, #8]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007f4e:	430b      	orrs	r3, r1
 8007f50:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007f54:	e008      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8007f56:	bf00      	nop
 8007f58:	46020c00 	.word	0x46020c00
 8007f5c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f60:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007f64:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007f68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007f74:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f76:	2300      	movs	r3, #0
 8007f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f7a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4313      	orrs	r3, r2
 8007f82:	d019      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007f84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f90:	d105      	bne.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f92:	4b88      	ldr	r3, [pc, #544]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f96:	4a87      	ldr	r2, [pc, #540]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f9c:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007f9e:	4b85      	ldr	r3, [pc, #532]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007fa0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007fa4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007fa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fb0:	4a80      	ldr	r2, [pc, #512]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007fb2:	430b      	orrs	r3, r1
 8007fb4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007fb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	d00c      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007fd4:	4b77      	ldr	r3, [pc, #476]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007fde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007fe6:	4973      	ldr	r1, [pc, #460]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007fee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007ffa:	623b      	str	r3, [r7, #32]
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008000:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008004:	460b      	mov	r3, r1
 8008006:	4313      	orrs	r3, r2
 8008008:	d00c      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800800a:	4b6a      	ldr	r3, [pc, #424]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800800c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008010:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008014:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008018:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800801c:	4965      	ldr	r1, [pc, #404]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800801e:	4313      	orrs	r3, r2
 8008020:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008024:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008030:	61bb      	str	r3, [r7, #24]
 8008032:	2300      	movs	r3, #0
 8008034:	61fb      	str	r3, [r7, #28]
 8008036:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800803a:	460b      	mov	r3, r1
 800803c:	4313      	orrs	r3, r2
 800803e:	d00c      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008040:	4b5c      	ldr	r3, [pc, #368]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008042:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008046:	f023 0218 	bic.w	r2, r3, #24
 800804a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800804e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008052:	4958      	ldr	r1, [pc, #352]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008054:	4313      	orrs	r3, r2
 8008056:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800805a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8008066:	613b      	str	r3, [r7, #16]
 8008068:	2300      	movs	r3, #0
 800806a:	617b      	str	r3, [r7, #20]
 800806c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008070:	460b      	mov	r3, r1
 8008072:	4313      	orrs	r3, r2
 8008074:	d032      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8008076:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800807a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800807e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008082:	d105      	bne.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008084:	4b4b      	ldr	r3, [pc, #300]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008088:	4a4a      	ldr	r2, [pc, #296]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800808a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800808e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8008090:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008094:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008098:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800809c:	d108      	bne.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800809e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080a2:	3308      	adds	r3, #8
 80080a4:	4618      	mov	r0, r3
 80080a6:	f001 fe4b 	bl	8009d40 <RCCEx_PLL2_Config>
 80080aa:	4603      	mov	r3, r0
 80080ac:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80080b0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10d      	bne.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80080b8:	4b3e      	ldr	r3, [pc, #248]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80080ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80080c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80080ca:	493a      	ldr	r1, [pc, #232]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80080d2:	e003      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80080d8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80080dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80080e8:	60bb      	str	r3, [r7, #8]
 80080ea:	2300      	movs	r3, #0
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80080f2:	460b      	mov	r3, r1
 80080f4:	4313      	orrs	r3, r2
 80080f6:	d03a      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80080f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008100:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008104:	d00e      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8008106:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800810a:	d815      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d017      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8008110:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008114:	d110      	bne.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008116:	4b27      	ldr	r3, [pc, #156]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811a:	4a26      	ldr	r2, [pc, #152]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800811c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008120:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008122:	e00e      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008124:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008128:	3308      	adds	r3, #8
 800812a:	4618      	mov	r0, r3
 800812c:	f001 fe08 	bl	8009d40 <RCCEx_PLL2_Config>
 8008130:	4603      	mov	r3, r0
 8008132:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008136:	e004      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800813e:	e000      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8008140:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008142:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10d      	bne.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800814a:	4b1a      	ldr	r3, [pc, #104]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800814c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008150:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008154:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800815c:	4915      	ldr	r1, [pc, #84]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800815e:	4313      	orrs	r3, r2
 8008160:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008164:	e003      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008166:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800816a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800816e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	2300      	movs	r3, #0
 800817e:	607b      	str	r3, [r7, #4]
 8008180:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008184:	460b      	mov	r3, r1
 8008186:	4313      	orrs	r3, r2
 8008188:	d00c      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800818a:	4b0a      	ldr	r3, [pc, #40]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800818c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008190:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8008194:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008198:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800819c:	4905      	ldr	r1, [pc, #20]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80081a4:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	37e0      	adds	r7, #224	@ 0xe0
 80081ac:	46bd      	mov	sp, r7
 80081ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081b2:	bf00      	nop
 80081b4:	46020c00 	.word	0x46020c00

080081b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b089      	sub	sp, #36	@ 0x24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80081c0:	4ba6      	ldr	r3, [pc, #664]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80081ca:	4ba4      	ldr	r3, [pc, #656]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ce:	f003 0303 	and.w	r3, r3, #3
 80081d2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80081d4:	4ba1      	ldr	r3, [pc, #644]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d8:	0a1b      	lsrs	r3, r3, #8
 80081da:	f003 030f 	and.w	r3, r3, #15
 80081de:	3301      	adds	r3, #1
 80081e0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80081e2:	4b9e      	ldr	r3, [pc, #632]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e6:	091b      	lsrs	r3, r3, #4
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80081ee:	4b9b      	ldr	r3, [pc, #620]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f2:	08db      	lsrs	r3, r3, #3
 80081f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	fb02 f303 	mul.w	r3, r2, r3
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008206:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b03      	cmp	r3, #3
 800820e:	d062      	beq.n	80082d6 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	2b03      	cmp	r3, #3
 8008214:	f200 8081 	bhi.w	800831a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d024      	beq.n	8008268 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2b02      	cmp	r3, #2
 8008222:	d17a      	bne.n	800831a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	ee07 3a90 	vmov	s15, r3
 800822a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800822e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8008232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008236:	4b89      	ldr	r3, [pc, #548]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800823a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800823e:	ee07 3a90 	vmov	s15, r3
 8008242:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008246:	ed97 6a02 	vldr	s12, [r7, #8]
 800824a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008464 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800824e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008252:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800825a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800825e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008262:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008266:	e08f      	b.n	8008388 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008268:	4b7c      	ldr	r3, [pc, #496]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8008274:	4b79      	ldr	r3, [pc, #484]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	0f1b      	lsrs	r3, r3, #28
 800827a:	f003 030f 	and.w	r3, r3, #15
 800827e:	e006      	b.n	800828e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8008280:	4b76      	ldr	r3, [pc, #472]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008282:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008286:	041b      	lsls	r3, r3, #16
 8008288:	0f1b      	lsrs	r3, r3, #28
 800828a:	f003 030f 	and.w	r3, r3, #15
 800828e:	4a76      	ldr	r2, [pc, #472]	@ (8008468 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008294:	ee07 3a90 	vmov	s15, r3
 8008298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	ee07 3a90 	vmov	s15, r3
 80082b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80082b8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008464 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80082bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80082cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082d4:	e058      	b.n	8008388 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	ee07 3a90 	vmov	s15, r3
 80082dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80082e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082e8:	4b5c      	ldr	r3, [pc, #368]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80082ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f0:	ee07 3a90 	vmov	s15, r3
 80082f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80082f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80082fc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008464 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008300:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008304:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008308:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800830c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008314:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008318:	e036      	b.n	8008388 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800831a:	4b50      	ldr	r3, [pc, #320]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d005      	beq.n	8008332 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8008326:	4b4d      	ldr	r3, [pc, #308]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	0f1b      	lsrs	r3, r3, #28
 800832c:	f003 030f 	and.w	r3, r3, #15
 8008330:	e006      	b.n	8008340 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8008332:	4b4a      	ldr	r3, [pc, #296]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008334:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008338:	041b      	lsls	r3, r3, #16
 800833a:	0f1b      	lsrs	r3, r3, #28
 800833c:	f003 030f 	and.w	r3, r3, #15
 8008340:	4a49      	ldr	r2, [pc, #292]	@ (8008468 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	ee07 3a90 	vmov	s15, r3
 8008354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008366:	ed97 6a02 	vldr	s12, [r7, #8]
 800836a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008464 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800836e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800837a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800837e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008382:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008386:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008388:	4b34      	ldr	r3, [pc, #208]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800838a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800838c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d017      	beq.n	80083c4 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008394:	4b31      	ldr	r3, [pc, #196]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008398:	0a5b      	lsrs	r3, r3, #9
 800839a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800839e:	ee07 3a90 	vmov	s15, r3
 80083a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80083a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083aa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80083ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80083b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083ba:	ee17 2a90 	vmov	r2, s15
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	601a      	str	r2, [r3, #0]
 80083c2:	e002      	b.n	80083ca <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80083ca:	4b24      	ldr	r3, [pc, #144]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80083cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d017      	beq.n	8008406 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80083d6:	4b21      	ldr	r3, [pc, #132]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80083d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083da:	0c1b      	lsrs	r3, r3, #16
 80083dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083e0:	ee07 3a90 	vmov	s15, r3
 80083e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80083e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083ec:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80083f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083fc:	ee17 2a90 	vmov	r2, s15
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	605a      	str	r2, [r3, #4]
 8008404:	e002      	b.n	800840c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800840c:	4b13      	ldr	r3, [pc, #76]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800840e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008410:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d017      	beq.n	8008448 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008418:	4b10      	ldr	r3, [pc, #64]	@ (800845c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800841a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800841c:	0e1b      	lsrs	r3, r3, #24
 800841e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008422:	ee07 3a90 	vmov	s15, r3
 8008426:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800842a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800842e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008432:	edd7 6a07 	vldr	s13, [r7, #28]
 8008436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800843a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800843e:	ee17 2a90 	vmov	r2, s15
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008446:	e002      	b.n	800844e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	609a      	str	r2, [r3, #8]
}
 800844e:	bf00      	nop
 8008450:	3724      	adds	r7, #36	@ 0x24
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	46020c00 	.word	0x46020c00
 8008460:	4b742400 	.word	0x4b742400
 8008464:	46000000 	.word	0x46000000
 8008468:	0800e5e8 	.word	0x0800e5e8

0800846c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800846c:	b480      	push	{r7}
 800846e:	b089      	sub	sp, #36	@ 0x24
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008474:	4ba6      	ldr	r3, [pc, #664]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800847c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800847e:	4ba4      	ldr	r3, [pc, #656]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008482:	f003 0303 	and.w	r3, r3, #3
 8008486:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8008488:	4ba1      	ldr	r3, [pc, #644]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800848a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848c:	0a1b      	lsrs	r3, r3, #8
 800848e:	f003 030f 	and.w	r3, r3, #15
 8008492:	3301      	adds	r3, #1
 8008494:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008496:	4b9e      	ldr	r3, [pc, #632]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849a:	091b      	lsrs	r3, r3, #4
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80084a2:	4b9b      	ldr	r3, [pc, #620]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80084a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a6:	08db      	lsrs	r3, r3, #3
 80084a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	fb02 f303 	mul.w	r3, r2, r3
 80084b2:	ee07 3a90 	vmov	s15, r3
 80084b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ba:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d062      	beq.n	800858a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	f200 8081 	bhi.w	80085ce <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d024      	beq.n	800851c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d17a      	bne.n	80085ce <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	ee07 3a90 	vmov	s15, r3
 80084de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80084e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ea:	4b89      	ldr	r3, [pc, #548]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80084ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084f2:	ee07 3a90 	vmov	s15, r3
 80084f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80084fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80084fe:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008718 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008502:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008506:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800850a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800850e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008516:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800851a:	e08f      	b.n	800863c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800851c:	4b7c      	ldr	r3, [pc, #496]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d005      	beq.n	8008534 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008528:	4b79      	ldr	r3, [pc, #484]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	0f1b      	lsrs	r3, r3, #28
 800852e:	f003 030f 	and.w	r3, r3, #15
 8008532:	e006      	b.n	8008542 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8008534:	4b76      	ldr	r3, [pc, #472]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008536:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800853a:	041b      	lsls	r3, r3, #16
 800853c:	0f1b      	lsrs	r3, r3, #28
 800853e:	f003 030f 	and.w	r3, r3, #15
 8008542:	4a76      	ldr	r2, [pc, #472]	@ (800871c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008548:	ee07 3a90 	vmov	s15, r3
 800854c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	ee07 3a90 	vmov	s15, r3
 8008556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	ee07 3a90 	vmov	s15, r3
 8008564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008568:	ed97 6a02 	vldr	s12, [r7, #8]
 800856c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008718 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008570:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008574:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008578:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800857c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008584:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008588:	e058      	b.n	800863c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008594:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800859c:	4b5c      	ldr	r3, [pc, #368]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800859e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a4:	ee07 3a90 	vmov	s15, r3
 80085a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80085ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80085b0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008718 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80085b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80085b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80085bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80085c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085cc:	e036      	b.n	800863c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80085ce:	4b50      	ldr	r3, [pc, #320]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d005      	beq.n	80085e6 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80085da:	4b4d      	ldr	r3, [pc, #308]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	0f1b      	lsrs	r3, r3, #28
 80085e0:	f003 030f 	and.w	r3, r3, #15
 80085e4:	e006      	b.n	80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80085e6:	4b4a      	ldr	r3, [pc, #296]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80085e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80085ec:	041b      	lsls	r3, r3, #16
 80085ee:	0f1b      	lsrs	r3, r3, #28
 80085f0:	f003 030f 	and.w	r3, r3, #15
 80085f4:	4a49      	ldr	r2, [pc, #292]	@ (800871c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80085f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	ee07 3a90 	vmov	s15, r3
 8008608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861a:	ed97 6a02 	vldr	s12, [r7, #8]
 800861e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008718 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800862a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800862e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008636:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800863a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800863c:	4b34      	ldr	r3, [pc, #208]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800863e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d017      	beq.n	8008678 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008648:	4b31      	ldr	r3, [pc, #196]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800864a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800864c:	0a5b      	lsrs	r3, r3, #9
 800864e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008652:	ee07 3a90 	vmov	s15, r3
 8008656:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800865a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800865e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008662:	edd7 6a07 	vldr	s13, [r7, #28]
 8008666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800866a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800866e:	ee17 2a90 	vmov	r2, s15
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	e002      	b.n	800867e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800867e:	4b24      	ldr	r3, [pc, #144]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d017      	beq.n	80086ba <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800868a:	4b21      	ldr	r3, [pc, #132]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800868c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800868e:	0c1b      	lsrs	r3, r3, #16
 8008690:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008694:	ee07 3a90 	vmov	s15, r3
 8008698:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800869c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086a0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80086a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80086a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086b0:	ee17 2a90 	vmov	r2, s15
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	605a      	str	r2, [r3, #4]
 80086b8:	e002      	b.n	80086c0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80086c0:	4b13      	ldr	r3, [pc, #76]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80086c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d017      	beq.n	80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80086cc:	4b10      	ldr	r3, [pc, #64]	@ (8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80086ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086d0:	0e1b      	lsrs	r3, r3, #24
 80086d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086d6:	ee07 3a90 	vmov	s15, r3
 80086da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80086de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086e2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80086e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80086ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086f2:	ee17 2a90 	vmov	r2, s15
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80086fa:	e002      	b.n	8008702 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	609a      	str	r2, [r3, #8]
}
 8008702:	bf00      	nop
 8008704:	3724      	adds	r7, #36	@ 0x24
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	46020c00 	.word	0x46020c00
 8008714:	4b742400 	.word	0x4b742400
 8008718:	46000000 	.word	0x46000000
 800871c:	0800e5e8 	.word	0x0800e5e8

08008720 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008720:	b480      	push	{r7}
 8008722:	b089      	sub	sp, #36	@ 0x24
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008728:	4ba6      	ldr	r3, [pc, #664]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800872a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800872c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008730:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008732:	4ba4      	ldr	r3, [pc, #656]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800873c:	4ba1      	ldr	r3, [pc, #644]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800873e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008740:	0a1b      	lsrs	r3, r3, #8
 8008742:	f003 030f 	and.w	r3, r3, #15
 8008746:	3301      	adds	r3, #1
 8008748:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800874a:	4b9e      	ldr	r3, [pc, #632]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800874c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800874e:	091b      	lsrs	r3, r3, #4
 8008750:	f003 0301 	and.w	r3, r3, #1
 8008754:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008756:	4b9b      	ldr	r3, [pc, #620]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800875a:	08db      	lsrs	r3, r3, #3
 800875c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	fb02 f303 	mul.w	r3, r2, r3
 8008766:	ee07 3a90 	vmov	s15, r3
 800876a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800876e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2b03      	cmp	r3, #3
 8008776:	d062      	beq.n	800883e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	2b03      	cmp	r3, #3
 800877c:	f200 8081 	bhi.w	8008882 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d024      	beq.n	80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	2b02      	cmp	r3, #2
 800878a:	d17a      	bne.n	8008882 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	ee07 3a90 	vmov	s15, r3
 8008792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008796:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80089c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800879a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879e:	4b89      	ldr	r3, [pc, #548]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a6:	ee07 3a90 	vmov	s15, r3
 80087aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80087ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80087b2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80089cc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80087b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80087ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80087be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80087c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ca:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80087ce:	e08f      	b.n	80088f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80087d0:	4b7c      	ldr	r3, [pc, #496]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d005      	beq.n	80087e8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80087dc:	4b79      	ldr	r3, [pc, #484]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	0f1b      	lsrs	r3, r3, #28
 80087e2:	f003 030f 	and.w	r3, r3, #15
 80087e6:	e006      	b.n	80087f6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80087e8:	4b76      	ldr	r3, [pc, #472]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087ee:	041b      	lsls	r3, r3, #16
 80087f0:	0f1b      	lsrs	r3, r3, #28
 80087f2:	f003 030f 	and.w	r3, r3, #15
 80087f6:	4a76      	ldr	r2, [pc, #472]	@ (80089d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80087f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087fc:	ee07 3a90 	vmov	s15, r3
 8008800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	ee07 3a90 	vmov	s15, r3
 800880a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	ee07 3a90 	vmov	s15, r3
 8008818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008820:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80089cc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008824:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008828:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800882c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008830:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008838:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800883c:	e058      	b.n	80088f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	ee07 3a90 	vmov	s15, r3
 8008844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008848:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80089c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800884c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008850:	4b5c      	ldr	r3, [pc, #368]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008858:	ee07 3a90 	vmov	s15, r3
 800885c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008860:	ed97 6a02 	vldr	s12, [r7, #8]
 8008864:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80089cc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008868:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800886c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008870:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008874:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800887c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008880:	e036      	b.n	80088f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008882:	4b50      	ldr	r3, [pc, #320]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d005      	beq.n	800889a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800888e:	4b4d      	ldr	r3, [pc, #308]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	0f1b      	lsrs	r3, r3, #28
 8008894:	f003 030f 	and.w	r3, r3, #15
 8008898:	e006      	b.n	80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800889a:	4b4a      	ldr	r3, [pc, #296]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800889c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80088a0:	041b      	lsls	r3, r3, #16
 80088a2:	0f1b      	lsrs	r3, r3, #28
 80088a4:	f003 030f 	and.w	r3, r3, #15
 80088a8:	4a49      	ldr	r2, [pc, #292]	@ (80089d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80088aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ae:	ee07 3a90 	vmov	s15, r3
 80088b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	ee07 3a90 	vmov	s15, r3
 80088bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	ee07 3a90 	vmov	s15, r3
 80088ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80088d2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80089cc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80088d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80088e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088ee:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80088f0:	4b34      	ldr	r3, [pc, #208]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d017      	beq.n	800892c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80088fc:	4b31      	ldr	r3, [pc, #196]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008900:	0a5b      	lsrs	r3, r3, #9
 8008902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008906:	ee07 3a90 	vmov	s15, r3
 800890a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800890e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008912:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008916:	edd7 6a07 	vldr	s13, [r7, #28]
 800891a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800891e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008922:	ee17 2a90 	vmov	r2, s15
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	e002      	b.n	8008932 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008932:	4b24      	ldr	r3, [pc, #144]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d017      	beq.n	800896e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800893e:	4b21      	ldr	r3, [pc, #132]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008942:	0c1b      	lsrs	r3, r3, #16
 8008944:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008948:	ee07 3a90 	vmov	s15, r3
 800894c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008950:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008954:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008958:	edd7 6a07 	vldr	s13, [r7, #28]
 800895c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008964:	ee17 2a90 	vmov	r2, s15
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	605a      	str	r2, [r3, #4]
 800896c:	e002      	b.n	8008974 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008974:	4b13      	ldr	r3, [pc, #76]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008978:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d017      	beq.n	80089b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008980:	4b10      	ldr	r3, [pc, #64]	@ (80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008984:	0e1b      	lsrs	r3, r3, #24
 8008986:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800898a:	ee07 3a90 	vmov	s15, r3
 800898e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008992:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008996:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800899a:	edd7 6a07 	vldr	s13, [r7, #28]
 800899e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089a6:	ee17 2a90 	vmov	r2, s15
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80089ae:	e002      	b.n	80089b6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	609a      	str	r2, [r3, #8]
}
 80089b6:	bf00      	nop
 80089b8:	3724      	adds	r7, #36	@ 0x24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	46020c00 	.word	0x46020c00
 80089c8:	4b742400 	.word	0x4b742400
 80089cc:	46000000 	.word	0x46000000
 80089d0:	0800e5e8 	.word	0x0800e5e8

080089d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08e      	sub	sp, #56	@ 0x38
 80089d8:	af00      	add	r7, sp, #0
 80089da:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80089de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089e2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80089e6:	430b      	orrs	r3, r1
 80089e8:	d145      	bne.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80089ea:	4baa      	ldr	r3, [pc, #680]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80089ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089f4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80089f6:	4ba7      	ldr	r3, [pc, #668]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80089f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089fc:	f003 0302 	and.w	r3, r3, #2
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d108      	bne.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a0a:	d104      	bne.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008a0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a12:	f001 b987 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008a16:	4b9f      	ldr	r3, [pc, #636]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a24:	d114      	bne.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a2c:	d110      	bne.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a2e:	4b99      	ldr	r3, [pc, #612]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a3c:	d103      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8008a3e:	23fa      	movs	r3, #250	@ 0xfa
 8008a40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a42:	f001 b96f 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008a46:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008a4a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a4c:	f001 b96a 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008a50:	4b90      	ldr	r3, [pc, #576]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a5c:	d107      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a64:	d103      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8008a66:	4b8c      	ldr	r3, [pc, #560]	@ (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8008a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a6a:	f001 b95b 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a72:	f001 b957 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a7a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008a7e:	430b      	orrs	r3, r1
 8008a80:	d151      	bne.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008a82:	4b84      	ldr	r3, [pc, #528]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008a84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008a88:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008a8c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a90:	2b80      	cmp	r3, #128	@ 0x80
 8008a92:	d035      	beq.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a96:	2b80      	cmp	r3, #128	@ 0x80
 8008a98:	d841      	bhi.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9c:	2b60      	cmp	r3, #96	@ 0x60
 8008a9e:	d02a      	beq.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa2:	2b60      	cmp	r3, #96	@ 0x60
 8008aa4:	d83b      	bhi.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa8:	2b40      	cmp	r3, #64	@ 0x40
 8008aaa:	d009      	beq.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aae:	2b40      	cmp	r3, #64	@ 0x40
 8008ab0:	d835      	bhi.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00c      	beq.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aba:	2b20      	cmp	r3, #32
 8008abc:	d012      	beq.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008abe:	e02e      	b.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ac0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7ff fb77 	bl	80081b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008acc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ace:	f001 b929 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ad2:	f107 0318 	add.w	r3, r7, #24
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7ff fcc8 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ae0:	f001 b920 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ae4:	f107 030c 	add.w	r3, r7, #12
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff fe19 	bl	8008720 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008af2:	f001 b917 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008af6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008afa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008afc:	f001 b912 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b00:	4b64      	ldr	r3, [pc, #400]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b0c:	d103      	bne.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8008b0e:	4b63      	ldr	r3, [pc, #396]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008b10:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008b12:	f001 b907 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b1a:	f001 b903 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b22:	f001 b8ff 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008b26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b2a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008b2e:	430b      	orrs	r3, r1
 8008b30:	d158      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008b32:	4b58      	ldr	r3, [pc, #352]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008b34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b3c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b44:	d03b      	beq.n	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b4c:	d846      	bhi.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b54:	d02e      	beq.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8008b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b5c:	d83e      	bhi.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b64:	d00b      	beq.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b6c:	d836      	bhi.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00d      	beq.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b7a:	d012      	beq.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8008b7c:	e02e      	b.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7ff fb18 	bl	80081b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b8c:	f001 b8ca 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b90:	f107 0318 	add.w	r3, r7, #24
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7ff fc69 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b9e:	f001 b8c1 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ba2:	f107 030c 	add.w	r3, r7, #12
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7ff fdba 	bl	8008720 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bb0:	f001 b8b8 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008bb4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008bb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bba:	f001 b8b3 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bbe:	4b35      	ldr	r3, [pc, #212]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bca:	d103      	bne.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8008bcc:	4b33      	ldr	r3, [pc, #204]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008bce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008bd0:	f001 b8a8 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bd8:	f001 b8a4 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008be0:	f001 b8a0 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8008be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008be8:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8008bec:	430b      	orrs	r3, r1
 8008bee:	d16e      	bne.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008bf0:	4b28      	ldr	r3, [pc, #160]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008bf6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008bfa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008c02:	d034      	beq.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8008c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c06:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008c0a:	d85c      	bhi.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8008c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c12:	d00b      	beq.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8008c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c1a:	d854      	bhi.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d016      	beq.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8008c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c28:	d009      	beq.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008c2a:	e04c      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7ff fac1 	bl	80081b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c3a:	f001 b873 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c3e:	f107 0318 	add.w	r3, r7, #24
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7ff fc12 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c4c:	f001 b86a 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008c50:	4b10      	ldr	r3, [pc, #64]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c5c:	d103      	bne.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8008c5e:	4b10      	ldr	r3, [pc, #64]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c60:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008c62:	f001 b85f 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008c66:	2300      	movs	r3, #0
 8008c68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c6a:	f001 b85b 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008c6e:	4b09      	ldr	r3, [pc, #36]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0320 	and.w	r3, r3, #32
 8008c76:	2b20      	cmp	r3, #32
 8008c78:	d121      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008c7a:	4b06      	ldr	r3, [pc, #24]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00e      	beq.n	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8008c86:	4b03      	ldr	r3, [pc, #12]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	0e1b      	lsrs	r3, r3, #24
 8008c8c:	f003 030f 	and.w	r3, r3, #15
 8008c90:	e00f      	b.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8008c92:	bf00      	nop
 8008c94:	46020c00 	.word	0x46020c00
 8008c98:	0007a120 	.word	0x0007a120
 8008c9c:	00f42400 	.word	0x00f42400
 8008ca0:	02dc6c00 	.word	0x02dc6c00
 8008ca4:	4ba7      	ldr	r3, [pc, #668]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008ca6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008caa:	041b      	lsls	r3, r3, #16
 8008cac:	0e1b      	lsrs	r3, r3, #24
 8008cae:	f003 030f 	and.w	r3, r3, #15
 8008cb2:	4aa5      	ldr	r2, [pc, #660]	@ (8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8008cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cb8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008cba:	f001 b833 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cc2:	f001 b82f 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cca:	f001 b82b 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cd2:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8008cd6:	430b      	orrs	r3, r1
 8008cd8:	d17f      	bne.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008cda:	4b9a      	ldr	r3, [pc, #616]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008cdc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ce0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ce4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d165      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008cec:	4b95      	ldr	r3, [pc, #596]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008cf2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008cf6:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008cfe:	d034      	beq.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d02:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008d06:	d853      	bhi.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d0e:	d00b      	beq.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8008d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d16:	d84b      	bhi.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d016      	beq.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d24:	d009      	beq.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008d26:	e043      	b.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7ff fa43 	bl	80081b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d34:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008d36:	f000 bff5 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d3a:	f107 0318 	add.w	r3, r7, #24
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff fb94 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008d48:	f000 bfec 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008d4c:	4b7d      	ldr	r3, [pc, #500]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d58:	d103      	bne.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8008d5a:	4b7c      	ldr	r3, [pc, #496]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8008d5c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008d5e:	f000 bfe1 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008d66:	f000 bfdd 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008d6a:	4b76      	ldr	r3, [pc, #472]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0320 	and.w	r3, r3, #32
 8008d72:	2b20      	cmp	r3, #32
 8008d74:	d118      	bne.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008d76:	4b73      	ldr	r3, [pc, #460]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d005      	beq.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8008d82:	4b70      	ldr	r3, [pc, #448]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	0e1b      	lsrs	r3, r3, #24
 8008d88:	f003 030f 	and.w	r3, r3, #15
 8008d8c:	e006      	b.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8008d8e:	4b6d      	ldr	r3, [pc, #436]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008d90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d94:	041b      	lsls	r3, r3, #16
 8008d96:	0e1b      	lsrs	r3, r3, #24
 8008d98:	f003 030f 	and.w	r3, r3, #15
 8008d9c:	4a6a      	ldr	r2, [pc, #424]	@ (8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8008d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008da2:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008da4:	f000 bfbe 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008dac:	f000 bfba 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8008db0:	2300      	movs	r3, #0
 8008db2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008db4:	f000 bfb6 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8008db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008dbe:	d108      	bne.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7ff f9f7 	bl	80081b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dce:	f000 bfa9 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dd6:	f000 bfa5 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dde:	1e51      	subs	r1, r2, #1
 8008de0:	430b      	orrs	r3, r1
 8008de2:	d136      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008de4:	4b57      	ldr	r3, [pc, #348]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008dea:	f003 0303 	and.w	r3, r3, #3
 8008dee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d104      	bne.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008df6:	f7fe fb8d 	bl	8007514 <HAL_RCC_GetPCLK2Freq>
 8008dfa:	6378      	str	r0, [r7, #52]	@ 0x34
 8008dfc:	f000 bf92 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d104      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008e06:	f7fe fa55 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 8008e0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e0c:	f000 bf8a 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008e10:	4b4c      	ldr	r3, [pc, #304]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e1c:	d106      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d103      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8008e24:	4b4a      	ldr	r3, [pc, #296]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e28:	f000 bf7c 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008e2c:	4b45      	ldr	r3, [pc, #276]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d107      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3c:	2b03      	cmp	r3, #3
 8008e3e:	d104      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8008e40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e44:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e46:	f000 bf6d 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e4e:	f000 bf69 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8008e52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e56:	1e91      	subs	r1, r2, #2
 8008e58:	430b      	orrs	r3, r1
 8008e5a:	d136      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008e5c:	4b39      	ldr	r3, [pc, #228]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e62:	f003 030c 	and.w	r3, r3, #12
 8008e66:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d104      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008e6e:	f7fe fb3d 	bl	80074ec <HAL_RCC_GetPCLK1Freq>
 8008e72:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e74:	f000 bf56 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7a:	2b04      	cmp	r3, #4
 8008e7c:	d104      	bne.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008e7e:	f7fe fa19 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 8008e82:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e84:	f000 bf4e 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008e88:	4b2e      	ldr	r3, [pc, #184]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e94:	d106      	bne.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e98:	2b08      	cmp	r3, #8
 8008e9a:	d103      	bne.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8008e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008e9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ea0:	f000 bf40 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008ea4:	4b27      	ldr	r3, [pc, #156]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008eaa:	f003 0302 	and.w	r3, r3, #2
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d107      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb4:	2b0c      	cmp	r3, #12
 8008eb6:	d104      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8008eb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ebe:	f000 bf31 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ec6:	f000 bf2d 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008eca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ece:	1f11      	subs	r1, r2, #4
 8008ed0:	430b      	orrs	r3, r1
 8008ed2:	d13f      	bne.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008eda:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008ede:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d104      	bne.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008ee6:	f7fe fb01 	bl	80074ec <HAL_RCC_GetPCLK1Freq>
 8008eea:	6378      	str	r0, [r7, #52]	@ 0x34
 8008eec:	f000 bf1a 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef2:	2b10      	cmp	r3, #16
 8008ef4:	d104      	bne.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008ef6:	f7fe f9dd 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 8008efa:	6378      	str	r0, [r7, #52]	@ 0x34
 8008efc:	f000 bf12 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008f00:	4b10      	ldr	r3, [pc, #64]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f0c:	d106      	bne.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f10:	2b20      	cmp	r3, #32
 8008f12:	d103      	bne.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8008f14:	4b0e      	ldr	r3, [pc, #56]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f18:	f000 bf04 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008f1c:	4b09      	ldr	r3, [pc, #36]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f22:	f003 0302 	and.w	r3, r3, #2
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d107      	bne.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2c:	2b30      	cmp	r3, #48	@ 0x30
 8008f2e:	d104      	bne.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8008f30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f36:	f000 bef5 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f3e:	f000 bef1 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008f42:	bf00      	nop
 8008f44:	46020c00 	.word	0x46020c00
 8008f48:	0800e5e8 	.word	0x0800e5e8
 8008f4c:	02dc6c00 	.word	0x02dc6c00
 8008f50:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8008f54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f58:	f1a2 0108 	sub.w	r1, r2, #8
 8008f5c:	430b      	orrs	r3, r1
 8008f5e:	d136      	bne.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008f60:	4ba4      	ldr	r3, [pc, #656]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008f6a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d104      	bne.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008f72:	f7fe fabb 	bl	80074ec <HAL_RCC_GetPCLK1Freq>
 8008f76:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f78:	f000 bed4 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7e:	2b40      	cmp	r3, #64	@ 0x40
 8008f80:	d104      	bne.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008f82:	f7fe f997 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 8008f86:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f88:	f000 becc 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008f8c:	4b99      	ldr	r3, [pc, #612]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f98:	d106      	bne.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9c:	2b80      	cmp	r3, #128	@ 0x80
 8008f9e:	d103      	bne.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8008fa0:	4b95      	ldr	r3, [pc, #596]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8008fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fa4:	f000 bebe 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008fa8:	4b92      	ldr	r3, [pc, #584]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008faa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fae:	f003 0302 	and.w	r3, r3, #2
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d107      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb8:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fba:	d104      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8008fbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fc2:	f000 beaf 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fca:	f000 beab 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8008fce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fd2:	f1a2 0110 	sub.w	r1, r2, #16
 8008fd6:	430b      	orrs	r3, r1
 8008fd8:	d139      	bne.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008fda:	4b86      	ldr	r3, [pc, #536]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008fe0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fe4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d104      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008fec:	f7fe fa7e 	bl	80074ec <HAL_RCC_GetPCLK1Freq>
 8008ff0:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ff2:	f000 be97 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ffc:	d104      	bne.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008ffe:	f7fe f959 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 8009002:	6378      	str	r0, [r7, #52]	@ 0x34
 8009004:	f000 be8e 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009008:	4b7a      	ldr	r3, [pc, #488]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009010:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009014:	d107      	bne.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8009016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800901c:	d103      	bne.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 800901e:	4b76      	ldr	r3, [pc, #472]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8009020:	637b      	str	r3, [r7, #52]	@ 0x34
 8009022:	f000 be7f 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8009026:	4b73      	ldr	r3, [pc, #460]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800902c:	f003 0302 	and.w	r3, r3, #2
 8009030:	2b02      	cmp	r3, #2
 8009032:	d108      	bne.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8009034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800903a:	d104      	bne.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 800903c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009040:	637b      	str	r3, [r7, #52]	@ 0x34
 8009042:	f000 be6f 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8009046:	2300      	movs	r3, #0
 8009048:	637b      	str	r3, [r7, #52]	@ 0x34
 800904a:	f000 be6b 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800904e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009052:	f1a2 0120 	sub.w	r1, r2, #32
 8009056:	430b      	orrs	r3, r1
 8009058:	d158      	bne.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800905a:	4b66      	ldr	r3, [pc, #408]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800905c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009060:	f003 0307 	and.w	r3, r3, #7
 8009064:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8009066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009068:	2b00      	cmp	r3, #0
 800906a:	d104      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800906c:	f7fe fa66 	bl	800753c <HAL_RCC_GetPCLK3Freq>
 8009070:	6378      	str	r0, [r7, #52]	@ 0x34
 8009072:	f000 be57 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8009076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009078:	2b01      	cmp	r3, #1
 800907a:	d104      	bne.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800907c:	f7fe f91a 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 8009080:	6378      	str	r0, [r7, #52]	@ 0x34
 8009082:	f000 be4f 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009086:	4b5b      	ldr	r3, [pc, #364]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800908e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009092:	d106      	bne.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8009094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009096:	2b02      	cmp	r3, #2
 8009098:	d103      	bne.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 800909a:	4b57      	ldr	r3, [pc, #348]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800909c:	637b      	str	r3, [r7, #52]	@ 0x34
 800909e:	f000 be41 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80090a2:	4b54      	ldr	r3, [pc, #336]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80090a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090a8:	f003 0302 	and.w	r3, r3, #2
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d107      	bne.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80090b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b2:	2b03      	cmp	r3, #3
 80090b4:	d104      	bne.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 80090b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80090bc:	f000 be32 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80090c0:	4b4c      	ldr	r3, [pc, #304]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0320 	and.w	r3, r3, #32
 80090c8:	2b20      	cmp	r3, #32
 80090ca:	d11b      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 80090cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ce:	2b04      	cmp	r3, #4
 80090d0:	d118      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80090d2:	4b48      	ldr	r3, [pc, #288]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d005      	beq.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80090de:	4b45      	ldr	r3, [pc, #276]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	0e1b      	lsrs	r3, r3, #24
 80090e4:	f003 030f 	and.w	r3, r3, #15
 80090e8:	e006      	b.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80090ea:	4b42      	ldr	r3, [pc, #264]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80090ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80090f0:	041b      	lsls	r3, r3, #16
 80090f2:	0e1b      	lsrs	r3, r3, #24
 80090f4:	f003 030f 	and.w	r3, r3, #15
 80090f8:	4a40      	ldr	r2, [pc, #256]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80090fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009100:	f000 be10 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8009104:	2300      	movs	r3, #0
 8009106:	637b      	str	r3, [r7, #52]	@ 0x34
 8009108:	f000 be0c 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800910c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009110:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009114:	430b      	orrs	r3, r1
 8009116:	d173      	bne.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8009118:	4b36      	ldr	r3, [pc, #216]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800911a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800911e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009122:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8009124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800912a:	d104      	bne.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800912c:	f7fe f8c2 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 8009130:	6378      	str	r0, [r7, #52]	@ 0x34
 8009132:	f000 bdf7 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8009136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009138:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800913c:	d108      	bne.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800913e:	f107 0318 	add.w	r3, r7, #24
 8009142:	4618      	mov	r0, r3
 8009144:	f7ff f992 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8009148:	6a3b      	ldr	r3, [r7, #32]
 800914a:	637b      	str	r3, [r7, #52]	@ 0x34
 800914c:	f000 bdea 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009152:	2b00      	cmp	r3, #0
 8009154:	d104      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8009156:	f7fe f9af 	bl	80074b8 <HAL_RCC_GetHCLKFreq>
 800915a:	6378      	str	r0, [r7, #52]	@ 0x34
 800915c:	f000 bde2 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8009160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009162:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009166:	d122      	bne.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009168:	4b22      	ldr	r3, [pc, #136]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 0320 	and.w	r3, r3, #32
 8009170:	2b20      	cmp	r3, #32
 8009172:	d118      	bne.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009174:	4b1f      	ldr	r3, [pc, #124]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d005      	beq.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8009180:	4b1c      	ldr	r3, [pc, #112]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	0e1b      	lsrs	r3, r3, #24
 8009186:	f003 030f 	and.w	r3, r3, #15
 800918a:	e006      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800918c:	4b19      	ldr	r3, [pc, #100]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800918e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009192:	041b      	lsls	r3, r3, #16
 8009194:	0e1b      	lsrs	r3, r3, #24
 8009196:	f003 030f 	and.w	r3, r3, #15
 800919a:	4a18      	ldr	r2, [pc, #96]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800919c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80091a2:	f000 bdbf 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80091a6:	2300      	movs	r3, #0
 80091a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80091aa:	f000 bdbb 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80091ae:	4b11      	ldr	r3, [pc, #68]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091ba:	d107      	bne.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 80091bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80091c2:	d103      	bne.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 80091c4:	4b0c      	ldr	r3, [pc, #48]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80091c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c8:	f000 bdac 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80091cc:	4b09      	ldr	r3, [pc, #36]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091d8:	d107      	bne.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80091da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80091e0:	d103      	bne.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 80091e2:	4b05      	ldr	r3, [pc, #20]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80091e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091e6:	f000 bd9d 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80091ea:	2300      	movs	r3, #0
 80091ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ee:	f000 bd99 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80091f2:	bf00      	nop
 80091f4:	46020c00 	.word	0x46020c00
 80091f8:	00f42400 	.word	0x00f42400
 80091fc:	0800e5e8 	.word	0x0800e5e8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8009200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009204:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009208:	430b      	orrs	r3, r1
 800920a:	d158      	bne.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800920c:	4bad      	ldr	r3, [pc, #692]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800920e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009212:	f003 0307 	and.w	r3, r3, #7
 8009216:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921a:	2b04      	cmp	r3, #4
 800921c:	d84b      	bhi.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800921e:	a201      	add	r2, pc, #4	@ (adr r2, 8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009224:	0800925d 	.word	0x0800925d
 8009228:	08009239 	.word	0x08009239
 800922c:	0800924b 	.word	0x0800924b
 8009230:	08009267 	.word	0x08009267
 8009234:	08009271 	.word	0x08009271
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009238:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe ffbb 	bl	80081b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009244:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009246:	f000 bd6d 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800924a:	f107 030c 	add.w	r3, r7, #12
 800924e:	4618      	mov	r0, r3
 8009250:	f7ff fa66 	bl	8008720 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009258:	f000 bd64 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800925c:	f7fe f92c 	bl	80074b8 <HAL_RCC_GetHCLKFreq>
 8009260:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009262:	f000 bd5f 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009266:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800926a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800926c:	f000 bd5a 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009270:	4b94      	ldr	r3, [pc, #592]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 0320 	and.w	r3, r3, #32
 8009278:	2b20      	cmp	r3, #32
 800927a:	d118      	bne.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800927c:	4b91      	ldr	r3, [pc, #580]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d005      	beq.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8009288:	4b8e      	ldr	r3, [pc, #568]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	0e1b      	lsrs	r3, r3, #24
 800928e:	f003 030f 	and.w	r3, r3, #15
 8009292:	e006      	b.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8009294:	4b8b      	ldr	r3, [pc, #556]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009296:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800929a:	041b      	lsls	r3, r3, #16
 800929c:	0e1b      	lsrs	r3, r3, #24
 800929e:	f003 030f 	and.w	r3, r3, #15
 80092a2:	4a89      	ldr	r2, [pc, #548]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80092a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80092aa:	f000 bd3b 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80092ae:	2300      	movs	r3, #0
 80092b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092b2:	f000 bd37 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092ba:	f000 bd33 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80092be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092c2:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80092c6:	430b      	orrs	r3, r1
 80092c8:	d167      	bne.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80092ca:	4b7e      	ldr	r3, [pc, #504]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80092cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092d0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80092d4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80092d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80092dc:	d036      	beq.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80092de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80092e4:	d855      	bhi.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80092e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80092ec:	d029      	beq.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80092ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80092f4:	d84d      	bhi.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80092f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092fc:	d013      	beq.n	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 80092fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009300:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009304:	d845      	bhi.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8009306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009308:	2b00      	cmp	r3, #0
 800930a:	d015      	beq.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800930c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009312:	d13e      	bne.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009314:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009318:	4618      	mov	r0, r3
 800931a:	f7fe ff4d 	bl	80081b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800931e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009320:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009322:	f000 bcff 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009326:	f107 030c 	add.w	r3, r7, #12
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff f9f8 	bl	8008720 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009334:	f000 bcf6 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009338:	f7fe f8be 	bl	80074b8 <HAL_RCC_GetHCLKFreq>
 800933c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800933e:	f000 bcf1 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009342:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009346:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009348:	f000 bcec 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800934c:	4b5d      	ldr	r3, [pc, #372]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 0320 	and.w	r3, r3, #32
 8009354:	2b20      	cmp	r3, #32
 8009356:	d118      	bne.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009358:	4b5a      	ldr	r3, [pc, #360]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009360:	2b00      	cmp	r3, #0
 8009362:	d005      	beq.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8009364:	4b57      	ldr	r3, [pc, #348]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	0e1b      	lsrs	r3, r3, #24
 800936a:	f003 030f 	and.w	r3, r3, #15
 800936e:	e006      	b.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8009370:	4b54      	ldr	r3, [pc, #336]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009372:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009376:	041b      	lsls	r3, r3, #16
 8009378:	0e1b      	lsrs	r3, r3, #24
 800937a:	f003 030f 	and.w	r3, r3, #15
 800937e:	4a52      	ldr	r2, [pc, #328]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009384:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009386:	f000 bccd 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800938a:	2300      	movs	r3, #0
 800938c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800938e:	f000 bcc9 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009392:	2300      	movs	r3, #0
 8009394:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009396:	f000 bcc5 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800939a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800939e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80093a2:	430b      	orrs	r3, r1
 80093a4:	d14c      	bne.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80093a6:	4b47      	ldr	r3, [pc, #284]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80093a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80093b0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80093b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d104      	bne.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80093b8:	f7fe f898 	bl	80074ec <HAL_RCC_GetPCLK1Freq>
 80093bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80093be:	f000 bcb1 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80093c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093c8:	d104      	bne.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80093ca:	f7fd ff73 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 80093ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80093d0:	f000 bca8 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80093d4:	4b3b      	ldr	r3, [pc, #236]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093e0:	d107      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80093e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093e8:	d103      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 80093ea:	4b38      	ldr	r3, [pc, #224]	@ (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80093ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ee:	f000 bc99 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80093f2:	4b34      	ldr	r3, [pc, #208]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f003 0320 	and.w	r3, r3, #32
 80093fa:	2b20      	cmp	r3, #32
 80093fc:	d11c      	bne.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80093fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009400:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009404:	d118      	bne.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009406:	4b2f      	ldr	r3, [pc, #188]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d005      	beq.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8009412:	4b2c      	ldr	r3, [pc, #176]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	0e1b      	lsrs	r3, r3, #24
 8009418:	f003 030f 	and.w	r3, r3, #15
 800941c:	e006      	b.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800941e:	4b29      	ldr	r3, [pc, #164]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009420:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009424:	041b      	lsls	r3, r3, #16
 8009426:	0e1b      	lsrs	r3, r3, #24
 8009428:	f003 030f 	and.w	r3, r3, #15
 800942c:	4a26      	ldr	r2, [pc, #152]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800942e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009432:	637b      	str	r3, [r7, #52]	@ 0x34
 8009434:	f000 bc76 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8009438:	2300      	movs	r3, #0
 800943a:	637b      	str	r3, [r7, #52]	@ 0x34
 800943c:	f000 bc72 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009444:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8009448:	430b      	orrs	r3, r1
 800944a:	d152      	bne.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800944c:	4b1d      	ldr	r3, [pc, #116]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800944e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009452:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009456:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945a:	2b00      	cmp	r3, #0
 800945c:	d104      	bne.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800945e:	f7fe f845 	bl	80074ec <HAL_RCC_GetPCLK1Freq>
 8009462:	6378      	str	r0, [r7, #52]	@ 0x34
 8009464:	f000 bc5e 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8009468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800946e:	d104      	bne.n	800947a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009470:	f7fd ff20 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 8009474:	6378      	str	r0, [r7, #52]	@ 0x34
 8009476:	f000 bc55 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800947a:	4b12      	ldr	r3, [pc, #72]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009486:	d107      	bne.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8009488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800948e:	d103      	bne.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8009490:	4b0e      	ldr	r3, [pc, #56]	@ (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009492:	637b      	str	r3, [r7, #52]	@ 0x34
 8009494:	f000 bc46 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8009498:	4b0a      	ldr	r3, [pc, #40]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 0320 	and.w	r3, r3, #32
 80094a0:	2b20      	cmp	r3, #32
 80094a2:	d122      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 80094a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094aa:	d11e      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80094ac:	4b05      	ldr	r3, [pc, #20]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00b      	beq.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 80094b8:	4b02      	ldr	r3, [pc, #8]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	0e1b      	lsrs	r3, r3, #24
 80094be:	f003 030f 	and.w	r3, r3, #15
 80094c2:	e00c      	b.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 80094c4:	46020c00 	.word	0x46020c00
 80094c8:	0800e5e8 	.word	0x0800e5e8
 80094cc:	00f42400 	.word	0x00f42400
 80094d0:	4ba1      	ldr	r3, [pc, #644]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80094d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80094d6:	041b      	lsls	r3, r3, #16
 80094d8:	0e1b      	lsrs	r3, r3, #24
 80094da:	f003 030f 	and.w	r3, r3, #15
 80094de:	4a9f      	ldr	r2, [pc, #636]	@ (800975c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80094e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094e6:	f000 bc1d 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80094ea:	2300      	movs	r3, #0
 80094ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ee:	f000 bc19 	b.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80094f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094f6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80094fa:	430b      	orrs	r3, r1
 80094fc:	d151      	bne.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80094fe:	4b96      	ldr	r3, [pc, #600]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009500:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009504:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009508:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800950a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950c:	2bc0      	cmp	r3, #192	@ 0xc0
 800950e:	d024      	beq.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8009510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009512:	2bc0      	cmp	r3, #192	@ 0xc0
 8009514:	d842      	bhi.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8009516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009518:	2b80      	cmp	r3, #128	@ 0x80
 800951a:	d00d      	beq.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800951c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951e:	2b80      	cmp	r3, #128	@ 0x80
 8009520:	d83c      	bhi.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8009522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009524:	2b00      	cmp	r3, #0
 8009526:	d003      	beq.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8009528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952a:	2b40      	cmp	r3, #64	@ 0x40
 800952c:	d011      	beq.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800952e:	e035      	b.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009530:	f7fe f804 	bl	800753c <HAL_RCC_GetPCLK3Freq>
 8009534:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009536:	e3f5      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009538:	4b87      	ldr	r3, [pc, #540]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009544:	d102      	bne.n	800954c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8009546:	4b86      	ldr	r3, [pc, #536]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009548:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800954a:	e3eb      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800954c:	2300      	movs	r3, #0
 800954e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009550:	e3e8      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009552:	f7fd feaf 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 8009556:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009558:	e3e4      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800955a:	4b7f      	ldr	r3, [pc, #508]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0320 	and.w	r3, r3, #32
 8009562:	2b20      	cmp	r3, #32
 8009564:	d117      	bne.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009566:	4b7c      	ldr	r3, [pc, #496]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d005      	beq.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8009572:	4b79      	ldr	r3, [pc, #484]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	0e1b      	lsrs	r3, r3, #24
 8009578:	f003 030f 	and.w	r3, r3, #15
 800957c:	e006      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800957e:	4b76      	ldr	r3, [pc, #472]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009584:	041b      	lsls	r3, r3, #16
 8009586:	0e1b      	lsrs	r3, r3, #24
 8009588:	f003 030f 	and.w	r3, r3, #15
 800958c:	4a73      	ldr	r2, [pc, #460]	@ (800975c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800958e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009592:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009594:	e3c6      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800959a:	e3c3      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 800959c:	2300      	movs	r3, #0
 800959e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095a0:	e3c0      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80095a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095a6:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80095aa:	430b      	orrs	r3, r1
 80095ac:	d147      	bne.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80095ae:	4b6a      	ldr	r3, [pc, #424]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80095b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80095b8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80095ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d103      	bne.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80095c0:	f7fd ff94 	bl	80074ec <HAL_RCC_GetPCLK1Freq>
 80095c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80095c6:	e3ad      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80095c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095ce:	d103      	bne.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80095d0:	f7fd fe70 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 80095d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80095d6:	e3a5      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80095d8:	4b5f      	ldr	r3, [pc, #380]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095e4:	d106      	bne.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80095e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095ec:	d102      	bne.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 80095ee:	4b5c      	ldr	r3, [pc, #368]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80095f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095f2:	e397      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80095f4:	4b58      	ldr	r3, [pc, #352]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 0320 	and.w	r3, r3, #32
 80095fc:	2b20      	cmp	r3, #32
 80095fe:	d11b      	bne.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8009600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009602:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009606:	d117      	bne.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009608:	4b53      	ldr	r3, [pc, #332]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d005      	beq.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8009614:	4b50      	ldr	r3, [pc, #320]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	0e1b      	lsrs	r3, r3, #24
 800961a:	f003 030f 	and.w	r3, r3, #15
 800961e:	e006      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8009620:	4b4d      	ldr	r3, [pc, #308]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009626:	041b      	lsls	r3, r3, #16
 8009628:	0e1b      	lsrs	r3, r3, #24
 800962a:	f003 030f 	and.w	r3, r3, #15
 800962e:	4a4b      	ldr	r2, [pc, #300]	@ (800975c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009634:	637b      	str	r3, [r7, #52]	@ 0x34
 8009636:	e375      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8009638:	2300      	movs	r3, #0
 800963a:	637b      	str	r3, [r7, #52]	@ 0x34
 800963c:	e372      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800963e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009642:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009646:	430b      	orrs	r3, r1
 8009648:	d164      	bne.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800964a:	4b43      	ldr	r3, [pc, #268]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800964c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009650:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009654:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009658:	2b00      	cmp	r3, #0
 800965a:	d120      	bne.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800965c:	4b3e      	ldr	r3, [pc, #248]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0320 	and.w	r3, r3, #32
 8009664:	2b20      	cmp	r3, #32
 8009666:	d117      	bne.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009668:	4b3b      	ldr	r3, [pc, #236]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d005      	beq.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8009674:	4b38      	ldr	r3, [pc, #224]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	0e1b      	lsrs	r3, r3, #24
 800967a:	f003 030f 	and.w	r3, r3, #15
 800967e:	e006      	b.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8009680:	4b35      	ldr	r3, [pc, #212]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009682:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009686:	041b      	lsls	r3, r3, #16
 8009688:	0e1b      	lsrs	r3, r3, #24
 800968a:	f003 030f 	and.w	r3, r3, #15
 800968e:	4a33      	ldr	r2, [pc, #204]	@ (800975c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009694:	637b      	str	r3, [r7, #52]	@ 0x34
 8009696:	e345      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8009698:	2300      	movs	r3, #0
 800969a:	637b      	str	r3, [r7, #52]	@ 0x34
 800969c:	e342      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800969e:	4b2e      	ldr	r3, [pc, #184]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80096a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096ac:	d112      	bne.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80096ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096b4:	d10e      	bne.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80096b6:	4b28      	ldr	r3, [pc, #160]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80096b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096c4:	d102      	bne.n	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 80096c6:	23fa      	movs	r3, #250	@ 0xfa
 80096c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80096ca:	e32b      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80096cc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80096d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80096d2:	e327      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80096d4:	4b20      	ldr	r3, [pc, #128]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096e0:	d106      	bne.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80096e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096e8:	d102      	bne.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 80096ea:	4b1d      	ldr	r3, [pc, #116]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80096ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80096ee:	e319      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80096f0:	4b19      	ldr	r3, [pc, #100]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80096f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096f6:	f003 0302 	and.w	r3, r3, #2
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d107      	bne.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80096fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009700:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009704:	d103      	bne.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8009706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800970a:	637b      	str	r3, [r7, #52]	@ 0x34
 800970c:	e30a      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800970e:	2300      	movs	r3, #0
 8009710:	637b      	str	r3, [r7, #52]	@ 0x34
 8009712:	e307      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009718:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800971c:	430b      	orrs	r3, r1
 800971e:	d16b      	bne.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009720:	4b0d      	ldr	r3, [pc, #52]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009726:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800972a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800972c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972e:	2b00      	cmp	r3, #0
 8009730:	d127      	bne.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009732:	4b09      	ldr	r3, [pc, #36]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0320 	and.w	r3, r3, #32
 800973a:	2b20      	cmp	r3, #32
 800973c:	d11e      	bne.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800973e:	4b06      	ldr	r3, [pc, #24]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00c      	beq.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 800974a:	4b03      	ldr	r3, [pc, #12]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	0e1b      	lsrs	r3, r3, #24
 8009750:	f003 030f 	and.w	r3, r3, #15
 8009754:	e00d      	b.n	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8009756:	bf00      	nop
 8009758:	46020c00 	.word	0x46020c00
 800975c:	0800e5e8 	.word	0x0800e5e8
 8009760:	00f42400 	.word	0x00f42400
 8009764:	4b94      	ldr	r3, [pc, #592]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009766:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800976a:	041b      	lsls	r3, r3, #16
 800976c:	0e1b      	lsrs	r3, r3, #24
 800976e:	f003 030f 	and.w	r3, r3, #15
 8009772:	4a92      	ldr	r2, [pc, #584]	@ (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8009774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009778:	637b      	str	r3, [r7, #52]	@ 0x34
 800977a:	e2d3      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800977c:	2300      	movs	r3, #0
 800977e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009780:	e2d0      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009782:	4b8d      	ldr	r3, [pc, #564]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800978c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009790:	d112      	bne.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8009792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009798:	d10e      	bne.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800979a:	4b87      	ldr	r3, [pc, #540]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800979c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097a8:	d102      	bne.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 80097aa:	23fa      	movs	r3, #250	@ 0xfa
 80097ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80097ae:	e2b9      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80097b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80097b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80097b6:	e2b5      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80097b8:	4b7f      	ldr	r3, [pc, #508]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097c4:	d106      	bne.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 80097c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097cc:	d102      	bne.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 80097ce:	4b7c      	ldr	r3, [pc, #496]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80097d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80097d2:	e2a7      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80097d4:	4b78      	ldr	r3, [pc, #480]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80097d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097da:	f003 0302 	and.w	r3, r3, #2
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d107      	bne.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 80097e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097e8:	d103      	bne.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 80097ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80097f0:	e298      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80097f6:	e295      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80097f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097fc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009800:	430b      	orrs	r3, r1
 8009802:	d147      	bne.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009804:	4b6c      	ldr	r3, [pc, #432]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800980a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800980e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009812:	2b00      	cmp	r3, #0
 8009814:	d103      	bne.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009816:	f7fd fe69 	bl	80074ec <HAL_RCC_GetPCLK1Freq>
 800981a:	6378      	str	r0, [r7, #52]	@ 0x34
 800981c:	e282      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800981e:	4b66      	ldr	r3, [pc, #408]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009824:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009828:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800982c:	d112      	bne.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 800982e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009830:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009834:	d10e      	bne.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009836:	4b60      	ldr	r3, [pc, #384]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800983c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009840:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009844:	d102      	bne.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8009846:	23fa      	movs	r3, #250	@ 0xfa
 8009848:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800984a:	e26b      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800984c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009850:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009852:	e267      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009854:	4b58      	ldr	r3, [pc, #352]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800985c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009860:	d106      	bne.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8009862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009864:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009868:	d102      	bne.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 800986a:	4b55      	ldr	r3, [pc, #340]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800986c:	637b      	str	r3, [r7, #52]	@ 0x34
 800986e:	e259      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009870:	4b51      	ldr	r3, [pc, #324]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009876:	f003 0302 	and.w	r3, r3, #2
 800987a:	2b02      	cmp	r3, #2
 800987c:	d107      	bne.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 800987e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009880:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009884:	d103      	bne.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8009886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800988a:	637b      	str	r3, [r7, #52]	@ 0x34
 800988c:	e24a      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	637b      	str	r3, [r7, #52]	@ 0x34
 8009892:	e247      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009898:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800989c:	430b      	orrs	r3, r1
 800989e:	d12d      	bne.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80098a0:	4b45      	ldr	r3, [pc, #276]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80098a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80098a6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80098aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80098ac:	4b42      	ldr	r3, [pc, #264]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098b8:	d105      	bne.n	80098c6 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 80098ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d102      	bne.n	80098c6 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 80098c0:	4b3f      	ldr	r3, [pc, #252]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80098c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098c4:	e22e      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80098c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80098cc:	d107      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fe fc70 	bl	80081b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80098d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098da:	637b      	str	r3, [r7, #52]	@ 0x34
 80098dc:	e222      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80098de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098e4:	d107      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098e6:	f107 0318 	add.w	r3, r7, #24
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fe fdbe 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098f4:	e216      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80098f6:	2300      	movs	r3, #0
 80098f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80098fa:	e213      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80098fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009900:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009904:	430b      	orrs	r3, r1
 8009906:	d15d      	bne.n	80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009908:	4b2b      	ldr	r3, [pc, #172]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800990a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800990e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009912:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009916:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800991a:	d028      	beq.n	800996e <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 800991c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009922:	d845      	bhi.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009926:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800992a:	d013      	beq.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 800992c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009932:	d83d      	bhi.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009936:	2b00      	cmp	r3, #0
 8009938:	d004      	beq.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800993a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009940:	d004      	beq.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8009942:	e035      	b.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009944:	f7fd fde6 	bl	8007514 <HAL_RCC_GetPCLK2Freq>
 8009948:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800994a:	e1eb      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800994c:	f7fd fcb2 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 8009950:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009952:	e1e7      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009954:	4b18      	ldr	r3, [pc, #96]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800995c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009960:	d102      	bne.n	8009968 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8009962:	4b17      	ldr	r3, [pc, #92]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009964:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009966:	e1dd      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009968:	2300      	movs	r3, #0
 800996a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800996c:	e1da      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800996e:	4b12      	ldr	r3, [pc, #72]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f003 0320 	and.w	r3, r3, #32
 8009976:	2b20      	cmp	r3, #32
 8009978:	d117      	bne.n	80099aa <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800997a:	4b0f      	ldr	r3, [pc, #60]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009982:	2b00      	cmp	r3, #0
 8009984:	d005      	beq.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8009986:	4b0c      	ldr	r3, [pc, #48]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	0e1b      	lsrs	r3, r3, #24
 800998c:	f003 030f 	and.w	r3, r3, #15
 8009990:	e006      	b.n	80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8009992:	4b09      	ldr	r3, [pc, #36]	@ (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009994:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009998:	041b      	lsls	r3, r3, #16
 800999a:	0e1b      	lsrs	r3, r3, #24
 800999c:	f003 030f 	and.w	r3, r3, #15
 80099a0:	4a06      	ldr	r2, [pc, #24]	@ (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80099a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80099a8:	e1bc      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80099aa:	2300      	movs	r3, #0
 80099ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099ae:	e1b9      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80099b0:	2300      	movs	r3, #0
 80099b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099b4:	e1b6      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80099b6:	bf00      	nop
 80099b8:	46020c00 	.word	0x46020c00
 80099bc:	0800e5e8 	.word	0x0800e5e8
 80099c0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80099c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099c8:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80099cc:	430b      	orrs	r3, r1
 80099ce:	d156      	bne.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80099d0:	4ba5      	ldr	r3, [pc, #660]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80099d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80099d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80099da:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80099dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80099e2:	d028      	beq.n	8009a36 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 80099e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80099ea:	d845      	bhi.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80099ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099f2:	d013      	beq.n	8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 80099f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099fa:	d83d      	bhi.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80099fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d004      	beq.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8009a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a08:	d004      	beq.n	8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8009a0a:	e035      	b.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009a0c:	f7fd fd6e 	bl	80074ec <HAL_RCC_GetPCLK1Freq>
 8009a10:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009a12:	e187      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009a14:	f7fd fc4e 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 8009a18:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009a1a:	e183      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a1c:	4b92      	ldr	r3, [pc, #584]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a28:	d102      	bne.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8009a2a:	4b90      	ldr	r3, [pc, #576]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8009a2c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009a2e:	e179      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009a30:	2300      	movs	r3, #0
 8009a32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a34:	e176      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009a36:	4b8c      	ldr	r3, [pc, #560]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f003 0320 	and.w	r3, r3, #32
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	d117      	bne.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009a42:	4b89      	ldr	r3, [pc, #548]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d005      	beq.n	8009a5a <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8009a4e:	4b86      	ldr	r3, [pc, #536]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	0e1b      	lsrs	r3, r3, #24
 8009a54:	f003 030f 	and.w	r3, r3, #15
 8009a58:	e006      	b.n	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8009a5a:	4b83      	ldr	r3, [pc, #524]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009a5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009a60:	041b      	lsls	r3, r3, #16
 8009a62:	0e1b      	lsrs	r3, r3, #24
 8009a64:	f003 030f 	and.w	r3, r3, #15
 8009a68:	4a81      	ldr	r2, [pc, #516]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8009a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a6e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009a70:	e158      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009a72:	2300      	movs	r3, #0
 8009a74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a76:	e155      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a7c:	e152      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009a7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a82:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8009a86:	430b      	orrs	r3, r1
 8009a88:	d177      	bne.n	8009b7a <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009a8a:	4b77      	ldr	r3, [pc, #476]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009a8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a90:	f003 0318 	and.w	r3, r3, #24
 8009a94:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a98:	2b18      	cmp	r3, #24
 8009a9a:	d86b      	bhi.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8009a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8009a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa2:	bf00      	nop
 8009aa4:	08009b09 	.word	0x08009b09
 8009aa8:	08009b75 	.word	0x08009b75
 8009aac:	08009b75 	.word	0x08009b75
 8009ab0:	08009b75 	.word	0x08009b75
 8009ab4:	08009b75 	.word	0x08009b75
 8009ab8:	08009b75 	.word	0x08009b75
 8009abc:	08009b75 	.word	0x08009b75
 8009ac0:	08009b75 	.word	0x08009b75
 8009ac4:	08009b11 	.word	0x08009b11
 8009ac8:	08009b75 	.word	0x08009b75
 8009acc:	08009b75 	.word	0x08009b75
 8009ad0:	08009b75 	.word	0x08009b75
 8009ad4:	08009b75 	.word	0x08009b75
 8009ad8:	08009b75 	.word	0x08009b75
 8009adc:	08009b75 	.word	0x08009b75
 8009ae0:	08009b75 	.word	0x08009b75
 8009ae4:	08009b19 	.word	0x08009b19
 8009ae8:	08009b75 	.word	0x08009b75
 8009aec:	08009b75 	.word	0x08009b75
 8009af0:	08009b75 	.word	0x08009b75
 8009af4:	08009b75 	.word	0x08009b75
 8009af8:	08009b75 	.word	0x08009b75
 8009afc:	08009b75 	.word	0x08009b75
 8009b00:	08009b75 	.word	0x08009b75
 8009b04:	08009b33 	.word	0x08009b33
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009b08:	f7fd fd18 	bl	800753c <HAL_RCC_GetPCLK3Freq>
 8009b0c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009b0e:	e109      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009b10:	f7fd fbd0 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 8009b14:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009b16:	e105      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b18:	4b53      	ldr	r3, [pc, #332]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b24:	d102      	bne.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8009b26:	4b51      	ldr	r3, [pc, #324]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8009b28:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b2a:	e0fb      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b30:	e0f8      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009b32:	4b4d      	ldr	r3, [pc, #308]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 0320 	and.w	r3, r3, #32
 8009b3a:	2b20      	cmp	r3, #32
 8009b3c:	d117      	bne.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d005      	beq.n	8009b56 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8009b4a:	4b47      	ldr	r3, [pc, #284]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	0e1b      	lsrs	r3, r3, #24
 8009b50:	f003 030f 	and.w	r3, r3, #15
 8009b54:	e006      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8009b56:	4b44      	ldr	r3, [pc, #272]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009b58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b5c:	041b      	lsls	r3, r3, #16
 8009b5e:	0e1b      	lsrs	r3, r3, #24
 8009b60:	f003 030f 	and.w	r3, r3, #15
 8009b64:	4a42      	ldr	r2, [pc, #264]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8009b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b6a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b6c:	e0da      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b72:	e0d7      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b78:	e0d4      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b7e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8009b82:	430b      	orrs	r3, r1
 8009b84:	d155      	bne.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009b86:	4b38      	ldr	r3, [pc, #224]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009b88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009b8c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009b90:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b98:	d013      	beq.n	8009bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ba0:	d844      	bhi.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8009ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ba8:	d013      	beq.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8009baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bb0:	d83c      	bhi.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8009bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d014      	beq.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8009bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bbe:	d014      	beq.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8009bc0:	e034      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bc2:	f107 0318 	add.w	r3, r7, #24
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fe fc50 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bd0:	e0a8      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7fe faee 	bl	80081b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009be0:	e0a0      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009be2:	f7fd fb67 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 8009be6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009be8:	e09c      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009bea:	4b1f      	ldr	r3, [pc, #124]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0320 	and.w	r3, r3, #32
 8009bf2:	2b20      	cmp	r3, #32
 8009bf4:	d117      	bne.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d005      	beq.n	8009c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8009c02:	4b19      	ldr	r3, [pc, #100]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	0e1b      	lsrs	r3, r3, #24
 8009c08:	f003 030f 	and.w	r3, r3, #15
 8009c0c:	e006      	b.n	8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8009c0e:	4b16      	ldr	r3, [pc, #88]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009c10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c14:	041b      	lsls	r3, r3, #16
 8009c16:	0e1b      	lsrs	r3, r3, #24
 8009c18:	f003 030f 	and.w	r3, r3, #15
 8009c1c:	4a14      	ldr	r2, [pc, #80]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8009c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009c24:	e07e      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c2a:	e07b      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c30:	e078      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009c32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c36:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8009c3a:	430b      	orrs	r3, r1
 8009c3c:	d138      	bne.n	8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c48:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009c4a:	4b07      	ldr	r3, [pc, #28]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c50:	f003 0302 	and.w	r3, r3, #2
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d10d      	bne.n	8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8009c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10a      	bne.n	8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8009c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c62:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c64:	e05e      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8009c66:	bf00      	nop
 8009c68:	46020c00 	.word	0x46020c00
 8009c6c:	00f42400 	.word	0x00f42400
 8009c70:	0800e5e8 	.word	0x0800e5e8
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009c74:	4b2e      	ldr	r3, [pc, #184]	@ (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8009c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c82:	d112      	bne.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8009c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c8a:	d10e      	bne.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c8c:	4b28      	ldr	r3, [pc, #160]	@ (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8009c8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c9a:	d102      	bne.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8009c9c:	23fa      	movs	r3, #250	@ 0xfa
 8009c9e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009ca0:	e040      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009ca2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009ca6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009ca8:	e03c      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8009caa:	2300      	movs	r3, #0
 8009cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cae:	e039      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8009cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cb4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009cb8:	430b      	orrs	r3, r1
 8009cba:	d131      	bne.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8009cbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009cc2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009cc6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009cc8:	4b19      	ldr	r3, [pc, #100]	@ (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009cd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cd4:	d105      	bne.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8009cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d102      	bne.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8009cdc:	4b15      	ldr	r3, [pc, #84]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8009cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ce0:	e020      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8009ce2:	4b13      	ldr	r3, [pc, #76]	@ (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cee:	d106      	bne.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cf6:	d102      	bne.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8009cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8009cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cfc:	e012      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8009cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d0a:	d106      	bne.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d12:	d102      	bne.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8009d14:	4b09      	ldr	r3, [pc, #36]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d18:	e004      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d1e:	e001      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009d20:	2300      	movs	r3, #0
 8009d22:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8009d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3738      	adds	r7, #56	@ 0x38
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	46020c00 	.word	0x46020c00
 8009d34:	02dc6c00 	.word	0x02dc6c00
 8009d38:	016e3600 	.word	0x016e3600
 8009d3c:	00f42400 	.word	0x00f42400

08009d40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009d48:	4b47      	ldr	r3, [pc, #284]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a46      	ldr	r2, [pc, #280]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009d4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d52:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009d54:	f7f8 ff9e 	bl	8002c94 <HAL_GetTick>
 8009d58:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d5a:	e008      	b.n	8009d6e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009d5c:	f7f8 ff9a 	bl	8002c94 <HAL_GetTick>
 8009d60:	4602      	mov	r2, r0
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d901      	bls.n	8009d6e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	e077      	b.n	8009e5e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1f0      	bne.n	8009d5c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d7e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009d82:	f023 0303 	bic.w	r3, r3, #3
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	6811      	ldr	r1, [r2, #0]
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	6852      	ldr	r2, [r2, #4]
 8009d8e:	3a01      	subs	r2, #1
 8009d90:	0212      	lsls	r2, r2, #8
 8009d92:	430a      	orrs	r2, r1
 8009d94:	4934      	ldr	r1, [pc, #208]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009d96:	4313      	orrs	r3, r2
 8009d98:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009d9a:	4b33      	ldr	r3, [pc, #204]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009d9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d9e:	4b33      	ldr	r3, [pc, #204]	@ (8009e6c <RCCEx_PLL2_Config+0x12c>)
 8009da0:	4013      	ands	r3, r2
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	6892      	ldr	r2, [r2, #8]
 8009da6:	3a01      	subs	r2, #1
 8009da8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	68d2      	ldr	r2, [r2, #12]
 8009db0:	3a01      	subs	r2, #1
 8009db2:	0252      	lsls	r2, r2, #9
 8009db4:	b292      	uxth	r2, r2
 8009db6:	4311      	orrs	r1, r2
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	6912      	ldr	r2, [r2, #16]
 8009dbc:	3a01      	subs	r2, #1
 8009dbe:	0412      	lsls	r2, r2, #16
 8009dc0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009dc4:	4311      	orrs	r1, r2
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	6952      	ldr	r2, [r2, #20]
 8009dca:	3a01      	subs	r2, #1
 8009dcc:	0612      	lsls	r2, r2, #24
 8009dce:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	4924      	ldr	r1, [pc, #144]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009dda:	4b23      	ldr	r3, [pc, #140]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dde:	f023 020c 	bic.w	r2, r3, #12
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	699b      	ldr	r3, [r3, #24]
 8009de6:	4920      	ldr	r1, [pc, #128]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009de8:	4313      	orrs	r3, r2
 8009dea:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009dec:	4b1e      	ldr	r3, [pc, #120]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a1b      	ldr	r3, [r3, #32]
 8009df4:	491c      	ldr	r1, [pc, #112]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009df6:	4313      	orrs	r3, r2
 8009df8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009e00:	f023 0310 	bic.w	r3, r3, #16
 8009e04:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e06:	4b18      	ldr	r3, [pc, #96]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e0e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	69d2      	ldr	r2, [r2, #28]
 8009e16:	00d2      	lsls	r2, r2, #3
 8009e18:	4913      	ldr	r1, [pc, #76]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009e1e:	4b12      	ldr	r3, [pc, #72]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e22:	4a11      	ldr	r2, [pc, #68]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009e24:	f043 0310 	orr.w	r3, r3, #16
 8009e28:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009e30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009e34:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009e36:	f7f8 ff2d 	bl	8002c94 <HAL_GetTick>
 8009e3a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e3c:	e008      	b.n	8009e50 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009e3e:	f7f8 ff29 	bl	8002c94 <HAL_GetTick>
 8009e42:	4602      	mov	r2, r0
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d901      	bls.n	8009e50 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e006      	b.n	8009e5e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e50:	4b05      	ldr	r3, [pc, #20]	@ (8009e68 <RCCEx_PLL2_Config+0x128>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d0f0      	beq.n	8009e3e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009e5c:	2300      	movs	r3, #0

}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	46020c00 	.word	0x46020c00
 8009e6c:	80800000 	.word	0x80800000

08009e70 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009e78:	4b47      	ldr	r3, [pc, #284]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a46      	ldr	r2, [pc, #280]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009e7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e82:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009e84:	f7f8 ff06 	bl	8002c94 <HAL_GetTick>
 8009e88:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e8a:	e008      	b.n	8009e9e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009e8c:	f7f8 ff02 	bl	8002c94 <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d901      	bls.n	8009e9e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e077      	b.n	8009f8e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1f0      	bne.n	8009e8c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009eb2:	f023 0303 	bic.w	r3, r3, #3
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	6811      	ldr	r1, [r2, #0]
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	6852      	ldr	r2, [r2, #4]
 8009ebe:	3a01      	subs	r2, #1
 8009ec0:	0212      	lsls	r2, r2, #8
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	4934      	ldr	r1, [pc, #208]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	630b      	str	r3, [r1, #48]	@ 0x30
 8009eca:	4b33      	ldr	r3, [pc, #204]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009ecc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ece:	4b33      	ldr	r3, [pc, #204]	@ (8009f9c <RCCEx_PLL3_Config+0x12c>)
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	6892      	ldr	r2, [r2, #8]
 8009ed6:	3a01      	subs	r2, #1
 8009ed8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	68d2      	ldr	r2, [r2, #12]
 8009ee0:	3a01      	subs	r2, #1
 8009ee2:	0252      	lsls	r2, r2, #9
 8009ee4:	b292      	uxth	r2, r2
 8009ee6:	4311      	orrs	r1, r2
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	6912      	ldr	r2, [r2, #16]
 8009eec:	3a01      	subs	r2, #1
 8009eee:	0412      	lsls	r2, r2, #16
 8009ef0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009ef4:	4311      	orrs	r1, r2
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	6952      	ldr	r2, [r2, #20]
 8009efa:	3a01      	subs	r2, #1
 8009efc:	0612      	lsls	r2, r2, #24
 8009efe:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009f02:	430a      	orrs	r2, r1
 8009f04:	4924      	ldr	r1, [pc, #144]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009f06:	4313      	orrs	r3, r2
 8009f08:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009f0a:	4b23      	ldr	r3, [pc, #140]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f0e:	f023 020c 	bic.w	r2, r3, #12
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	4920      	ldr	r1, [pc, #128]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009f1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a1b      	ldr	r3, [r3, #32]
 8009f24:	491c      	ldr	r1, [pc, #112]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009f26:	4313      	orrs	r3, r2
 8009f28:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8009f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009f30:	f023 0310 	bic.w	r3, r3, #16
 8009f34:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009f36:	4b18      	ldr	r3, [pc, #96]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f3e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	69d2      	ldr	r2, [r2, #28]
 8009f46:	00d2      	lsls	r2, r2, #3
 8009f48:	4913      	ldr	r1, [pc, #76]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009f4e:	4b12      	ldr	r3, [pc, #72]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f52:	4a11      	ldr	r2, [pc, #68]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009f54:	f043 0310 	orr.w	r3, r3, #16
 8009f58:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8009f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f64:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009f66:	f7f8 fe95 	bl	8002c94 <HAL_GetTick>
 8009f6a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f6c:	e008      	b.n	8009f80 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009f6e:	f7f8 fe91 	bl	8002c94 <HAL_GetTick>
 8009f72:	4602      	mov	r2, r0
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d901      	bls.n	8009f80 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	e006      	b.n	8009f8e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f80:	4b05      	ldr	r3, [pc, #20]	@ (8009f98 <RCCEx_PLL3_Config+0x128>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d0f0      	beq.n	8009f6e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	46020c00 	.word	0x46020c00
 8009f9c:	80800000 	.word	0x80800000

08009fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d101      	bne.n	8009fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e049      	b.n	800a046 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d106      	bne.n	8009fcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7f7 ff8e 	bl	8001ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2202      	movs	r2, #2
 8009fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	3304      	adds	r3, #4
 8009fdc:	4619      	mov	r1, r3
 8009fde:	4610      	mov	r0, r2
 8009fe0:	f000 faae 	bl	800a540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	f003 0302 	and.w	r3, r3, #2
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d020      	beq.n	800a0b2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f003 0302 	and.w	r3, r3, #2
 800a076:	2b00      	cmp	r3, #0
 800a078:	d01b      	beq.n	800a0b2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f06f 0202 	mvn.w	r2, #2
 800a082:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	699b      	ldr	r3, [r3, #24]
 800a090:	f003 0303 	and.w	r3, r3, #3
 800a094:	2b00      	cmp	r3, #0
 800a096:	d003      	beq.n	800a0a0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fa33 	bl	800a504 <HAL_TIM_IC_CaptureCallback>
 800a09e:	e005      	b.n	800a0ac <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 fa25 	bl	800a4f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fa36 	bl	800a518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	f003 0304 	and.w	r3, r3, #4
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d020      	beq.n	800a0fe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f003 0304 	and.w	r3, r3, #4
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d01b      	beq.n	800a0fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f06f 0204 	mvn.w	r2, #4
 800a0ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d003      	beq.n	800a0ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 fa0d 	bl	800a504 <HAL_TIM_IC_CaptureCallback>
 800a0ea:	e005      	b.n	800a0f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f9ff 	bl	800a4f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fa10 	bl	800a518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	f003 0308 	and.w	r3, r3, #8
 800a104:	2b00      	cmp	r3, #0
 800a106:	d020      	beq.n	800a14a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f003 0308 	and.w	r3, r3, #8
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d01b      	beq.n	800a14a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f06f 0208 	mvn.w	r2, #8
 800a11a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2204      	movs	r2, #4
 800a120:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	69db      	ldr	r3, [r3, #28]
 800a128:	f003 0303 	and.w	r3, r3, #3
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d003      	beq.n	800a138 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 f9e7 	bl	800a504 <HAL_TIM_IC_CaptureCallback>
 800a136:	e005      	b.n	800a144 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f9d9 	bl	800a4f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f9ea 	bl	800a518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	f003 0310 	and.w	r3, r3, #16
 800a150:	2b00      	cmp	r3, #0
 800a152:	d020      	beq.n	800a196 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f003 0310 	and.w	r3, r3, #16
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d01b      	beq.n	800a196 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f06f 0210 	mvn.w	r2, #16
 800a166:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2208      	movs	r2, #8
 800a16c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	69db      	ldr	r3, [r3, #28]
 800a174:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d003      	beq.n	800a184 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f9c1 	bl	800a504 <HAL_TIM_IC_CaptureCallback>
 800a182:	e005      	b.n	800a190 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f9b3 	bl	800a4f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f9c4 	bl	800a518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	f003 0301 	and.w	r3, r3, #1
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00c      	beq.n	800a1ba <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d007      	beq.n	800a1ba <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f06f 0201 	mvn.w	r2, #1
 800a1b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f7f7 f8c7 	bl	8001348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d104      	bne.n	800a1ce <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00c      	beq.n	800a1e8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d007      	beq.n	800a1e8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a1e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 fc14 	bl	800aa10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00c      	beq.n	800a20c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d007      	beq.n	800a20c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fc0c 	bl	800aa24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00c      	beq.n	800a230 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d007      	beq.n	800a230 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f97e 	bl	800a52c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	f003 0320 	and.w	r3, r3, #32
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00c      	beq.n	800a254 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f003 0320 	and.w	r3, r3, #32
 800a240:	2b00      	cmp	r3, #0
 800a242:	d007      	beq.n	800a254 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f06f 0220 	mvn.w	r2, #32
 800a24c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fbd4 	bl	800a9fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00c      	beq.n	800a278 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d007      	beq.n	800a278 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fbe0 	bl	800aa38 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00c      	beq.n	800a29c <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d007      	beq.n	800a29c <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fbd8 	bl	800aa4c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00c      	beq.n	800a2c0 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d007      	beq.n	800a2c0 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a2b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fbd0 	bl	800aa60 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00c      	beq.n	800a2e4 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d007      	beq.n	800a2e4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a2dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fbc8 	bl	800aa74 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2e4:	bf00      	nop
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a300:	2b01      	cmp	r3, #1
 800a302:	d101      	bne.n	800a308 <HAL_TIM_ConfigClockSource+0x1c>
 800a304:	2302      	movs	r3, #2
 800a306:	e0e6      	b.n	800a4d6 <HAL_TIM_ConfigClockSource+0x1ea>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2202      	movs	r2, #2
 800a314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a326:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a32a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a67      	ldr	r2, [pc, #412]	@ (800a4e0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800a342:	4293      	cmp	r3, r2
 800a344:	f000 80b1 	beq.w	800a4aa <HAL_TIM_ConfigClockSource+0x1be>
 800a348:	4a65      	ldr	r2, [pc, #404]	@ (800a4e0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	f200 80b6 	bhi.w	800a4bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a350:	4a64      	ldr	r2, [pc, #400]	@ (800a4e4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800a352:	4293      	cmp	r3, r2
 800a354:	f000 80a9 	beq.w	800a4aa <HAL_TIM_ConfigClockSource+0x1be>
 800a358:	4a62      	ldr	r2, [pc, #392]	@ (800a4e4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	f200 80ae 	bhi.w	800a4bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a360:	4a61      	ldr	r2, [pc, #388]	@ (800a4e8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800a362:	4293      	cmp	r3, r2
 800a364:	f000 80a1 	beq.w	800a4aa <HAL_TIM_ConfigClockSource+0x1be>
 800a368:	4a5f      	ldr	r2, [pc, #380]	@ (800a4e8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	f200 80a6 	bhi.w	800a4bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a370:	4a5e      	ldr	r2, [pc, #376]	@ (800a4ec <HAL_TIM_ConfigClockSource+0x200>)
 800a372:	4293      	cmp	r3, r2
 800a374:	f000 8099 	beq.w	800a4aa <HAL_TIM_ConfigClockSource+0x1be>
 800a378:	4a5c      	ldr	r2, [pc, #368]	@ (800a4ec <HAL_TIM_ConfigClockSource+0x200>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	f200 809e 	bhi.w	800a4bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a380:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a384:	f000 8091 	beq.w	800a4aa <HAL_TIM_ConfigClockSource+0x1be>
 800a388:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a38c:	f200 8096 	bhi.w	800a4bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a390:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a394:	f000 8089 	beq.w	800a4aa <HAL_TIM_ConfigClockSource+0x1be>
 800a398:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a39c:	f200 808e 	bhi.w	800a4bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a3a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3a4:	d03e      	beq.n	800a424 <HAL_TIM_ConfigClockSource+0x138>
 800a3a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3aa:	f200 8087 	bhi.w	800a4bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a3ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3b2:	f000 8086 	beq.w	800a4c2 <HAL_TIM_ConfigClockSource+0x1d6>
 800a3b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3ba:	d87f      	bhi.n	800a4bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a3bc:	2b70      	cmp	r3, #112	@ 0x70
 800a3be:	d01a      	beq.n	800a3f6 <HAL_TIM_ConfigClockSource+0x10a>
 800a3c0:	2b70      	cmp	r3, #112	@ 0x70
 800a3c2:	d87b      	bhi.n	800a4bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a3c4:	2b60      	cmp	r3, #96	@ 0x60
 800a3c6:	d050      	beq.n	800a46a <HAL_TIM_ConfigClockSource+0x17e>
 800a3c8:	2b60      	cmp	r3, #96	@ 0x60
 800a3ca:	d877      	bhi.n	800a4bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a3cc:	2b50      	cmp	r3, #80	@ 0x50
 800a3ce:	d03c      	beq.n	800a44a <HAL_TIM_ConfigClockSource+0x15e>
 800a3d0:	2b50      	cmp	r3, #80	@ 0x50
 800a3d2:	d873      	bhi.n	800a4bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a3d4:	2b40      	cmp	r3, #64	@ 0x40
 800a3d6:	d058      	beq.n	800a48a <HAL_TIM_ConfigClockSource+0x19e>
 800a3d8:	2b40      	cmp	r3, #64	@ 0x40
 800a3da:	d86f      	bhi.n	800a4bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a3dc:	2b30      	cmp	r3, #48	@ 0x30
 800a3de:	d064      	beq.n	800a4aa <HAL_TIM_ConfigClockSource+0x1be>
 800a3e0:	2b30      	cmp	r3, #48	@ 0x30
 800a3e2:	d86b      	bhi.n	800a4bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a3e4:	2b20      	cmp	r3, #32
 800a3e6:	d060      	beq.n	800a4aa <HAL_TIM_ConfigClockSource+0x1be>
 800a3e8:	2b20      	cmp	r3, #32
 800a3ea:	d867      	bhi.n	800a4bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d05c      	beq.n	800a4aa <HAL_TIM_ConfigClockSource+0x1be>
 800a3f0:	2b10      	cmp	r3, #16
 800a3f2:	d05a      	beq.n	800a4aa <HAL_TIM_ConfigClockSource+0x1be>
 800a3f4:	e062      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a406:	f000 fa17 	bl	800a838 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a418:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68ba      	ldr	r2, [r7, #8]
 800a420:	609a      	str	r2, [r3, #8]
      break;
 800a422:	e04f      	b.n	800a4c4 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a434:	f000 fa00 	bl	800a838 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	689a      	ldr	r2, [r3, #8]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a446:	609a      	str	r2, [r3, #8]
      break;
 800a448:	e03c      	b.n	800a4c4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a456:	461a      	mov	r2, r3
 800a458:	f000 f972 	bl	800a740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2150      	movs	r1, #80	@ 0x50
 800a462:	4618      	mov	r0, r3
 800a464:	f000 f9cb 	bl	800a7fe <TIM_ITRx_SetConfig>
      break;
 800a468:	e02c      	b.n	800a4c4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a476:	461a      	mov	r2, r3
 800a478:	f000 f991 	bl	800a79e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2160      	movs	r1, #96	@ 0x60
 800a482:	4618      	mov	r0, r3
 800a484:	f000 f9bb 	bl	800a7fe <TIM_ITRx_SetConfig>
      break;
 800a488:	e01c      	b.n	800a4c4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a496:	461a      	mov	r2, r3
 800a498:	f000 f952 	bl	800a740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2140      	movs	r1, #64	@ 0x40
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f000 f9ab 	bl	800a7fe <TIM_ITRx_SetConfig>
      break;
 800a4a8:	e00c      	b.n	800a4c4 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	f000 f9a2 	bl	800a7fe <TIM_ITRx_SetConfig>
      break;
 800a4ba:	e003      	b.n	800a4c4 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	73fb      	strb	r3, [r7, #15]
      break;
 800a4c0:	e000      	b.n	800a4c4 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800a4c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	00100070 	.word	0x00100070
 800a4e4:	00100040 	.word	0x00100040
 800a4e8:	00100030 	.word	0x00100030
 800a4ec:	00100020 	.word	0x00100020

0800a4f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a520:	bf00      	nop
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a6b      	ldr	r2, [pc, #428]	@ (800a700 <TIM_Base_SetConfig+0x1c0>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d02b      	beq.n	800a5b0 <TIM_Base_SetConfig+0x70>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a6a      	ldr	r2, [pc, #424]	@ (800a704 <TIM_Base_SetConfig+0x1c4>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d027      	beq.n	800a5b0 <TIM_Base_SetConfig+0x70>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a566:	d023      	beq.n	800a5b0 <TIM_Base_SetConfig+0x70>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a56e:	d01f      	beq.n	800a5b0 <TIM_Base_SetConfig+0x70>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4a65      	ldr	r2, [pc, #404]	@ (800a708 <TIM_Base_SetConfig+0x1c8>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d01b      	beq.n	800a5b0 <TIM_Base_SetConfig+0x70>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a64      	ldr	r2, [pc, #400]	@ (800a70c <TIM_Base_SetConfig+0x1cc>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d017      	beq.n	800a5b0 <TIM_Base_SetConfig+0x70>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a63      	ldr	r2, [pc, #396]	@ (800a710 <TIM_Base_SetConfig+0x1d0>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d013      	beq.n	800a5b0 <TIM_Base_SetConfig+0x70>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a62      	ldr	r2, [pc, #392]	@ (800a714 <TIM_Base_SetConfig+0x1d4>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d00f      	beq.n	800a5b0 <TIM_Base_SetConfig+0x70>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a61      	ldr	r2, [pc, #388]	@ (800a718 <TIM_Base_SetConfig+0x1d8>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d00b      	beq.n	800a5b0 <TIM_Base_SetConfig+0x70>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a60      	ldr	r2, [pc, #384]	@ (800a71c <TIM_Base_SetConfig+0x1dc>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d007      	beq.n	800a5b0 <TIM_Base_SetConfig+0x70>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a5f      	ldr	r2, [pc, #380]	@ (800a720 <TIM_Base_SetConfig+0x1e0>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d003      	beq.n	800a5b0 <TIM_Base_SetConfig+0x70>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a5e      	ldr	r2, [pc, #376]	@ (800a724 <TIM_Base_SetConfig+0x1e4>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d108      	bne.n	800a5c2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a4e      	ldr	r2, [pc, #312]	@ (800a700 <TIM_Base_SetConfig+0x1c0>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d043      	beq.n	800a652 <TIM_Base_SetConfig+0x112>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a4d      	ldr	r2, [pc, #308]	@ (800a704 <TIM_Base_SetConfig+0x1c4>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d03f      	beq.n	800a652 <TIM_Base_SetConfig+0x112>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5d8:	d03b      	beq.n	800a652 <TIM_Base_SetConfig+0x112>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a5e0:	d037      	beq.n	800a652 <TIM_Base_SetConfig+0x112>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a48      	ldr	r2, [pc, #288]	@ (800a708 <TIM_Base_SetConfig+0x1c8>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d033      	beq.n	800a652 <TIM_Base_SetConfig+0x112>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4a47      	ldr	r2, [pc, #284]	@ (800a70c <TIM_Base_SetConfig+0x1cc>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d02f      	beq.n	800a652 <TIM_Base_SetConfig+0x112>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4a46      	ldr	r2, [pc, #280]	@ (800a710 <TIM_Base_SetConfig+0x1d0>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d02b      	beq.n	800a652 <TIM_Base_SetConfig+0x112>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a45      	ldr	r2, [pc, #276]	@ (800a714 <TIM_Base_SetConfig+0x1d4>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d027      	beq.n	800a652 <TIM_Base_SetConfig+0x112>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a44      	ldr	r2, [pc, #272]	@ (800a718 <TIM_Base_SetConfig+0x1d8>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d023      	beq.n	800a652 <TIM_Base_SetConfig+0x112>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a43      	ldr	r2, [pc, #268]	@ (800a71c <TIM_Base_SetConfig+0x1dc>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d01f      	beq.n	800a652 <TIM_Base_SetConfig+0x112>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4a42      	ldr	r2, [pc, #264]	@ (800a720 <TIM_Base_SetConfig+0x1e0>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d01b      	beq.n	800a652 <TIM_Base_SetConfig+0x112>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a41      	ldr	r2, [pc, #260]	@ (800a724 <TIM_Base_SetConfig+0x1e4>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d017      	beq.n	800a652 <TIM_Base_SetConfig+0x112>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a40      	ldr	r2, [pc, #256]	@ (800a728 <TIM_Base_SetConfig+0x1e8>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d013      	beq.n	800a652 <TIM_Base_SetConfig+0x112>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4a3f      	ldr	r2, [pc, #252]	@ (800a72c <TIM_Base_SetConfig+0x1ec>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d00f      	beq.n	800a652 <TIM_Base_SetConfig+0x112>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a3e      	ldr	r2, [pc, #248]	@ (800a730 <TIM_Base_SetConfig+0x1f0>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d00b      	beq.n	800a652 <TIM_Base_SetConfig+0x112>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a3d      	ldr	r2, [pc, #244]	@ (800a734 <TIM_Base_SetConfig+0x1f4>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d007      	beq.n	800a652 <TIM_Base_SetConfig+0x112>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a3c      	ldr	r2, [pc, #240]	@ (800a738 <TIM_Base_SetConfig+0x1f8>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d003      	beq.n	800a652 <TIM_Base_SetConfig+0x112>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a3b      	ldr	r2, [pc, #236]	@ (800a73c <TIM_Base_SetConfig+0x1fc>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d108      	bne.n	800a664 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	68fa      	ldr	r2, [r7, #12]
 800a660:	4313      	orrs	r3, r2
 800a662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	695b      	ldr	r3, [r3, #20]
 800a66e:	4313      	orrs	r3, r2
 800a670:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	689a      	ldr	r2, [r3, #8]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a1e      	ldr	r2, [pc, #120]	@ (800a700 <TIM_Base_SetConfig+0x1c0>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d023      	beq.n	800a6d2 <TIM_Base_SetConfig+0x192>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a1d      	ldr	r2, [pc, #116]	@ (800a704 <TIM_Base_SetConfig+0x1c4>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d01f      	beq.n	800a6d2 <TIM_Base_SetConfig+0x192>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a22      	ldr	r2, [pc, #136]	@ (800a720 <TIM_Base_SetConfig+0x1e0>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d01b      	beq.n	800a6d2 <TIM_Base_SetConfig+0x192>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a21      	ldr	r2, [pc, #132]	@ (800a724 <TIM_Base_SetConfig+0x1e4>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d017      	beq.n	800a6d2 <TIM_Base_SetConfig+0x192>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a20      	ldr	r2, [pc, #128]	@ (800a728 <TIM_Base_SetConfig+0x1e8>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d013      	beq.n	800a6d2 <TIM_Base_SetConfig+0x192>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4a1f      	ldr	r2, [pc, #124]	@ (800a72c <TIM_Base_SetConfig+0x1ec>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d00f      	beq.n	800a6d2 <TIM_Base_SetConfig+0x192>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4a1e      	ldr	r2, [pc, #120]	@ (800a730 <TIM_Base_SetConfig+0x1f0>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d00b      	beq.n	800a6d2 <TIM_Base_SetConfig+0x192>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4a1d      	ldr	r2, [pc, #116]	@ (800a734 <TIM_Base_SetConfig+0x1f4>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d007      	beq.n	800a6d2 <TIM_Base_SetConfig+0x192>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a738 <TIM_Base_SetConfig+0x1f8>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d003      	beq.n	800a6d2 <TIM_Base_SetConfig+0x192>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a1b      	ldr	r2, [pc, #108]	@ (800a73c <TIM_Base_SetConfig+0x1fc>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d103      	bne.n	800a6da <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	691a      	ldr	r2, [r3, #16]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f043 0204 	orr.w	r2, r3, #4
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	601a      	str	r2, [r3, #0]
}
 800a6f2:	bf00      	nop
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	40012c00 	.word	0x40012c00
 800a704:	50012c00 	.word	0x50012c00
 800a708:	40000400 	.word	0x40000400
 800a70c:	50000400 	.word	0x50000400
 800a710:	40000800 	.word	0x40000800
 800a714:	50000800 	.word	0x50000800
 800a718:	40000c00 	.word	0x40000c00
 800a71c:	50000c00 	.word	0x50000c00
 800a720:	40013400 	.word	0x40013400
 800a724:	50013400 	.word	0x50013400
 800a728:	40014000 	.word	0x40014000
 800a72c:	50014000 	.word	0x50014000
 800a730:	40014400 	.word	0x40014400
 800a734:	50014400 	.word	0x50014400
 800a738:	40014800 	.word	0x40014800
 800a73c:	50014800 	.word	0x50014800

0800a740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a740:	b480      	push	{r7}
 800a742:	b087      	sub	sp, #28
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6a1b      	ldr	r3, [r3, #32]
 800a750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	f023 0201 	bic.w	r2, r3, #1
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a76a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	011b      	lsls	r3, r3, #4
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	4313      	orrs	r3, r2
 800a774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f023 030a 	bic.w	r3, r3, #10
 800a77c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	4313      	orrs	r3, r2
 800a784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	693a      	ldr	r2, [r7, #16]
 800a78a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	621a      	str	r2, [r3, #32]
}
 800a792:	bf00      	nop
 800a794:	371c      	adds	r7, #28
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	b087      	sub	sp, #28
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	60f8      	str	r0, [r7, #12]
 800a7a6:	60b9      	str	r1, [r7, #8]
 800a7a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	6a1b      	ldr	r3, [r3, #32]
 800a7ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6a1b      	ldr	r3, [r3, #32]
 800a7b4:	f023 0210 	bic.w	r2, r3, #16
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	699b      	ldr	r3, [r3, #24]
 800a7c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a7c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	031b      	lsls	r3, r3, #12
 800a7ce:	693a      	ldr	r2, [r7, #16]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a7da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	011b      	lsls	r3, r3, #4
 800a7e0:	697a      	ldr	r2, [r7, #20]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	693a      	ldr	r2, [r7, #16]
 800a7ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	621a      	str	r2, [r3, #32]
}
 800a7f2:	bf00      	nop
 800a7f4:	371c      	adds	r7, #28
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b085      	sub	sp, #20
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a818:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a81a:	683a      	ldr	r2, [r7, #0]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	4313      	orrs	r3, r2
 800a820:	f043 0307 	orr.w	r3, r3, #7
 800a824:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	609a      	str	r2, [r3, #8]
}
 800a82c:	bf00      	nop
 800a82e:	3714      	adds	r7, #20
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
 800a844:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a852:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	021a      	lsls	r2, r3, #8
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	431a      	orrs	r2, r3
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	4313      	orrs	r3, r2
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	4313      	orrs	r3, r2
 800a864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	609a      	str	r2, [r3, #8]
}
 800a86c:	bf00      	nop
 800a86e:	371c      	adds	r7, #28
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d101      	bne.n	800a890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a88c:	2302      	movs	r3, #2
 800a88e:	e097      	b.n	800a9c0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2202      	movs	r2, #2
 800a89c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a45      	ldr	r2, [pc, #276]	@ (800a9cc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d00e      	beq.n	800a8d8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a44      	ldr	r2, [pc, #272]	@ (800a9d0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d009      	beq.n	800a8d8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a42      	ldr	r2, [pc, #264]	@ (800a9d4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d004      	beq.n	800a8d8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a41      	ldr	r2, [pc, #260]	@ (800a9d8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d108      	bne.n	800a8ea <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a8de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a8f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a2f      	ldr	r2, [pc, #188]	@ (800a9cc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d040      	beq.n	800a994 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a2e      	ldr	r2, [pc, #184]	@ (800a9d0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d03b      	beq.n	800a994 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a924:	d036      	beq.n	800a994 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a92e:	d031      	beq.n	800a994 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a29      	ldr	r2, [pc, #164]	@ (800a9dc <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d02c      	beq.n	800a994 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a28      	ldr	r2, [pc, #160]	@ (800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d027      	beq.n	800a994 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a26      	ldr	r2, [pc, #152]	@ (800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d022      	beq.n	800a994 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a25      	ldr	r2, [pc, #148]	@ (800a9e8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d01d      	beq.n	800a994 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a23      	ldr	r2, [pc, #140]	@ (800a9ec <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d018      	beq.n	800a994 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a22      	ldr	r2, [pc, #136]	@ (800a9f0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d013      	beq.n	800a994 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a18      	ldr	r2, [pc, #96]	@ (800a9d4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d00e      	beq.n	800a994 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a17      	ldr	r2, [pc, #92]	@ (800a9d8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d009      	beq.n	800a994 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a1b      	ldr	r2, [pc, #108]	@ (800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d004      	beq.n	800a994 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a1a      	ldr	r2, [pc, #104]	@ (800a9f8 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d10c      	bne.n	800a9ae <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a99a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	68ba      	ldr	r2, [r7, #8]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3714      	adds	r7, #20
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr
 800a9cc:	40012c00 	.word	0x40012c00
 800a9d0:	50012c00 	.word	0x50012c00
 800a9d4:	40013400 	.word	0x40013400
 800a9d8:	50013400 	.word	0x50013400
 800a9dc:	40000400 	.word	0x40000400
 800a9e0:	50000400 	.word	0x50000400
 800a9e4:	40000800 	.word	0x40000800
 800a9e8:	50000800 	.word	0x50000800
 800a9ec:	40000c00 	.word	0x40000c00
 800a9f0:	50000c00 	.word	0x50000c00
 800a9f4:	40014000 	.word	0x40014000
 800a9f8:	50014000 	.word	0x50014000

0800a9fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa04:	bf00      	nop
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800aa68:	bf00      	nop
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800aa7c:	bf00      	nop
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d101      	bne.n	800aa9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	e042      	b.n	800ab20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d106      	bne.n	800aab2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f7f7 fa43 	bl	8001f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2224      	movs	r2, #36	@ 0x24
 800aab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f022 0201 	bic.w	r2, r2, #1
 800aac8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d002      	beq.n	800aad8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fd60 	bl	800b598 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 fbbb 	bl	800b254 <UART_SetConfig>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d101      	bne.n	800aae8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	e01b      	b.n	800ab20 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	685a      	ldr	r2, [r3, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aaf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	689a      	ldr	r2, [r3, #8]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f042 0201 	orr.w	r2, r2, #1
 800ab16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fddf 	bl	800b6dc <UART_CheckIdleState>
 800ab1e:	4603      	mov	r3, r0
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b08a      	sub	sp, #40	@ 0x28
 800ab2c:	af02      	add	r7, sp, #8
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	603b      	str	r3, [r7, #0]
 800ab34:	4613      	mov	r3, r2
 800ab36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab3e:	2b20      	cmp	r3, #32
 800ab40:	f040 808b 	bne.w	800ac5a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d002      	beq.n	800ab50 <HAL_UART_Transmit+0x28>
 800ab4a:	88fb      	ldrh	r3, [r7, #6]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d101      	bne.n	800ab54 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ab50:	2301      	movs	r3, #1
 800ab52:	e083      	b.n	800ac5c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab5e:	2b80      	cmp	r3, #128	@ 0x80
 800ab60:	d107      	bne.n	800ab72 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	689a      	ldr	r2, [r3, #8]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ab70:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2221      	movs	r2, #33	@ 0x21
 800ab7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab82:	f7f8 f887 	bl	8002c94 <HAL_GetTick>
 800ab86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	88fa      	ldrh	r2, [r7, #6]
 800ab8c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	88fa      	ldrh	r2, [r7, #6]
 800ab94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aba0:	d108      	bne.n	800abb4 <HAL_UART_Transmit+0x8c>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d104      	bne.n	800abb4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800abaa:	2300      	movs	r3, #0
 800abac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	61bb      	str	r3, [r7, #24]
 800abb2:	e003      	b.n	800abbc <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800abb8:	2300      	movs	r3, #0
 800abba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800abbc:	e030      	b.n	800ac20 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	2200      	movs	r2, #0
 800abc6:	2180      	movs	r1, #128	@ 0x80
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	f000 fe31 	bl	800b830 <UART_WaitOnFlagUntilTimeout>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d005      	beq.n	800abe0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2220      	movs	r2, #32
 800abd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800abdc:	2303      	movs	r3, #3
 800abde:	e03d      	b.n	800ac5c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d10b      	bne.n	800abfe <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	881b      	ldrh	r3, [r3, #0]
 800abea:	461a      	mov	r2, r3
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abf4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	3302      	adds	r3, #2
 800abfa:	61bb      	str	r3, [r7, #24]
 800abfc:	e007      	b.n	800ac0e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	781a      	ldrb	r2, [r3, #0]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	3b01      	subs	r3, #1
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1c8      	bne.n	800abbe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	2200      	movs	r2, #0
 800ac34:	2140      	movs	r1, #64	@ 0x40
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f000 fdfa 	bl	800b830 <UART_WaitOnFlagUntilTimeout>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d005      	beq.n	800ac4e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2220      	movs	r2, #32
 800ac46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ac4a:	2303      	movs	r3, #3
 800ac4c:	e006      	b.n	800ac5c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2220      	movs	r2, #32
 800ac52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ac56:	2300      	movs	r3, #0
 800ac58:	e000      	b.n	800ac5c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800ac5a:	2302      	movs	r3, #2
  }
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3720      	adds	r7, #32
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b0ae      	sub	sp, #184	@ 0xb8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	69db      	ldr	r3, [r3, #28]
 800ac72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ac8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ac8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ac92:	4013      	ands	r3, r2
 800ac94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800ac98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d11b      	bne.n	800acd8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aca0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aca4:	f003 0320 	and.w	r3, r3, #32
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d015      	beq.n	800acd8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800acac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800acb0:	f003 0320 	and.w	r3, r3, #32
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d105      	bne.n	800acc4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800acb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800acbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d009      	beq.n	800acd8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f000 8297 	beq.w	800b1fc <HAL_UART_IRQHandler+0x598>
      {
        huart->RxISR(huart);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	4798      	blx	r3
      }
      return;
 800acd6:	e291      	b.n	800b1fc <HAL_UART_IRQHandler+0x598>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800acd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f000 80fd 	beq.w	800aedc <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ace2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ace6:	4b7a      	ldr	r3, [pc, #488]	@ (800aed0 <HAL_UART_IRQHandler+0x26c>)
 800ace8:	4013      	ands	r3, r2
 800acea:	2b00      	cmp	r3, #0
 800acec:	d106      	bne.n	800acfc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800acee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800acf2:	4b78      	ldr	r3, [pc, #480]	@ (800aed4 <HAL_UART_IRQHandler+0x270>)
 800acf4:	4013      	ands	r3, r2
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 80f0 	beq.w	800aedc <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800acfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad00:	f003 0301 	and.w	r3, r3, #1
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d011      	beq.n	800ad2c <HAL_UART_IRQHandler+0xc8>
 800ad08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ad0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d00b      	beq.n	800ad2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad22:	f043 0201 	orr.w	r2, r3, #1
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad30:	f003 0302 	and.w	r3, r3, #2
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d011      	beq.n	800ad5c <HAL_UART_IRQHandler+0xf8>
 800ad38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad3c:	f003 0301 	and.w	r3, r3, #1
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00b      	beq.n	800ad5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2202      	movs	r2, #2
 800ad4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad52:	f043 0204 	orr.w	r2, r3, #4
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad60:	f003 0304 	and.w	r3, r3, #4
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d011      	beq.n	800ad8c <HAL_UART_IRQHandler+0x128>
 800ad68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad6c:	f003 0301 	and.w	r3, r3, #1
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00b      	beq.n	800ad8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2204      	movs	r2, #4
 800ad7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad82:	f043 0202 	orr.w	r2, r3, #2
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ad8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad90:	f003 0308 	and.w	r3, r3, #8
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d017      	beq.n	800adc8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ad98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ad9c:	f003 0320 	and.w	r3, r3, #32
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d105      	bne.n	800adb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ada4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ada8:	4b49      	ldr	r3, [pc, #292]	@ (800aed0 <HAL_UART_IRQHandler+0x26c>)
 800adaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800adac:	2b00      	cmp	r3, #0
 800adae:	d00b      	beq.n	800adc8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2208      	movs	r2, #8
 800adb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adbe:	f043 0208 	orr.w	r2, r3, #8
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800adc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800adcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800add0:	2b00      	cmp	r3, #0
 800add2:	d012      	beq.n	800adfa <HAL_UART_IRQHandler+0x196>
 800add4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800add8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00c      	beq.n	800adfa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ade8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adf0:	f043 0220 	orr.w	r2, r3, #32
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 81fd 	beq.w	800b200 <HAL_UART_IRQHandler+0x59c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae0a:	f003 0320 	and.w	r3, r3, #32
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d013      	beq.n	800ae3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ae12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ae16:	f003 0320 	and.w	r3, r3, #32
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d105      	bne.n	800ae2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ae1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d007      	beq.n	800ae3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d003      	beq.n	800ae3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae4e:	2b40      	cmp	r3, #64	@ 0x40
 800ae50:	d005      	beq.n	800ae5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ae52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ae56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d02e      	beq.n	800aebc <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fd53 	bl	800b90a <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae6e:	2b40      	cmp	r3, #64	@ 0x40
 800ae70:	d120      	bne.n	800aeb4 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d017      	beq.n	800aeac <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae82:	4a15      	ldr	r2, [pc, #84]	@ (800aed8 <HAL_UART_IRQHandler+0x274>)
 800ae84:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7f8 f94b 	bl	8003128 <HAL_DMA_Abort_IT>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d019      	beq.n	800aecc <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800aea6:	4610      	mov	r0, r2
 800aea8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeaa:	e00f      	b.n	800aecc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f9bb 	bl	800b228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeb2:	e00b      	b.n	800aecc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f9b7 	bl	800b228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeba:	e007      	b.n	800aecc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f9b3 	bl	800b228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800aeca:	e199      	b.n	800b200 <HAL_UART_IRQHandler+0x59c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aecc:	bf00      	nop
    return;
 800aece:	e197      	b.n	800b200 <HAL_UART_IRQHandler+0x59c>
 800aed0:	10000001 	.word	0x10000001
 800aed4:	04000120 	.word	0x04000120
 800aed8:	0800b9d7 	.word	0x0800b9d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	f040 8142 	bne.w	800b16a <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aee6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aeea:	f003 0310 	and.w	r3, r3, #16
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f000 813b 	beq.w	800b16a <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aef4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aef8:	f003 0310 	and.w	r3, r3, #16
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f000 8134 	beq.w	800b16a <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2210      	movs	r2, #16
 800af08:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af14:	2b40      	cmp	r3, #64	@ 0x40
 800af16:	f040 80aa 	bne.w	800b06e <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af24:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800af28:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 8084 	beq.w	800b03a <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af38:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d27c      	bcs.n	800b03a <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800af46:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af52:	2b81      	cmp	r3, #129	@ 0x81
 800af54:	d060      	beq.n	800b018 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af5e:	e853 3f00 	ldrex	r3, [r3]
 800af62:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800af64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	461a      	mov	r2, r3
 800af74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800af78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800af7c:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800af80:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800af84:	e841 2300 	strex	r3, r2, [r1]
 800af88:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800af8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1e2      	bne.n	800af56 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	3308      	adds	r3, #8
 800af96:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af9a:	e853 3f00 	ldrex	r3, [r3]
 800af9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800afa0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afa2:	f023 0301 	bic.w	r3, r3, #1
 800afa6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	3308      	adds	r3, #8
 800afb0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800afb4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800afb6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800afba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800afbc:	e841 2300 	strex	r3, r2, [r1]
 800afc0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800afc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1e3      	bne.n	800af90 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2220      	movs	r2, #32
 800afcc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afde:	e853 3f00 	ldrex	r3, [r3]
 800afe2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800afe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800afe6:	f023 0310 	bic.w	r3, r3, #16
 800afea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	461a      	mov	r2, r3
 800aff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aff8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800affa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800affe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b000:	e841 2300 	strex	r3, r2, [r1]
 800b004:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1e4      	bne.n	800afd6 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b012:	4618      	mov	r0, r3
 800b014:	f7f8 f80c 	bl	8003030 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2202      	movs	r2, #2
 800b01c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	b29b      	uxth	r3, r3
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f902 	bl	800b23c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b038:	e0e4      	b.n	800b204 <HAL_UART_IRQHandler+0x5a0>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b040:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b044:	429a      	cmp	r2, r3
 800b046:	f040 80dd 	bne.w	800b204 <HAL_UART_IRQHandler+0x5a0>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b052:	2b81      	cmp	r3, #129	@ 0x81
 800b054:	f040 80d6 	bne.w	800b204 <HAL_UART_IRQHandler+0x5a0>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2202      	movs	r2, #2
 800b05c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b064:	4619      	mov	r1, r3
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f8e8 	bl	800b23c <HAL_UARTEx_RxEventCallback>
      return;
 800b06c:	e0ca      	b.n	800b204 <HAL_UART_IRQHandler+0x5a0>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	1ad3      	subs	r3, r2, r3
 800b07e:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b088:	b29b      	uxth	r3, r3
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f000 80bc 	beq.w	800b208 <HAL_UART_IRQHandler+0x5a4>
          && (nb_rx_data > 0U))
 800b090:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800b094:	2b00      	cmp	r3, #0
 800b096:	f000 80b7 	beq.w	800b208 <HAL_UART_IRQHandler+0x5a4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a2:	e853 3f00 	ldrex	r3, [r3]
 800b0a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b0bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0c4:	e841 2300 	strex	r3, r2, [r1]
 800b0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b0ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d1e4      	bne.n	800b09a <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3308      	adds	r3, #8
 800b0d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0da:	e853 3f00 	ldrex	r3, [r3]
 800b0de:	623b      	str	r3, [r7, #32]
   return(result);
 800b0e0:	6a3b      	ldr	r3, [r7, #32]
 800b0e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0e6:	f023 0301 	bic.w	r3, r3, #1
 800b0ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	3308      	adds	r3, #8
 800b0f4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b0f8:	633a      	str	r2, [r7, #48]	@ 0x30
 800b0fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b100:	e841 2300 	strex	r3, r2, [r1]
 800b104:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1e1      	bne.n	800b0d0 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2220      	movs	r2, #32
 800b110:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	e853 3f00 	ldrex	r3, [r3]
 800b12c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f023 0310 	bic.w	r3, r3, #16
 800b134:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	461a      	mov	r2, r3
 800b13e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b142:	61fb      	str	r3, [r7, #28]
 800b144:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b146:	69b9      	ldr	r1, [r7, #24]
 800b148:	69fa      	ldr	r2, [r7, #28]
 800b14a:	e841 2300 	strex	r3, r2, [r1]
 800b14e:	617b      	str	r3, [r7, #20]
   return(result);
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d1e4      	bne.n	800b120 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2202      	movs	r2, #2
 800b15a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b15c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800b160:	4619      	mov	r1, r3
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f86a 	bl	800b23c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b168:	e04e      	b.n	800b208 <HAL_UART_IRQHandler+0x5a4>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b16a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b16e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b172:	2b00      	cmp	r3, #0
 800b174:	d014      	beq.n	800b1a0 <HAL_UART_IRQHandler+0x53c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b176:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b17a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d105      	bne.n	800b18e <HAL_UART_IRQHandler+0x52a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b186:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d008      	beq.n	800b1a0 <HAL_UART_IRQHandler+0x53c>
  {
    if (huart->TxISR != NULL)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b192:	2b00      	cmp	r3, #0
 800b194:	d03a      	beq.n	800b20c <HAL_UART_IRQHandler+0x5a8>
    {
      huart->TxISR(huart);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	4798      	blx	r3
    }
    return;
 800b19e:	e035      	b.n	800b20c <HAL_UART_IRQHandler+0x5a8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b1a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b1a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d009      	beq.n	800b1c0 <HAL_UART_IRQHandler+0x55c>
 800b1ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b1b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d003      	beq.n	800b1c0 <HAL_UART_IRQHandler+0x55c>
  {
    UART_EndTransmit_IT(huart);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 fc1e 	bl	800b9fa <UART_EndTransmit_IT>
    return;
 800b1be:	e026      	b.n	800b20e <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b1c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b1c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d009      	beq.n	800b1e0 <HAL_UART_IRQHandler+0x57c>
 800b1cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b1d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d003      	beq.n	800b1e0 <HAL_UART_IRQHandler+0x57c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fc43 	bl	800ba64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b1de:	e016      	b.n	800b20e <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b1e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b1e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d010      	beq.n	800b20e <HAL_UART_IRQHandler+0x5aa>
 800b1ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	da0c      	bge.n	800b20e <HAL_UART_IRQHandler+0x5aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fc2b 	bl	800ba50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b1fa:	e008      	b.n	800b20e <HAL_UART_IRQHandler+0x5aa>
      return;
 800b1fc:	bf00      	nop
 800b1fe:	e006      	b.n	800b20e <HAL_UART_IRQHandler+0x5aa>
    return;
 800b200:	bf00      	nop
 800b202:	e004      	b.n	800b20e <HAL_UART_IRQHandler+0x5aa>
      return;
 800b204:	bf00      	nop
 800b206:	e002      	b.n	800b20e <HAL_UART_IRQHandler+0x5aa>
      return;
 800b208:	bf00      	nop
 800b20a:	e000      	b.n	800b20e <HAL_UART_IRQHandler+0x5aa>
    return;
 800b20c:	bf00      	nop
  }
}
 800b20e:	37b8      	adds	r7, #184	@ 0xb8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b21c:	bf00      	nop
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b258:	b094      	sub	sp, #80	@ 0x50
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	4b7e      	ldr	r3, [pc, #504]	@ (800b464 <UART_SetConfig+0x210>)
 800b26a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b26e:	689a      	ldr	r2, [r3, #8]
 800b270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	431a      	orrs	r2, r3
 800b276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	431a      	orrs	r2, r3
 800b27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b27e:	69db      	ldr	r3, [r3, #28]
 800b280:	4313      	orrs	r3, r2
 800b282:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4977      	ldr	r1, [pc, #476]	@ (800b468 <UART_SetConfig+0x214>)
 800b28c:	4019      	ands	r1, r3
 800b28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b294:	430b      	orrs	r3, r1
 800b296:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a4:	68d9      	ldr	r1, [r3, #12]
 800b2a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	ea40 0301 	orr.w	r3, r0, r1
 800b2ae:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b2:	699b      	ldr	r3, [r3, #24]
 800b2b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	4b6a      	ldr	r3, [pc, #424]	@ (800b464 <UART_SetConfig+0x210>)
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d009      	beq.n	800b2d4 <UART_SetConfig+0x80>
 800b2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	4b69      	ldr	r3, [pc, #420]	@ (800b46c <UART_SetConfig+0x218>)
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d004      	beq.n	800b2d4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2cc:	6a1a      	ldr	r2, [r3, #32]
 800b2ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b2de:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2e8:	430b      	orrs	r3, r1
 800b2ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f2:	f023 000f 	bic.w	r0, r3, #15
 800b2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	ea40 0301 	orr.w	r3, r0, r1
 800b302:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	4b59      	ldr	r3, [pc, #356]	@ (800b470 <UART_SetConfig+0x21c>)
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d102      	bne.n	800b314 <UART_SetConfig+0xc0>
 800b30e:	2301      	movs	r3, #1
 800b310:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b312:	e029      	b.n	800b368 <UART_SetConfig+0x114>
 800b314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	4b56      	ldr	r3, [pc, #344]	@ (800b474 <UART_SetConfig+0x220>)
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d102      	bne.n	800b324 <UART_SetConfig+0xd0>
 800b31e:	2302      	movs	r3, #2
 800b320:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b322:	e021      	b.n	800b368 <UART_SetConfig+0x114>
 800b324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	4b53      	ldr	r3, [pc, #332]	@ (800b478 <UART_SetConfig+0x224>)
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d102      	bne.n	800b334 <UART_SetConfig+0xe0>
 800b32e:	2304      	movs	r3, #4
 800b330:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b332:	e019      	b.n	800b368 <UART_SetConfig+0x114>
 800b334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	4b50      	ldr	r3, [pc, #320]	@ (800b47c <UART_SetConfig+0x228>)
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d102      	bne.n	800b344 <UART_SetConfig+0xf0>
 800b33e:	2308      	movs	r3, #8
 800b340:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b342:	e011      	b.n	800b368 <UART_SetConfig+0x114>
 800b344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	4b4d      	ldr	r3, [pc, #308]	@ (800b480 <UART_SetConfig+0x22c>)
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d102      	bne.n	800b354 <UART_SetConfig+0x100>
 800b34e:	2310      	movs	r3, #16
 800b350:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b352:	e009      	b.n	800b368 <UART_SetConfig+0x114>
 800b354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	4b42      	ldr	r3, [pc, #264]	@ (800b464 <UART_SetConfig+0x210>)
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d102      	bne.n	800b364 <UART_SetConfig+0x110>
 800b35e:	2320      	movs	r3, #32
 800b360:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b362:	e001      	b.n	800b368 <UART_SetConfig+0x114>
 800b364:	2300      	movs	r3, #0
 800b366:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	4b3d      	ldr	r3, [pc, #244]	@ (800b464 <UART_SetConfig+0x210>)
 800b36e:	429a      	cmp	r2, r3
 800b370:	d005      	beq.n	800b37e <UART_SetConfig+0x12a>
 800b372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	4b3d      	ldr	r3, [pc, #244]	@ (800b46c <UART_SetConfig+0x218>)
 800b378:	429a      	cmp	r2, r3
 800b37a:	f040 8085 	bne.w	800b488 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b37e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b380:	2200      	movs	r2, #0
 800b382:	623b      	str	r3, [r7, #32]
 800b384:	627a      	str	r2, [r7, #36]	@ 0x24
 800b386:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b38a:	f7fd fb23 	bl	80089d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b38e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b392:	2b00      	cmp	r3, #0
 800b394:	f000 80e8 	beq.w	800b568 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b39c:	4a39      	ldr	r2, [pc, #228]	@ (800b484 <UART_SetConfig+0x230>)
 800b39e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3aa:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ae:	685a      	ldr	r2, [r3, #4]
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	005b      	lsls	r3, r3, #1
 800b3b4:	4413      	add	r3, r2
 800b3b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d305      	bcc.n	800b3c8 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d903      	bls.n	800b3d0 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b3ce:	e048      	b.n	800b462 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	61bb      	str	r3, [r7, #24]
 800b3d6:	61fa      	str	r2, [r7, #28]
 800b3d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3dc:	4a29      	ldr	r2, [pc, #164]	@ (800b484 <UART_SetConfig+0x230>)
 800b3de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	613b      	str	r3, [r7, #16]
 800b3e8:	617a      	str	r2, [r7, #20]
 800b3ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b3ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b3f2:	f7f5 fbdd 	bl	8000bb0 <__aeabi_uldivmod>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	4610      	mov	r0, r2
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	f04f 0200 	mov.w	r2, #0
 800b402:	f04f 0300 	mov.w	r3, #0
 800b406:	020b      	lsls	r3, r1, #8
 800b408:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b40c:	0202      	lsls	r2, r0, #8
 800b40e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b410:	6849      	ldr	r1, [r1, #4]
 800b412:	0849      	lsrs	r1, r1, #1
 800b414:	2000      	movs	r0, #0
 800b416:	460c      	mov	r4, r1
 800b418:	4605      	mov	r5, r0
 800b41a:	eb12 0804 	adds.w	r8, r2, r4
 800b41e:	eb43 0905 	adc.w	r9, r3, r5
 800b422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	60bb      	str	r3, [r7, #8]
 800b42a:	60fa      	str	r2, [r7, #12]
 800b42c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b430:	4640      	mov	r0, r8
 800b432:	4649      	mov	r1, r9
 800b434:	f7f5 fbbc 	bl	8000bb0 <__aeabi_uldivmod>
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	4613      	mov	r3, r2
 800b43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b442:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b446:	d308      	bcc.n	800b45a <UART_SetConfig+0x206>
 800b448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b44a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b44e:	d204      	bcs.n	800b45a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800b450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b456:	60da      	str	r2, [r3, #12]
 800b458:	e003      	b.n	800b462 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b460:	e082      	b.n	800b568 <UART_SetConfig+0x314>
 800b462:	e081      	b.n	800b568 <UART_SetConfig+0x314>
 800b464:	46002400 	.word	0x46002400
 800b468:	cfff69f3 	.word	0xcfff69f3
 800b46c:	56002400 	.word	0x56002400
 800b470:	40013800 	.word	0x40013800
 800b474:	40004400 	.word	0x40004400
 800b478:	40004800 	.word	0x40004800
 800b47c:	40004c00 	.word	0x40004c00
 800b480:	40005000 	.word	0x40005000
 800b484:	0800e6a8 	.word	0x0800e6a8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b48a:	69db      	ldr	r3, [r3, #28]
 800b48c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b490:	d13c      	bne.n	800b50c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b494:	2200      	movs	r2, #0
 800b496:	603b      	str	r3, [r7, #0]
 800b498:	607a      	str	r2, [r7, #4]
 800b49a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b49e:	f7fd fa99 	bl	80089d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b4a2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b4a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d05e      	beq.n	800b568 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4ae:	4a39      	ldr	r2, [pc, #228]	@ (800b594 <UART_SetConfig+0x340>)
 800b4b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4bc:	005a      	lsls	r2, r3, #1
 800b4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	085b      	lsrs	r3, r3, #1
 800b4c4:	441a      	add	r2, r3
 800b4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4d2:	2b0f      	cmp	r3, #15
 800b4d4:	d916      	bls.n	800b504 <UART_SetConfig+0x2b0>
 800b4d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4dc:	d212      	bcs.n	800b504 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b4de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	f023 030f 	bic.w	r3, r3, #15
 800b4e6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b4e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ea:	085b      	lsrs	r3, r3, #1
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	f003 0307 	and.w	r3, r3, #7
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b500:	60da      	str	r2, [r3, #12]
 800b502:	e031      	b.n	800b568 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b50a:	e02d      	b.n	800b568 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b50c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b50e:	2200      	movs	r2, #0
 800b510:	469a      	mov	sl, r3
 800b512:	4693      	mov	fp, r2
 800b514:	4650      	mov	r0, sl
 800b516:	4659      	mov	r1, fp
 800b518:	f7fd fa5c 	bl	80089d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b51c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b51e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b520:	2b00      	cmp	r3, #0
 800b522:	d021      	beq.n	800b568 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b528:	4a1a      	ldr	r2, [pc, #104]	@ (800b594 <UART_SetConfig+0x340>)
 800b52a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b52e:	461a      	mov	r2, r3
 800b530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b532:	fbb3 f2f2 	udiv	r2, r3, r2
 800b536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	085b      	lsrs	r3, r3, #1
 800b53c:	441a      	add	r2, r3
 800b53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	fbb2 f3f3 	udiv	r3, r2, r3
 800b546:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b54a:	2b0f      	cmp	r3, #15
 800b54c:	d909      	bls.n	800b562 <UART_SetConfig+0x30e>
 800b54e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b554:	d205      	bcs.n	800b562 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b558:	b29a      	uxth	r2, r3
 800b55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	60da      	str	r2, [r3, #12]
 800b560:	e002      	b.n	800b568 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b56a:	2201      	movs	r2, #1
 800b56c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b572:	2201      	movs	r2, #1
 800b574:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b57a:	2200      	movs	r2, #0
 800b57c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b580:	2200      	movs	r2, #0
 800b582:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b584:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3750      	adds	r7, #80	@ 0x50
 800b58c:	46bd      	mov	sp, r7
 800b58e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b592:	bf00      	nop
 800b594:	0800e6a8 	.word	0x0800e6a8

0800b598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a4:	f003 0308 	and.w	r3, r3, #8
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00a      	beq.n	800b5c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	430a      	orrs	r2, r1
 800b5c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5c6:	f003 0301 	and.w	r3, r3, #1
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00a      	beq.n	800b5e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	430a      	orrs	r2, r1
 800b5e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e8:	f003 0302 	and.w	r3, r3, #2
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00a      	beq.n	800b606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	430a      	orrs	r2, r1
 800b604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b60a:	f003 0304 	and.w	r3, r3, #4
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d00a      	beq.n	800b628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	430a      	orrs	r2, r1
 800b626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b62c:	f003 0310 	and.w	r3, r3, #16
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00a      	beq.n	800b64a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	689b      	ldr	r3, [r3, #8]
 800b63a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	430a      	orrs	r2, r1
 800b648:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b64e:	f003 0320 	and.w	r3, r3, #32
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00a      	beq.n	800b66c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	430a      	orrs	r2, r1
 800b66a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b674:	2b00      	cmp	r3, #0
 800b676:	d01a      	beq.n	800b6ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	430a      	orrs	r2, r1
 800b68c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b692:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b696:	d10a      	bne.n	800b6ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	430a      	orrs	r2, r1
 800b6ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00a      	beq.n	800b6d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	430a      	orrs	r2, r1
 800b6ce:	605a      	str	r2, [r3, #4]
  }
}
 800b6d0:	bf00      	nop
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b098      	sub	sp, #96	@ 0x60
 800b6e0:	af02      	add	r7, sp, #8
 800b6e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b6ec:	f7f7 fad2 	bl	8002c94 <HAL_GetTick>
 800b6f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f003 0308 	and.w	r3, r3, #8
 800b6fc:	2b08      	cmp	r3, #8
 800b6fe:	d12f      	bne.n	800b760 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b700:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b708:	2200      	movs	r2, #0
 800b70a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 f88e 	bl	800b830 <UART_WaitOnFlagUntilTimeout>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d022      	beq.n	800b760 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b722:	e853 3f00 	ldrex	r3, [r3]
 800b726:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b72a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b72e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	461a      	mov	r2, r3
 800b736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b738:	647b      	str	r3, [r7, #68]	@ 0x44
 800b73a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b73e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b740:	e841 2300 	strex	r3, r2, [r1]
 800b744:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1e6      	bne.n	800b71a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2220      	movs	r2, #32
 800b750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b75c:	2303      	movs	r3, #3
 800b75e:	e063      	b.n	800b828 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f003 0304 	and.w	r3, r3, #4
 800b76a:	2b04      	cmp	r3, #4
 800b76c:	d149      	bne.n	800b802 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b76e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b776:	2200      	movs	r2, #0
 800b778:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 f857 	bl	800b830 <UART_WaitOnFlagUntilTimeout>
 800b782:	4603      	mov	r3, r0
 800b784:	2b00      	cmp	r3, #0
 800b786:	d03c      	beq.n	800b802 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b790:	e853 3f00 	ldrex	r3, [r3]
 800b794:	623b      	str	r3, [r7, #32]
   return(result);
 800b796:	6a3b      	ldr	r3, [r7, #32]
 800b798:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b79c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b7a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7ae:	e841 2300 	strex	r3, r2, [r1]
 800b7b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d1e6      	bne.n	800b788 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	3308      	adds	r3, #8
 800b7c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	e853 3f00 	ldrex	r3, [r3]
 800b7c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f023 0301 	bic.w	r3, r3, #1
 800b7d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	3308      	adds	r3, #8
 800b7d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b7da:	61fa      	str	r2, [r7, #28]
 800b7dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7de:	69b9      	ldr	r1, [r7, #24]
 800b7e0:	69fa      	ldr	r2, [r7, #28]
 800b7e2:	e841 2300 	strex	r3, r2, [r1]
 800b7e6:	617b      	str	r3, [r7, #20]
   return(result);
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1e5      	bne.n	800b7ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2220      	movs	r2, #32
 800b7f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7fe:	2303      	movs	r3, #3
 800b800:	e012      	b.n	800b828 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2220      	movs	r2, #32
 800b806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2220      	movs	r2, #32
 800b80e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2200      	movs	r2, #0
 800b822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b826:	2300      	movs	r3, #0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3758      	adds	r7, #88	@ 0x58
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	603b      	str	r3, [r7, #0]
 800b83c:	4613      	mov	r3, r2
 800b83e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b840:	e04f      	b.n	800b8e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b848:	d04b      	beq.n	800b8e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b84a:	f7f7 fa23 	bl	8002c94 <HAL_GetTick>
 800b84e:	4602      	mov	r2, r0
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	69ba      	ldr	r2, [r7, #24]
 800b856:	429a      	cmp	r2, r3
 800b858:	d302      	bcc.n	800b860 <UART_WaitOnFlagUntilTimeout+0x30>
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d101      	bne.n	800b864 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b860:	2303      	movs	r3, #3
 800b862:	e04e      	b.n	800b902 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f003 0304 	and.w	r3, r3, #4
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d037      	beq.n	800b8e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	2b80      	cmp	r3, #128	@ 0x80
 800b876:	d034      	beq.n	800b8e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	2b40      	cmp	r3, #64	@ 0x40
 800b87c:	d031      	beq.n	800b8e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	69db      	ldr	r3, [r3, #28]
 800b884:	f003 0308 	and.w	r3, r3, #8
 800b888:	2b08      	cmp	r3, #8
 800b88a:	d110      	bne.n	800b8ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2208      	movs	r2, #8
 800b892:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b894:	68f8      	ldr	r0, [r7, #12]
 800b896:	f000 f838 	bl	800b90a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2208      	movs	r2, #8
 800b89e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e029      	b.n	800b902 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	69db      	ldr	r3, [r3, #28]
 800b8b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b8b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8bc:	d111      	bne.n	800b8e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b8c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f000 f81e 	bl	800b90a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2220      	movs	r2, #32
 800b8d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	e00f      	b.n	800b902 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	69da      	ldr	r2, [r3, #28]
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	4013      	ands	r3, r2
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	bf0c      	ite	eq
 800b8f2:	2301      	moveq	r3, #1
 800b8f4:	2300      	movne	r3, #0
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	79fb      	ldrb	r3, [r7, #7]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d0a0      	beq.n	800b842 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b90a:	b480      	push	{r7}
 800b90c:	b095      	sub	sp, #84	@ 0x54
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b91a:	e853 3f00 	ldrex	r3, [r3]
 800b91e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b922:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	461a      	mov	r2, r3
 800b92e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b930:	643b      	str	r3, [r7, #64]	@ 0x40
 800b932:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b934:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b936:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b938:	e841 2300 	strex	r3, r2, [r1]
 800b93c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1e6      	bne.n	800b912 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	3308      	adds	r3, #8
 800b94a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94c:	6a3b      	ldr	r3, [r7, #32]
 800b94e:	e853 3f00 	ldrex	r3, [r3]
 800b952:	61fb      	str	r3, [r7, #28]
   return(result);
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b95a:	f023 0301 	bic.w	r3, r3, #1
 800b95e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	3308      	adds	r3, #8
 800b966:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b968:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b96a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b96c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b96e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b970:	e841 2300 	strex	r3, r2, [r1]
 800b974:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d1e3      	bne.n	800b944 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b980:	2b01      	cmp	r3, #1
 800b982:	d118      	bne.n	800b9b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	e853 3f00 	ldrex	r3, [r3]
 800b990:	60bb      	str	r3, [r7, #8]
   return(result);
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	f023 0310 	bic.w	r3, r3, #16
 800b998:	647b      	str	r3, [r7, #68]	@ 0x44
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	461a      	mov	r2, r3
 800b9a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9a2:	61bb      	str	r3, [r7, #24]
 800b9a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a6:	6979      	ldr	r1, [r7, #20]
 800b9a8:	69ba      	ldr	r2, [r7, #24]
 800b9aa:	e841 2300 	strex	r3, r2, [r1]
 800b9ae:	613b      	str	r3, [r7, #16]
   return(result);
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d1e6      	bne.n	800b984 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2220      	movs	r2, #32
 800b9ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b9ca:	bf00      	nop
 800b9cc:	3754      	adds	r7, #84	@ 0x54
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr

0800b9d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b084      	sub	sp, #16
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f7ff fc1b 	bl	800b228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9f2:	bf00      	nop
 800b9f4:	3710      	adds	r7, #16
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b088      	sub	sp, #32
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	e853 3f00 	ldrex	r3, [r3]
 800ba0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba16:	61fb      	str	r3, [r7, #28]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	61bb      	str	r3, [r7, #24]
 800ba22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba24:	6979      	ldr	r1, [r7, #20]
 800ba26:	69ba      	ldr	r2, [r7, #24]
 800ba28:	e841 2300 	strex	r3, r2, [r1]
 800ba2c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1e6      	bne.n	800ba02 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2220      	movs	r2, #32
 800ba38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f7ff fbe6 	bl	800b214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba48:	bf00      	nop
 800ba4a:	3720      	adds	r7, #32
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ba58:	bf00      	nop
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b083      	sub	sp, #12
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ba6c:	bf00      	nop
 800ba6e:	370c      	adds	r7, #12
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d101      	bne.n	800ba8e <HAL_UARTEx_DisableFifoMode+0x16>
 800ba8a:	2302      	movs	r3, #2
 800ba8c:	e027      	b.n	800bade <HAL_UARTEx_DisableFifoMode+0x66>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2201      	movs	r2, #1
 800ba92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2224      	movs	r2, #36	@ 0x24
 800ba9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f022 0201 	bic.w	r2, r2, #1
 800bab4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800babc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2220      	movs	r2, #32
 800bad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3714      	adds	r7, #20
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr

0800baea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b084      	sub	sp, #16
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
 800baf2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d101      	bne.n	800bb02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bafe:	2302      	movs	r3, #2
 800bb00:	e02d      	b.n	800bb5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2201      	movs	r2, #1
 800bb06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2224      	movs	r2, #36	@ 0x24
 800bb0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f022 0201 	bic.w	r2, r2, #1
 800bb28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	683a      	ldr	r2, [r7, #0]
 800bb3a:	430a      	orrs	r2, r1
 800bb3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f850 	bl	800bbe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2220      	movs	r2, #32
 800bb50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b084      	sub	sp, #16
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d101      	bne.n	800bb7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb7a:	2302      	movs	r3, #2
 800bb7c:	e02d      	b.n	800bbda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2201      	movs	r2, #1
 800bb82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2224      	movs	r2, #36	@ 0x24
 800bb8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f022 0201 	bic.w	r2, r2, #1
 800bba4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	683a      	ldr	r2, [r7, #0]
 800bbb6:	430a      	orrs	r2, r1
 800bbb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f812 	bl	800bbe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2220      	movs	r2, #32
 800bbcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbd8:	2300      	movs	r3, #0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
	...

0800bbe4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b085      	sub	sp, #20
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d108      	bne.n	800bc06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc04:	e031      	b.n	800bc6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc06:	2308      	movs	r3, #8
 800bc08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc0a:	2308      	movs	r3, #8
 800bc0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	0e5b      	lsrs	r3, r3, #25
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	f003 0307 	and.w	r3, r3, #7
 800bc1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	0f5b      	lsrs	r3, r3, #29
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	f003 0307 	and.w	r3, r3, #7
 800bc2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc2e:	7bbb      	ldrb	r3, [r7, #14]
 800bc30:	7b3a      	ldrb	r2, [r7, #12]
 800bc32:	4911      	ldr	r1, [pc, #68]	@ (800bc78 <UARTEx_SetNbDataToProcess+0x94>)
 800bc34:	5c8a      	ldrb	r2, [r1, r2]
 800bc36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc3a:	7b3a      	ldrb	r2, [r7, #12]
 800bc3c:	490f      	ldr	r1, [pc, #60]	@ (800bc7c <UARTEx_SetNbDataToProcess+0x98>)
 800bc3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc40:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc4c:	7bfb      	ldrb	r3, [r7, #15]
 800bc4e:	7b7a      	ldrb	r2, [r7, #13]
 800bc50:	4909      	ldr	r1, [pc, #36]	@ (800bc78 <UARTEx_SetNbDataToProcess+0x94>)
 800bc52:	5c8a      	ldrb	r2, [r1, r2]
 800bc54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc58:	7b7a      	ldrb	r2, [r7, #13]
 800bc5a:	4908      	ldr	r1, [pc, #32]	@ (800bc7c <UARTEx_SetNbDataToProcess+0x98>)
 800bc5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc5e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bc6a:	bf00      	nop
 800bc6c:	3714      	adds	r7, #20
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop
 800bc78:	0800e6c0 	.word	0x0800e6c0
 800bc7c:	0800e6c8 	.word	0x0800e6c8

0800bc80 <__cvt>:
 800bc80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc84:	ec57 6b10 	vmov	r6, r7, d0
 800bc88:	2f00      	cmp	r7, #0
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	463b      	mov	r3, r7
 800bc90:	bfb4      	ite	lt
 800bc92:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bc96:	2300      	movge	r3, #0
 800bc98:	4691      	mov	r9, r2
 800bc9a:	bfbf      	itttt	lt
 800bc9c:	4632      	movlt	r2, r6
 800bc9e:	461f      	movlt	r7, r3
 800bca0:	232d      	movlt	r3, #45	@ 0x2d
 800bca2:	4616      	movlt	r6, r2
 800bca4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bca8:	700b      	strb	r3, [r1, #0]
 800bcaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bcac:	f023 0820 	bic.w	r8, r3, #32
 800bcb0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bcb4:	d005      	beq.n	800bcc2 <__cvt+0x42>
 800bcb6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bcba:	d100      	bne.n	800bcbe <__cvt+0x3e>
 800bcbc:	3401      	adds	r4, #1
 800bcbe:	2102      	movs	r1, #2
 800bcc0:	e000      	b.n	800bcc4 <__cvt+0x44>
 800bcc2:	2103      	movs	r1, #3
 800bcc4:	ab03      	add	r3, sp, #12
 800bcc6:	4622      	mov	r2, r4
 800bcc8:	9301      	str	r3, [sp, #4]
 800bcca:	ab02      	add	r3, sp, #8
 800bccc:	ec47 6b10 	vmov	d0, r6, r7
 800bcd0:	9300      	str	r3, [sp, #0]
 800bcd2:	4653      	mov	r3, sl
 800bcd4:	f000 fee4 	bl	800caa0 <_dtoa_r>
 800bcd8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bcdc:	4605      	mov	r5, r0
 800bcde:	d119      	bne.n	800bd14 <__cvt+0x94>
 800bce0:	f019 0f01 	tst.w	r9, #1
 800bce4:	d00e      	beq.n	800bd04 <__cvt+0x84>
 800bce6:	eb00 0904 	add.w	r9, r0, r4
 800bcea:	2200      	movs	r2, #0
 800bcec:	2300      	movs	r3, #0
 800bcee:	4630      	mov	r0, r6
 800bcf0:	4639      	mov	r1, r7
 800bcf2:	f7f4 feed 	bl	8000ad0 <__aeabi_dcmpeq>
 800bcf6:	b108      	cbz	r0, 800bcfc <__cvt+0x7c>
 800bcf8:	f8cd 900c 	str.w	r9, [sp, #12]
 800bcfc:	2230      	movs	r2, #48	@ 0x30
 800bcfe:	9b03      	ldr	r3, [sp, #12]
 800bd00:	454b      	cmp	r3, r9
 800bd02:	d31e      	bcc.n	800bd42 <__cvt+0xc2>
 800bd04:	9b03      	ldr	r3, [sp, #12]
 800bd06:	4628      	mov	r0, r5
 800bd08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd0a:	1b5b      	subs	r3, r3, r5
 800bd0c:	6013      	str	r3, [r2, #0]
 800bd0e:	b004      	add	sp, #16
 800bd10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bd18:	eb00 0904 	add.w	r9, r0, r4
 800bd1c:	d1e5      	bne.n	800bcea <__cvt+0x6a>
 800bd1e:	7803      	ldrb	r3, [r0, #0]
 800bd20:	2b30      	cmp	r3, #48	@ 0x30
 800bd22:	d10a      	bne.n	800bd3a <__cvt+0xba>
 800bd24:	2200      	movs	r2, #0
 800bd26:	2300      	movs	r3, #0
 800bd28:	4630      	mov	r0, r6
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	f7f4 fed0 	bl	8000ad0 <__aeabi_dcmpeq>
 800bd30:	b918      	cbnz	r0, 800bd3a <__cvt+0xba>
 800bd32:	f1c4 0401 	rsb	r4, r4, #1
 800bd36:	f8ca 4000 	str.w	r4, [sl]
 800bd3a:	f8da 3000 	ldr.w	r3, [sl]
 800bd3e:	4499      	add	r9, r3
 800bd40:	e7d3      	b.n	800bcea <__cvt+0x6a>
 800bd42:	1c59      	adds	r1, r3, #1
 800bd44:	9103      	str	r1, [sp, #12]
 800bd46:	701a      	strb	r2, [r3, #0]
 800bd48:	e7d9      	b.n	800bcfe <__cvt+0x7e>

0800bd4a <__exponent>:
 800bd4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd4c:	2900      	cmp	r1, #0
 800bd4e:	7002      	strb	r2, [r0, #0]
 800bd50:	bfba      	itte	lt
 800bd52:	4249      	neglt	r1, r1
 800bd54:	232d      	movlt	r3, #45	@ 0x2d
 800bd56:	232b      	movge	r3, #43	@ 0x2b
 800bd58:	2909      	cmp	r1, #9
 800bd5a:	7043      	strb	r3, [r0, #1]
 800bd5c:	dd28      	ble.n	800bdb0 <__exponent+0x66>
 800bd5e:	f10d 0307 	add.w	r3, sp, #7
 800bd62:	270a      	movs	r7, #10
 800bd64:	461d      	mov	r5, r3
 800bd66:	461a      	mov	r2, r3
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	fbb1 f6f7 	udiv	r6, r1, r7
 800bd6e:	fb07 1416 	mls	r4, r7, r6, r1
 800bd72:	3430      	adds	r4, #48	@ 0x30
 800bd74:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bd78:	460c      	mov	r4, r1
 800bd7a:	4631      	mov	r1, r6
 800bd7c:	2c63      	cmp	r4, #99	@ 0x63
 800bd7e:	dcf2      	bgt.n	800bd66 <__exponent+0x1c>
 800bd80:	3130      	adds	r1, #48	@ 0x30
 800bd82:	1e94      	subs	r4, r2, #2
 800bd84:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bd88:	1c41      	adds	r1, r0, #1
 800bd8a:	4623      	mov	r3, r4
 800bd8c:	42ab      	cmp	r3, r5
 800bd8e:	d30a      	bcc.n	800bda6 <__exponent+0x5c>
 800bd90:	f10d 0309 	add.w	r3, sp, #9
 800bd94:	1a9b      	subs	r3, r3, r2
 800bd96:	42ac      	cmp	r4, r5
 800bd98:	bf88      	it	hi
 800bd9a:	2300      	movhi	r3, #0
 800bd9c:	3302      	adds	r3, #2
 800bd9e:	4403      	add	r3, r0
 800bda0:	1a18      	subs	r0, r3, r0
 800bda2:	b003      	add	sp, #12
 800bda4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bda6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bdaa:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bdae:	e7ed      	b.n	800bd8c <__exponent+0x42>
 800bdb0:	2330      	movs	r3, #48	@ 0x30
 800bdb2:	3130      	adds	r1, #48	@ 0x30
 800bdb4:	7083      	strb	r3, [r0, #2]
 800bdb6:	1d03      	adds	r3, r0, #4
 800bdb8:	70c1      	strb	r1, [r0, #3]
 800bdba:	e7f1      	b.n	800bda0 <__exponent+0x56>

0800bdbc <_printf_float>:
 800bdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc0:	b08d      	sub	sp, #52	@ 0x34
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	4616      	mov	r6, r2
 800bdc6:	461f      	mov	r7, r3
 800bdc8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bdcc:	4605      	mov	r5, r0
 800bdce:	f000 fd53 	bl	800c878 <_localeconv_r>
 800bdd2:	6803      	ldr	r3, [r0, #0]
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	9304      	str	r3, [sp, #16]
 800bdd8:	f7f4 fa4e 	bl	8000278 <strlen>
 800bddc:	2300      	movs	r3, #0
 800bdde:	9005      	str	r0, [sp, #20]
 800bde0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bde2:	f8d8 3000 	ldr.w	r3, [r8]
 800bde6:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bdea:	3307      	adds	r3, #7
 800bdec:	f8d4 b000 	ldr.w	fp, [r4]
 800bdf0:	f023 0307 	bic.w	r3, r3, #7
 800bdf4:	f103 0208 	add.w	r2, r3, #8
 800bdf8:	f8c8 2000 	str.w	r2, [r8]
 800bdfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be00:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800be08:	f8cd 8018 	str.w	r8, [sp, #24]
 800be0c:	9307      	str	r3, [sp, #28]
 800be0e:	4b9d      	ldr	r3, [pc, #628]	@ (800c084 <_printf_float+0x2c8>)
 800be10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be14:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800be18:	f7f4 fe8c 	bl	8000b34 <__aeabi_dcmpun>
 800be1c:	bb70      	cbnz	r0, 800be7c <_printf_float+0xc0>
 800be1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be22:	4b98      	ldr	r3, [pc, #608]	@ (800c084 <_printf_float+0x2c8>)
 800be24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be28:	f7f4 fe66 	bl	8000af8 <__aeabi_dcmple>
 800be2c:	bb30      	cbnz	r0, 800be7c <_printf_float+0xc0>
 800be2e:	2200      	movs	r2, #0
 800be30:	2300      	movs	r3, #0
 800be32:	4640      	mov	r0, r8
 800be34:	4649      	mov	r1, r9
 800be36:	f7f4 fe55 	bl	8000ae4 <__aeabi_dcmplt>
 800be3a:	b110      	cbz	r0, 800be42 <_printf_float+0x86>
 800be3c:	232d      	movs	r3, #45	@ 0x2d
 800be3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be42:	4a91      	ldr	r2, [pc, #580]	@ (800c088 <_printf_float+0x2cc>)
 800be44:	4b91      	ldr	r3, [pc, #580]	@ (800c08c <_printf_float+0x2d0>)
 800be46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800be4a:	bf94      	ite	ls
 800be4c:	4690      	movls	r8, r2
 800be4e:	4698      	movhi	r8, r3
 800be50:	2303      	movs	r3, #3
 800be52:	f04f 0900 	mov.w	r9, #0
 800be56:	6123      	str	r3, [r4, #16]
 800be58:	f02b 0304 	bic.w	r3, fp, #4
 800be5c:	6023      	str	r3, [r4, #0]
 800be5e:	4633      	mov	r3, r6
 800be60:	aa0b      	add	r2, sp, #44	@ 0x2c
 800be62:	4621      	mov	r1, r4
 800be64:	4628      	mov	r0, r5
 800be66:	9700      	str	r7, [sp, #0]
 800be68:	f000 f9d2 	bl	800c210 <_printf_common>
 800be6c:	3001      	adds	r0, #1
 800be6e:	f040 808d 	bne.w	800bf8c <_printf_float+0x1d0>
 800be72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be76:	b00d      	add	sp, #52	@ 0x34
 800be78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be7c:	4642      	mov	r2, r8
 800be7e:	464b      	mov	r3, r9
 800be80:	4640      	mov	r0, r8
 800be82:	4649      	mov	r1, r9
 800be84:	f7f4 fe56 	bl	8000b34 <__aeabi_dcmpun>
 800be88:	b140      	cbz	r0, 800be9c <_printf_float+0xe0>
 800be8a:	464b      	mov	r3, r9
 800be8c:	4a80      	ldr	r2, [pc, #512]	@ (800c090 <_printf_float+0x2d4>)
 800be8e:	2b00      	cmp	r3, #0
 800be90:	bfbc      	itt	lt
 800be92:	232d      	movlt	r3, #45	@ 0x2d
 800be94:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800be98:	4b7e      	ldr	r3, [pc, #504]	@ (800c094 <_printf_float+0x2d8>)
 800be9a:	e7d4      	b.n	800be46 <_printf_float+0x8a>
 800be9c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bea0:	6863      	ldr	r3, [r4, #4]
 800bea2:	9206      	str	r2, [sp, #24]
 800bea4:	1c5a      	adds	r2, r3, #1
 800bea6:	d13b      	bne.n	800bf20 <_printf_float+0x164>
 800bea8:	2306      	movs	r3, #6
 800beaa:	6063      	str	r3, [r4, #4]
 800beac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800beb0:	2300      	movs	r3, #0
 800beb2:	4628      	mov	r0, r5
 800beb4:	6022      	str	r2, [r4, #0]
 800beb6:	9303      	str	r3, [sp, #12]
 800beb8:	ab0a      	add	r3, sp, #40	@ 0x28
 800beba:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bebe:	ab09      	add	r3, sp, #36	@ 0x24
 800bec0:	ec49 8b10 	vmov	d0, r8, r9
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800beca:	6861      	ldr	r1, [r4, #4]
 800becc:	f7ff fed8 	bl	800bc80 <__cvt>
 800bed0:	9b06      	ldr	r3, [sp, #24]
 800bed2:	4680      	mov	r8, r0
 800bed4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bed6:	2b47      	cmp	r3, #71	@ 0x47
 800bed8:	d129      	bne.n	800bf2e <_printf_float+0x172>
 800beda:	1cc8      	adds	r0, r1, #3
 800bedc:	db02      	blt.n	800bee4 <_printf_float+0x128>
 800bede:	6863      	ldr	r3, [r4, #4]
 800bee0:	4299      	cmp	r1, r3
 800bee2:	dd41      	ble.n	800bf68 <_printf_float+0x1ac>
 800bee4:	f1aa 0a02 	sub.w	sl, sl, #2
 800bee8:	fa5f fa8a 	uxtb.w	sl, sl
 800beec:	3901      	subs	r1, #1
 800beee:	4652      	mov	r2, sl
 800bef0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bef4:	9109      	str	r1, [sp, #36]	@ 0x24
 800bef6:	f7ff ff28 	bl	800bd4a <__exponent>
 800befa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800befc:	4681      	mov	r9, r0
 800befe:	1813      	adds	r3, r2, r0
 800bf00:	2a01      	cmp	r2, #1
 800bf02:	6123      	str	r3, [r4, #16]
 800bf04:	dc02      	bgt.n	800bf0c <_printf_float+0x150>
 800bf06:	6822      	ldr	r2, [r4, #0]
 800bf08:	07d2      	lsls	r2, r2, #31
 800bf0a:	d501      	bpl.n	800bf10 <_printf_float+0x154>
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	6123      	str	r3, [r4, #16]
 800bf10:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d0a2      	beq.n	800be5e <_printf_float+0xa2>
 800bf18:	232d      	movs	r3, #45	@ 0x2d
 800bf1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf1e:	e79e      	b.n	800be5e <_printf_float+0xa2>
 800bf20:	9a06      	ldr	r2, [sp, #24]
 800bf22:	2a47      	cmp	r2, #71	@ 0x47
 800bf24:	d1c2      	bne.n	800beac <_printf_float+0xf0>
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1c0      	bne.n	800beac <_printf_float+0xf0>
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	e7bd      	b.n	800beaa <_printf_float+0xee>
 800bf2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bf32:	d9db      	bls.n	800beec <_printf_float+0x130>
 800bf34:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bf38:	d118      	bne.n	800bf6c <_printf_float+0x1b0>
 800bf3a:	2900      	cmp	r1, #0
 800bf3c:	6863      	ldr	r3, [r4, #4]
 800bf3e:	dd0b      	ble.n	800bf58 <_printf_float+0x19c>
 800bf40:	6121      	str	r1, [r4, #16]
 800bf42:	b913      	cbnz	r3, 800bf4a <_printf_float+0x18e>
 800bf44:	6822      	ldr	r2, [r4, #0]
 800bf46:	07d0      	lsls	r0, r2, #31
 800bf48:	d502      	bpl.n	800bf50 <_printf_float+0x194>
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	440b      	add	r3, r1
 800bf4e:	6123      	str	r3, [r4, #16]
 800bf50:	f04f 0900 	mov.w	r9, #0
 800bf54:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bf56:	e7db      	b.n	800bf10 <_printf_float+0x154>
 800bf58:	b913      	cbnz	r3, 800bf60 <_printf_float+0x1a4>
 800bf5a:	6822      	ldr	r2, [r4, #0]
 800bf5c:	07d2      	lsls	r2, r2, #31
 800bf5e:	d501      	bpl.n	800bf64 <_printf_float+0x1a8>
 800bf60:	3302      	adds	r3, #2
 800bf62:	e7f4      	b.n	800bf4e <_printf_float+0x192>
 800bf64:	2301      	movs	r3, #1
 800bf66:	e7f2      	b.n	800bf4e <_printf_float+0x192>
 800bf68:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bf6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf6e:	4299      	cmp	r1, r3
 800bf70:	db05      	blt.n	800bf7e <_printf_float+0x1c2>
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	6121      	str	r1, [r4, #16]
 800bf76:	07d8      	lsls	r0, r3, #31
 800bf78:	d5ea      	bpl.n	800bf50 <_printf_float+0x194>
 800bf7a:	1c4b      	adds	r3, r1, #1
 800bf7c:	e7e7      	b.n	800bf4e <_printf_float+0x192>
 800bf7e:	2900      	cmp	r1, #0
 800bf80:	bfd4      	ite	le
 800bf82:	f1c1 0202 	rsble	r2, r1, #2
 800bf86:	2201      	movgt	r2, #1
 800bf88:	4413      	add	r3, r2
 800bf8a:	e7e0      	b.n	800bf4e <_printf_float+0x192>
 800bf8c:	6823      	ldr	r3, [r4, #0]
 800bf8e:	055a      	lsls	r2, r3, #21
 800bf90:	d407      	bmi.n	800bfa2 <_printf_float+0x1e6>
 800bf92:	6923      	ldr	r3, [r4, #16]
 800bf94:	4642      	mov	r2, r8
 800bf96:	4631      	mov	r1, r6
 800bf98:	4628      	mov	r0, r5
 800bf9a:	47b8      	blx	r7
 800bf9c:	3001      	adds	r0, #1
 800bf9e:	d12b      	bne.n	800bff8 <_printf_float+0x23c>
 800bfa0:	e767      	b.n	800be72 <_printf_float+0xb6>
 800bfa2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bfa6:	f240 80dd 	bls.w	800c164 <_printf_float+0x3a8>
 800bfaa:	2200      	movs	r2, #0
 800bfac:	2300      	movs	r3, #0
 800bfae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bfb2:	f7f4 fd8d 	bl	8000ad0 <__aeabi_dcmpeq>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	d033      	beq.n	800c022 <_printf_float+0x266>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	4a36      	ldr	r2, [pc, #216]	@ (800c098 <_printf_float+0x2dc>)
 800bfbe:	4631      	mov	r1, r6
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	47b8      	blx	r7
 800bfc4:	3001      	adds	r0, #1
 800bfc6:	f43f af54 	beq.w	800be72 <_printf_float+0xb6>
 800bfca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bfce:	4543      	cmp	r3, r8
 800bfd0:	db02      	blt.n	800bfd8 <_printf_float+0x21c>
 800bfd2:	6823      	ldr	r3, [r4, #0]
 800bfd4:	07d8      	lsls	r0, r3, #31
 800bfd6:	d50f      	bpl.n	800bff8 <_printf_float+0x23c>
 800bfd8:	4631      	mov	r1, r6
 800bfda:	4628      	mov	r0, r5
 800bfdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfe0:	47b8      	blx	r7
 800bfe2:	3001      	adds	r0, #1
 800bfe4:	f43f af45 	beq.w	800be72 <_printf_float+0xb6>
 800bfe8:	f04f 0900 	mov.w	r9, #0
 800bfec:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800bff0:	f104 0a1a 	add.w	sl, r4, #26
 800bff4:	45c8      	cmp	r8, r9
 800bff6:	dc09      	bgt.n	800c00c <_printf_float+0x250>
 800bff8:	6823      	ldr	r3, [r4, #0]
 800bffa:	079b      	lsls	r3, r3, #30
 800bffc:	f100 8103 	bmi.w	800c206 <_printf_float+0x44a>
 800c000:	68e0      	ldr	r0, [r4, #12]
 800c002:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c004:	4298      	cmp	r0, r3
 800c006:	bfb8      	it	lt
 800c008:	4618      	movlt	r0, r3
 800c00a:	e734      	b.n	800be76 <_printf_float+0xba>
 800c00c:	2301      	movs	r3, #1
 800c00e:	4652      	mov	r2, sl
 800c010:	4631      	mov	r1, r6
 800c012:	4628      	mov	r0, r5
 800c014:	47b8      	blx	r7
 800c016:	3001      	adds	r0, #1
 800c018:	f43f af2b 	beq.w	800be72 <_printf_float+0xb6>
 800c01c:	f109 0901 	add.w	r9, r9, #1
 800c020:	e7e8      	b.n	800bff4 <_printf_float+0x238>
 800c022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c024:	2b00      	cmp	r3, #0
 800c026:	dc39      	bgt.n	800c09c <_printf_float+0x2e0>
 800c028:	2301      	movs	r3, #1
 800c02a:	4a1b      	ldr	r2, [pc, #108]	@ (800c098 <_printf_float+0x2dc>)
 800c02c:	4631      	mov	r1, r6
 800c02e:	4628      	mov	r0, r5
 800c030:	47b8      	blx	r7
 800c032:	3001      	adds	r0, #1
 800c034:	f43f af1d 	beq.w	800be72 <_printf_float+0xb6>
 800c038:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c03c:	ea59 0303 	orrs.w	r3, r9, r3
 800c040:	d102      	bne.n	800c048 <_printf_float+0x28c>
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	07d9      	lsls	r1, r3, #31
 800c046:	d5d7      	bpl.n	800bff8 <_printf_float+0x23c>
 800c048:	4631      	mov	r1, r6
 800c04a:	4628      	mov	r0, r5
 800c04c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c050:	47b8      	blx	r7
 800c052:	3001      	adds	r0, #1
 800c054:	f43f af0d 	beq.w	800be72 <_printf_float+0xb6>
 800c058:	f04f 0a00 	mov.w	sl, #0
 800c05c:	f104 0b1a 	add.w	fp, r4, #26
 800c060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c062:	425b      	negs	r3, r3
 800c064:	4553      	cmp	r3, sl
 800c066:	dc01      	bgt.n	800c06c <_printf_float+0x2b0>
 800c068:	464b      	mov	r3, r9
 800c06a:	e793      	b.n	800bf94 <_printf_float+0x1d8>
 800c06c:	2301      	movs	r3, #1
 800c06e:	465a      	mov	r2, fp
 800c070:	4631      	mov	r1, r6
 800c072:	4628      	mov	r0, r5
 800c074:	47b8      	blx	r7
 800c076:	3001      	adds	r0, #1
 800c078:	f43f aefb 	beq.w	800be72 <_printf_float+0xb6>
 800c07c:	f10a 0a01 	add.w	sl, sl, #1
 800c080:	e7ee      	b.n	800c060 <_printf_float+0x2a4>
 800c082:	bf00      	nop
 800c084:	7fefffff 	.word	0x7fefffff
 800c088:	0800e6d0 	.word	0x0800e6d0
 800c08c:	0800e6d4 	.word	0x0800e6d4
 800c090:	0800e6d8 	.word	0x0800e6d8
 800c094:	0800e6dc 	.word	0x0800e6dc
 800c098:	0800e6e0 	.word	0x0800e6e0
 800c09c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c09e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c0a2:	4553      	cmp	r3, sl
 800c0a4:	bfa8      	it	ge
 800c0a6:	4653      	movge	r3, sl
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	4699      	mov	r9, r3
 800c0ac:	dc36      	bgt.n	800c11c <_printf_float+0x360>
 800c0ae:	f04f 0b00 	mov.w	fp, #0
 800c0b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c0b6:	f104 021a 	add.w	r2, r4, #26
 800c0ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c0bc:	9306      	str	r3, [sp, #24]
 800c0be:	eba3 0309 	sub.w	r3, r3, r9
 800c0c2:	455b      	cmp	r3, fp
 800c0c4:	dc31      	bgt.n	800c12a <_printf_float+0x36e>
 800c0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0c8:	459a      	cmp	sl, r3
 800c0ca:	dc3a      	bgt.n	800c142 <_printf_float+0x386>
 800c0cc:	6823      	ldr	r3, [r4, #0]
 800c0ce:	07da      	lsls	r2, r3, #31
 800c0d0:	d437      	bmi.n	800c142 <_printf_float+0x386>
 800c0d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0d4:	ebaa 0903 	sub.w	r9, sl, r3
 800c0d8:	9b06      	ldr	r3, [sp, #24]
 800c0da:	ebaa 0303 	sub.w	r3, sl, r3
 800c0de:	4599      	cmp	r9, r3
 800c0e0:	bfa8      	it	ge
 800c0e2:	4699      	movge	r9, r3
 800c0e4:	f1b9 0f00 	cmp.w	r9, #0
 800c0e8:	dc33      	bgt.n	800c152 <_printf_float+0x396>
 800c0ea:	f04f 0800 	mov.w	r8, #0
 800c0ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c0f2:	f104 0b1a 	add.w	fp, r4, #26
 800c0f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0f8:	ebaa 0303 	sub.w	r3, sl, r3
 800c0fc:	eba3 0309 	sub.w	r3, r3, r9
 800c100:	4543      	cmp	r3, r8
 800c102:	f77f af79 	ble.w	800bff8 <_printf_float+0x23c>
 800c106:	2301      	movs	r3, #1
 800c108:	465a      	mov	r2, fp
 800c10a:	4631      	mov	r1, r6
 800c10c:	4628      	mov	r0, r5
 800c10e:	47b8      	blx	r7
 800c110:	3001      	adds	r0, #1
 800c112:	f43f aeae 	beq.w	800be72 <_printf_float+0xb6>
 800c116:	f108 0801 	add.w	r8, r8, #1
 800c11a:	e7ec      	b.n	800c0f6 <_printf_float+0x33a>
 800c11c:	4642      	mov	r2, r8
 800c11e:	4631      	mov	r1, r6
 800c120:	4628      	mov	r0, r5
 800c122:	47b8      	blx	r7
 800c124:	3001      	adds	r0, #1
 800c126:	d1c2      	bne.n	800c0ae <_printf_float+0x2f2>
 800c128:	e6a3      	b.n	800be72 <_printf_float+0xb6>
 800c12a:	2301      	movs	r3, #1
 800c12c:	4631      	mov	r1, r6
 800c12e:	4628      	mov	r0, r5
 800c130:	9206      	str	r2, [sp, #24]
 800c132:	47b8      	blx	r7
 800c134:	3001      	adds	r0, #1
 800c136:	f43f ae9c 	beq.w	800be72 <_printf_float+0xb6>
 800c13a:	f10b 0b01 	add.w	fp, fp, #1
 800c13e:	9a06      	ldr	r2, [sp, #24]
 800c140:	e7bb      	b.n	800c0ba <_printf_float+0x2fe>
 800c142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c146:	4631      	mov	r1, r6
 800c148:	4628      	mov	r0, r5
 800c14a:	47b8      	blx	r7
 800c14c:	3001      	adds	r0, #1
 800c14e:	d1c0      	bne.n	800c0d2 <_printf_float+0x316>
 800c150:	e68f      	b.n	800be72 <_printf_float+0xb6>
 800c152:	9a06      	ldr	r2, [sp, #24]
 800c154:	464b      	mov	r3, r9
 800c156:	4631      	mov	r1, r6
 800c158:	4628      	mov	r0, r5
 800c15a:	4442      	add	r2, r8
 800c15c:	47b8      	blx	r7
 800c15e:	3001      	adds	r0, #1
 800c160:	d1c3      	bne.n	800c0ea <_printf_float+0x32e>
 800c162:	e686      	b.n	800be72 <_printf_float+0xb6>
 800c164:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c168:	f1ba 0f01 	cmp.w	sl, #1
 800c16c:	dc01      	bgt.n	800c172 <_printf_float+0x3b6>
 800c16e:	07db      	lsls	r3, r3, #31
 800c170:	d536      	bpl.n	800c1e0 <_printf_float+0x424>
 800c172:	2301      	movs	r3, #1
 800c174:	4642      	mov	r2, r8
 800c176:	4631      	mov	r1, r6
 800c178:	4628      	mov	r0, r5
 800c17a:	47b8      	blx	r7
 800c17c:	3001      	adds	r0, #1
 800c17e:	f43f ae78 	beq.w	800be72 <_printf_float+0xb6>
 800c182:	4631      	mov	r1, r6
 800c184:	4628      	mov	r0, r5
 800c186:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c18a:	47b8      	blx	r7
 800c18c:	3001      	adds	r0, #1
 800c18e:	f43f ae70 	beq.w	800be72 <_printf_float+0xb6>
 800c192:	2200      	movs	r2, #0
 800c194:	2300      	movs	r3, #0
 800c196:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c19a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c19e:	f7f4 fc97 	bl	8000ad0 <__aeabi_dcmpeq>
 800c1a2:	b9c0      	cbnz	r0, 800c1d6 <_printf_float+0x41a>
 800c1a4:	4653      	mov	r3, sl
 800c1a6:	f108 0201 	add.w	r2, r8, #1
 800c1aa:	4631      	mov	r1, r6
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	47b8      	blx	r7
 800c1b0:	3001      	adds	r0, #1
 800c1b2:	d10c      	bne.n	800c1ce <_printf_float+0x412>
 800c1b4:	e65d      	b.n	800be72 <_printf_float+0xb6>
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	465a      	mov	r2, fp
 800c1ba:	4631      	mov	r1, r6
 800c1bc:	4628      	mov	r0, r5
 800c1be:	47b8      	blx	r7
 800c1c0:	3001      	adds	r0, #1
 800c1c2:	f43f ae56 	beq.w	800be72 <_printf_float+0xb6>
 800c1c6:	f108 0801 	add.w	r8, r8, #1
 800c1ca:	45d0      	cmp	r8, sl
 800c1cc:	dbf3      	blt.n	800c1b6 <_printf_float+0x3fa>
 800c1ce:	464b      	mov	r3, r9
 800c1d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c1d4:	e6df      	b.n	800bf96 <_printf_float+0x1da>
 800c1d6:	f04f 0800 	mov.w	r8, #0
 800c1da:	f104 0b1a 	add.w	fp, r4, #26
 800c1de:	e7f4      	b.n	800c1ca <_printf_float+0x40e>
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	4642      	mov	r2, r8
 800c1e4:	e7e1      	b.n	800c1aa <_printf_float+0x3ee>
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	464a      	mov	r2, r9
 800c1ea:	4631      	mov	r1, r6
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	47b8      	blx	r7
 800c1f0:	3001      	adds	r0, #1
 800c1f2:	f43f ae3e 	beq.w	800be72 <_printf_float+0xb6>
 800c1f6:	f108 0801 	add.w	r8, r8, #1
 800c1fa:	68e3      	ldr	r3, [r4, #12]
 800c1fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c1fe:	1a5b      	subs	r3, r3, r1
 800c200:	4543      	cmp	r3, r8
 800c202:	dcf0      	bgt.n	800c1e6 <_printf_float+0x42a>
 800c204:	e6fc      	b.n	800c000 <_printf_float+0x244>
 800c206:	f04f 0800 	mov.w	r8, #0
 800c20a:	f104 0919 	add.w	r9, r4, #25
 800c20e:	e7f4      	b.n	800c1fa <_printf_float+0x43e>

0800c210 <_printf_common>:
 800c210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c214:	4616      	mov	r6, r2
 800c216:	4698      	mov	r8, r3
 800c218:	688a      	ldr	r2, [r1, #8]
 800c21a:	4607      	mov	r7, r0
 800c21c:	690b      	ldr	r3, [r1, #16]
 800c21e:	460c      	mov	r4, r1
 800c220:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c224:	4293      	cmp	r3, r2
 800c226:	bfb8      	it	lt
 800c228:	4613      	movlt	r3, r2
 800c22a:	6033      	str	r3, [r6, #0]
 800c22c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c230:	b10a      	cbz	r2, 800c236 <_printf_common+0x26>
 800c232:	3301      	adds	r3, #1
 800c234:	6033      	str	r3, [r6, #0]
 800c236:	6823      	ldr	r3, [r4, #0]
 800c238:	0699      	lsls	r1, r3, #26
 800c23a:	bf42      	ittt	mi
 800c23c:	6833      	ldrmi	r3, [r6, #0]
 800c23e:	3302      	addmi	r3, #2
 800c240:	6033      	strmi	r3, [r6, #0]
 800c242:	6825      	ldr	r5, [r4, #0]
 800c244:	f015 0506 	ands.w	r5, r5, #6
 800c248:	d106      	bne.n	800c258 <_printf_common+0x48>
 800c24a:	f104 0a19 	add.w	sl, r4, #25
 800c24e:	68e3      	ldr	r3, [r4, #12]
 800c250:	6832      	ldr	r2, [r6, #0]
 800c252:	1a9b      	subs	r3, r3, r2
 800c254:	42ab      	cmp	r3, r5
 800c256:	dc2b      	bgt.n	800c2b0 <_printf_common+0xa0>
 800c258:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c25c:	6822      	ldr	r2, [r4, #0]
 800c25e:	3b00      	subs	r3, #0
 800c260:	bf18      	it	ne
 800c262:	2301      	movne	r3, #1
 800c264:	0692      	lsls	r2, r2, #26
 800c266:	d430      	bmi.n	800c2ca <_printf_common+0xba>
 800c268:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c26c:	4641      	mov	r1, r8
 800c26e:	4638      	mov	r0, r7
 800c270:	47c8      	blx	r9
 800c272:	3001      	adds	r0, #1
 800c274:	d023      	beq.n	800c2be <_printf_common+0xae>
 800c276:	6823      	ldr	r3, [r4, #0]
 800c278:	341a      	adds	r4, #26
 800c27a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800c27e:	f003 0306 	and.w	r3, r3, #6
 800c282:	2b04      	cmp	r3, #4
 800c284:	bf0a      	itet	eq
 800c286:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800c28a:	2500      	movne	r5, #0
 800c28c:	6833      	ldreq	r3, [r6, #0]
 800c28e:	f04f 0600 	mov.w	r6, #0
 800c292:	bf08      	it	eq
 800c294:	1aed      	subeq	r5, r5, r3
 800c296:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c29a:	bf08      	it	eq
 800c29c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	bfc4      	itt	gt
 800c2a4:	1a9b      	subgt	r3, r3, r2
 800c2a6:	18ed      	addgt	r5, r5, r3
 800c2a8:	42b5      	cmp	r5, r6
 800c2aa:	d11a      	bne.n	800c2e2 <_printf_common+0xd2>
 800c2ac:	2000      	movs	r0, #0
 800c2ae:	e008      	b.n	800c2c2 <_printf_common+0xb2>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	4652      	mov	r2, sl
 800c2b4:	4641      	mov	r1, r8
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	47c8      	blx	r9
 800c2ba:	3001      	adds	r0, #1
 800c2bc:	d103      	bne.n	800c2c6 <_printf_common+0xb6>
 800c2be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2c6:	3501      	adds	r5, #1
 800c2c8:	e7c1      	b.n	800c24e <_printf_common+0x3e>
 800c2ca:	18e1      	adds	r1, r4, r3
 800c2cc:	1c5a      	adds	r2, r3, #1
 800c2ce:	2030      	movs	r0, #48	@ 0x30
 800c2d0:	3302      	adds	r3, #2
 800c2d2:	4422      	add	r2, r4
 800c2d4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c2d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c2dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c2e0:	e7c2      	b.n	800c268 <_printf_common+0x58>
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	4622      	mov	r2, r4
 800c2e6:	4641      	mov	r1, r8
 800c2e8:	4638      	mov	r0, r7
 800c2ea:	47c8      	blx	r9
 800c2ec:	3001      	adds	r0, #1
 800c2ee:	d0e6      	beq.n	800c2be <_printf_common+0xae>
 800c2f0:	3601      	adds	r6, #1
 800c2f2:	e7d9      	b.n	800c2a8 <_printf_common+0x98>

0800c2f4 <_printf_i>:
 800c2f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2f8:	7e0f      	ldrb	r7, [r1, #24]
 800c2fa:	4691      	mov	r9, r2
 800c2fc:	4680      	mov	r8, r0
 800c2fe:	460c      	mov	r4, r1
 800c300:	2f78      	cmp	r7, #120	@ 0x78
 800c302:	469a      	mov	sl, r3
 800c304:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c306:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c30a:	d807      	bhi.n	800c31c <_printf_i+0x28>
 800c30c:	2f62      	cmp	r7, #98	@ 0x62
 800c30e:	d80a      	bhi.n	800c326 <_printf_i+0x32>
 800c310:	2f00      	cmp	r7, #0
 800c312:	f000 80d2 	beq.w	800c4ba <_printf_i+0x1c6>
 800c316:	2f58      	cmp	r7, #88	@ 0x58
 800c318:	f000 80b9 	beq.w	800c48e <_printf_i+0x19a>
 800c31c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c320:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c324:	e03a      	b.n	800c39c <_printf_i+0xa8>
 800c326:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c32a:	2b15      	cmp	r3, #21
 800c32c:	d8f6      	bhi.n	800c31c <_printf_i+0x28>
 800c32e:	a101      	add	r1, pc, #4	@ (adr r1, 800c334 <_printf_i+0x40>)
 800c330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c334:	0800c38d 	.word	0x0800c38d
 800c338:	0800c3a1 	.word	0x0800c3a1
 800c33c:	0800c31d 	.word	0x0800c31d
 800c340:	0800c31d 	.word	0x0800c31d
 800c344:	0800c31d 	.word	0x0800c31d
 800c348:	0800c31d 	.word	0x0800c31d
 800c34c:	0800c3a1 	.word	0x0800c3a1
 800c350:	0800c31d 	.word	0x0800c31d
 800c354:	0800c31d 	.word	0x0800c31d
 800c358:	0800c31d 	.word	0x0800c31d
 800c35c:	0800c31d 	.word	0x0800c31d
 800c360:	0800c4a1 	.word	0x0800c4a1
 800c364:	0800c3cb 	.word	0x0800c3cb
 800c368:	0800c45b 	.word	0x0800c45b
 800c36c:	0800c31d 	.word	0x0800c31d
 800c370:	0800c31d 	.word	0x0800c31d
 800c374:	0800c4c3 	.word	0x0800c4c3
 800c378:	0800c31d 	.word	0x0800c31d
 800c37c:	0800c3cb 	.word	0x0800c3cb
 800c380:	0800c31d 	.word	0x0800c31d
 800c384:	0800c31d 	.word	0x0800c31d
 800c388:	0800c463 	.word	0x0800c463
 800c38c:	6833      	ldr	r3, [r6, #0]
 800c38e:	1d1a      	adds	r2, r3, #4
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	6032      	str	r2, [r6, #0]
 800c394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c398:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c39c:	2301      	movs	r3, #1
 800c39e:	e09d      	b.n	800c4dc <_printf_i+0x1e8>
 800c3a0:	6833      	ldr	r3, [r6, #0]
 800c3a2:	6820      	ldr	r0, [r4, #0]
 800c3a4:	1d19      	adds	r1, r3, #4
 800c3a6:	6031      	str	r1, [r6, #0]
 800c3a8:	0606      	lsls	r6, r0, #24
 800c3aa:	d501      	bpl.n	800c3b0 <_printf_i+0xbc>
 800c3ac:	681d      	ldr	r5, [r3, #0]
 800c3ae:	e003      	b.n	800c3b8 <_printf_i+0xc4>
 800c3b0:	0645      	lsls	r5, r0, #25
 800c3b2:	d5fb      	bpl.n	800c3ac <_printf_i+0xb8>
 800c3b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c3b8:	2d00      	cmp	r5, #0
 800c3ba:	da03      	bge.n	800c3c4 <_printf_i+0xd0>
 800c3bc:	232d      	movs	r3, #45	@ 0x2d
 800c3be:	426d      	negs	r5, r5
 800c3c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3c4:	4859      	ldr	r0, [pc, #356]	@ (800c52c <_printf_i+0x238>)
 800c3c6:	230a      	movs	r3, #10
 800c3c8:	e011      	b.n	800c3ee <_printf_i+0xfa>
 800c3ca:	6821      	ldr	r1, [r4, #0]
 800c3cc:	6833      	ldr	r3, [r6, #0]
 800c3ce:	0608      	lsls	r0, r1, #24
 800c3d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c3d4:	d402      	bmi.n	800c3dc <_printf_i+0xe8>
 800c3d6:	0649      	lsls	r1, r1, #25
 800c3d8:	bf48      	it	mi
 800c3da:	b2ad      	uxthmi	r5, r5
 800c3dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800c3de:	6033      	str	r3, [r6, #0]
 800c3e0:	4852      	ldr	r0, [pc, #328]	@ (800c52c <_printf_i+0x238>)
 800c3e2:	bf14      	ite	ne
 800c3e4:	230a      	movne	r3, #10
 800c3e6:	2308      	moveq	r3, #8
 800c3e8:	2100      	movs	r1, #0
 800c3ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c3ee:	6866      	ldr	r6, [r4, #4]
 800c3f0:	2e00      	cmp	r6, #0
 800c3f2:	60a6      	str	r6, [r4, #8]
 800c3f4:	bfa2      	ittt	ge
 800c3f6:	6821      	ldrge	r1, [r4, #0]
 800c3f8:	f021 0104 	bicge.w	r1, r1, #4
 800c3fc:	6021      	strge	r1, [r4, #0]
 800c3fe:	b90d      	cbnz	r5, 800c404 <_printf_i+0x110>
 800c400:	2e00      	cmp	r6, #0
 800c402:	d04b      	beq.n	800c49c <_printf_i+0x1a8>
 800c404:	4616      	mov	r6, r2
 800c406:	fbb5 f1f3 	udiv	r1, r5, r3
 800c40a:	fb03 5711 	mls	r7, r3, r1, r5
 800c40e:	5dc7      	ldrb	r7, [r0, r7]
 800c410:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c414:	462f      	mov	r7, r5
 800c416:	460d      	mov	r5, r1
 800c418:	42bb      	cmp	r3, r7
 800c41a:	d9f4      	bls.n	800c406 <_printf_i+0x112>
 800c41c:	2b08      	cmp	r3, #8
 800c41e:	d10b      	bne.n	800c438 <_printf_i+0x144>
 800c420:	6823      	ldr	r3, [r4, #0]
 800c422:	07df      	lsls	r7, r3, #31
 800c424:	d508      	bpl.n	800c438 <_printf_i+0x144>
 800c426:	6923      	ldr	r3, [r4, #16]
 800c428:	6861      	ldr	r1, [r4, #4]
 800c42a:	4299      	cmp	r1, r3
 800c42c:	bfde      	ittt	le
 800c42e:	2330      	movle	r3, #48	@ 0x30
 800c430:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c434:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c438:	1b92      	subs	r2, r2, r6
 800c43a:	6122      	str	r2, [r4, #16]
 800c43c:	464b      	mov	r3, r9
 800c43e:	aa03      	add	r2, sp, #12
 800c440:	4621      	mov	r1, r4
 800c442:	4640      	mov	r0, r8
 800c444:	f8cd a000 	str.w	sl, [sp]
 800c448:	f7ff fee2 	bl	800c210 <_printf_common>
 800c44c:	3001      	adds	r0, #1
 800c44e:	d14a      	bne.n	800c4e6 <_printf_i+0x1f2>
 800c450:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c454:	b004      	add	sp, #16
 800c456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c45a:	6823      	ldr	r3, [r4, #0]
 800c45c:	f043 0320 	orr.w	r3, r3, #32
 800c460:	6023      	str	r3, [r4, #0]
 800c462:	2778      	movs	r7, #120	@ 0x78
 800c464:	4832      	ldr	r0, [pc, #200]	@ (800c530 <_printf_i+0x23c>)
 800c466:	6823      	ldr	r3, [r4, #0]
 800c468:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c46c:	061f      	lsls	r7, r3, #24
 800c46e:	6831      	ldr	r1, [r6, #0]
 800c470:	f851 5b04 	ldr.w	r5, [r1], #4
 800c474:	d402      	bmi.n	800c47c <_printf_i+0x188>
 800c476:	065f      	lsls	r7, r3, #25
 800c478:	bf48      	it	mi
 800c47a:	b2ad      	uxthmi	r5, r5
 800c47c:	6031      	str	r1, [r6, #0]
 800c47e:	07d9      	lsls	r1, r3, #31
 800c480:	bf44      	itt	mi
 800c482:	f043 0320 	orrmi.w	r3, r3, #32
 800c486:	6023      	strmi	r3, [r4, #0]
 800c488:	b11d      	cbz	r5, 800c492 <_printf_i+0x19e>
 800c48a:	2310      	movs	r3, #16
 800c48c:	e7ac      	b.n	800c3e8 <_printf_i+0xf4>
 800c48e:	4827      	ldr	r0, [pc, #156]	@ (800c52c <_printf_i+0x238>)
 800c490:	e7e9      	b.n	800c466 <_printf_i+0x172>
 800c492:	6823      	ldr	r3, [r4, #0]
 800c494:	f023 0320 	bic.w	r3, r3, #32
 800c498:	6023      	str	r3, [r4, #0]
 800c49a:	e7f6      	b.n	800c48a <_printf_i+0x196>
 800c49c:	4616      	mov	r6, r2
 800c49e:	e7bd      	b.n	800c41c <_printf_i+0x128>
 800c4a0:	6833      	ldr	r3, [r6, #0]
 800c4a2:	6825      	ldr	r5, [r4, #0]
 800c4a4:	1d18      	adds	r0, r3, #4
 800c4a6:	6961      	ldr	r1, [r4, #20]
 800c4a8:	6030      	str	r0, [r6, #0]
 800c4aa:	062e      	lsls	r6, r5, #24
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	d501      	bpl.n	800c4b4 <_printf_i+0x1c0>
 800c4b0:	6019      	str	r1, [r3, #0]
 800c4b2:	e002      	b.n	800c4ba <_printf_i+0x1c6>
 800c4b4:	0668      	lsls	r0, r5, #25
 800c4b6:	d5fb      	bpl.n	800c4b0 <_printf_i+0x1bc>
 800c4b8:	8019      	strh	r1, [r3, #0]
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	4616      	mov	r6, r2
 800c4be:	6123      	str	r3, [r4, #16]
 800c4c0:	e7bc      	b.n	800c43c <_printf_i+0x148>
 800c4c2:	6833      	ldr	r3, [r6, #0]
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	1d1a      	adds	r2, r3, #4
 800c4c8:	6032      	str	r2, [r6, #0]
 800c4ca:	681e      	ldr	r6, [r3, #0]
 800c4cc:	6862      	ldr	r2, [r4, #4]
 800c4ce:	4630      	mov	r0, r6
 800c4d0:	f000 fa49 	bl	800c966 <memchr>
 800c4d4:	b108      	cbz	r0, 800c4da <_printf_i+0x1e6>
 800c4d6:	1b80      	subs	r0, r0, r6
 800c4d8:	6060      	str	r0, [r4, #4]
 800c4da:	6863      	ldr	r3, [r4, #4]
 800c4dc:	6123      	str	r3, [r4, #16]
 800c4de:	2300      	movs	r3, #0
 800c4e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4e4:	e7aa      	b.n	800c43c <_printf_i+0x148>
 800c4e6:	6923      	ldr	r3, [r4, #16]
 800c4e8:	4632      	mov	r2, r6
 800c4ea:	4649      	mov	r1, r9
 800c4ec:	4640      	mov	r0, r8
 800c4ee:	47d0      	blx	sl
 800c4f0:	3001      	adds	r0, #1
 800c4f2:	d0ad      	beq.n	800c450 <_printf_i+0x15c>
 800c4f4:	6823      	ldr	r3, [r4, #0]
 800c4f6:	079b      	lsls	r3, r3, #30
 800c4f8:	d413      	bmi.n	800c522 <_printf_i+0x22e>
 800c4fa:	68e0      	ldr	r0, [r4, #12]
 800c4fc:	9b03      	ldr	r3, [sp, #12]
 800c4fe:	4298      	cmp	r0, r3
 800c500:	bfb8      	it	lt
 800c502:	4618      	movlt	r0, r3
 800c504:	e7a6      	b.n	800c454 <_printf_i+0x160>
 800c506:	2301      	movs	r3, #1
 800c508:	4632      	mov	r2, r6
 800c50a:	4649      	mov	r1, r9
 800c50c:	4640      	mov	r0, r8
 800c50e:	47d0      	blx	sl
 800c510:	3001      	adds	r0, #1
 800c512:	d09d      	beq.n	800c450 <_printf_i+0x15c>
 800c514:	3501      	adds	r5, #1
 800c516:	68e3      	ldr	r3, [r4, #12]
 800c518:	9903      	ldr	r1, [sp, #12]
 800c51a:	1a5b      	subs	r3, r3, r1
 800c51c:	42ab      	cmp	r3, r5
 800c51e:	dcf2      	bgt.n	800c506 <_printf_i+0x212>
 800c520:	e7eb      	b.n	800c4fa <_printf_i+0x206>
 800c522:	2500      	movs	r5, #0
 800c524:	f104 0619 	add.w	r6, r4, #25
 800c528:	e7f5      	b.n	800c516 <_printf_i+0x222>
 800c52a:	bf00      	nop
 800c52c:	0800e6e2 	.word	0x0800e6e2
 800c530:	0800e6f3 	.word	0x0800e6f3

0800c534 <std>:
 800c534:	2300      	movs	r3, #0
 800c536:	b510      	push	{r4, lr}
 800c538:	4604      	mov	r4, r0
 800c53a:	6083      	str	r3, [r0, #8]
 800c53c:	8181      	strh	r1, [r0, #12]
 800c53e:	4619      	mov	r1, r3
 800c540:	6643      	str	r3, [r0, #100]	@ 0x64
 800c542:	81c2      	strh	r2, [r0, #14]
 800c544:	2208      	movs	r2, #8
 800c546:	6183      	str	r3, [r0, #24]
 800c548:	e9c0 3300 	strd	r3, r3, [r0]
 800c54c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c550:	305c      	adds	r0, #92	@ 0x5c
 800c552:	f000 f989 	bl	800c868 <memset>
 800c556:	4b0d      	ldr	r3, [pc, #52]	@ (800c58c <std+0x58>)
 800c558:	6224      	str	r4, [r4, #32]
 800c55a:	6263      	str	r3, [r4, #36]	@ 0x24
 800c55c:	4b0c      	ldr	r3, [pc, #48]	@ (800c590 <std+0x5c>)
 800c55e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c560:	4b0c      	ldr	r3, [pc, #48]	@ (800c594 <std+0x60>)
 800c562:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c564:	4b0c      	ldr	r3, [pc, #48]	@ (800c598 <std+0x64>)
 800c566:	6323      	str	r3, [r4, #48]	@ 0x30
 800c568:	4b0c      	ldr	r3, [pc, #48]	@ (800c59c <std+0x68>)
 800c56a:	429c      	cmp	r4, r3
 800c56c:	d006      	beq.n	800c57c <std+0x48>
 800c56e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c572:	4294      	cmp	r4, r2
 800c574:	d002      	beq.n	800c57c <std+0x48>
 800c576:	33d0      	adds	r3, #208	@ 0xd0
 800c578:	429c      	cmp	r4, r3
 800c57a:	d105      	bne.n	800c588 <std+0x54>
 800c57c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c584:	f000 b9ec 	b.w	800c960 <__retarget_lock_init_recursive>
 800c588:	bd10      	pop	{r4, pc}
 800c58a:	bf00      	nop
 800c58c:	0800c6b9 	.word	0x0800c6b9
 800c590:	0800c6db 	.word	0x0800c6db
 800c594:	0800c713 	.word	0x0800c713
 800c598:	0800c737 	.word	0x0800c737
 800c59c:	200025d4 	.word	0x200025d4

0800c5a0 <stdio_exit_handler>:
 800c5a0:	4a02      	ldr	r2, [pc, #8]	@ (800c5ac <stdio_exit_handler+0xc>)
 800c5a2:	4903      	ldr	r1, [pc, #12]	@ (800c5b0 <stdio_exit_handler+0x10>)
 800c5a4:	4803      	ldr	r0, [pc, #12]	@ (800c5b4 <stdio_exit_handler+0x14>)
 800c5a6:	f000 b869 	b.w	800c67c <_fwalk_sglue>
 800c5aa:	bf00      	nop
 800c5ac:	2000000c 	.word	0x2000000c
 800c5b0:	0800e2c5 	.word	0x0800e2c5
 800c5b4:	2000001c 	.word	0x2000001c

0800c5b8 <cleanup_stdio>:
 800c5b8:	6841      	ldr	r1, [r0, #4]
 800c5ba:	4b0c      	ldr	r3, [pc, #48]	@ (800c5ec <cleanup_stdio+0x34>)
 800c5bc:	4299      	cmp	r1, r3
 800c5be:	b510      	push	{r4, lr}
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	d001      	beq.n	800c5c8 <cleanup_stdio+0x10>
 800c5c4:	f001 fe7e 	bl	800e2c4 <_fflush_r>
 800c5c8:	68a1      	ldr	r1, [r4, #8]
 800c5ca:	4b09      	ldr	r3, [pc, #36]	@ (800c5f0 <cleanup_stdio+0x38>)
 800c5cc:	4299      	cmp	r1, r3
 800c5ce:	d002      	beq.n	800c5d6 <cleanup_stdio+0x1e>
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f001 fe77 	bl	800e2c4 <_fflush_r>
 800c5d6:	68e1      	ldr	r1, [r4, #12]
 800c5d8:	4b06      	ldr	r3, [pc, #24]	@ (800c5f4 <cleanup_stdio+0x3c>)
 800c5da:	4299      	cmp	r1, r3
 800c5dc:	d004      	beq.n	800c5e8 <cleanup_stdio+0x30>
 800c5de:	4620      	mov	r0, r4
 800c5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5e4:	f001 be6e 	b.w	800e2c4 <_fflush_r>
 800c5e8:	bd10      	pop	{r4, pc}
 800c5ea:	bf00      	nop
 800c5ec:	200025d4 	.word	0x200025d4
 800c5f0:	2000263c 	.word	0x2000263c
 800c5f4:	200026a4 	.word	0x200026a4

0800c5f8 <global_stdio_init.part.0>:
 800c5f8:	b510      	push	{r4, lr}
 800c5fa:	4b0b      	ldr	r3, [pc, #44]	@ (800c628 <global_stdio_init.part.0+0x30>)
 800c5fc:	2104      	movs	r1, #4
 800c5fe:	4c0b      	ldr	r4, [pc, #44]	@ (800c62c <global_stdio_init.part.0+0x34>)
 800c600:	4a0b      	ldr	r2, [pc, #44]	@ (800c630 <global_stdio_init.part.0+0x38>)
 800c602:	4620      	mov	r0, r4
 800c604:	601a      	str	r2, [r3, #0]
 800c606:	2200      	movs	r2, #0
 800c608:	f7ff ff94 	bl	800c534 <std>
 800c60c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c610:	2201      	movs	r2, #1
 800c612:	2109      	movs	r1, #9
 800c614:	f7ff ff8e 	bl	800c534 <std>
 800c618:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c61c:	2202      	movs	r2, #2
 800c61e:	2112      	movs	r1, #18
 800c620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c624:	f7ff bf86 	b.w	800c534 <std>
 800c628:	2000270c 	.word	0x2000270c
 800c62c:	200025d4 	.word	0x200025d4
 800c630:	0800c5a1 	.word	0x0800c5a1

0800c634 <__sfp_lock_acquire>:
 800c634:	4801      	ldr	r0, [pc, #4]	@ (800c63c <__sfp_lock_acquire+0x8>)
 800c636:	f000 b994 	b.w	800c962 <__retarget_lock_acquire_recursive>
 800c63a:	bf00      	nop
 800c63c:	20002715 	.word	0x20002715

0800c640 <__sfp_lock_release>:
 800c640:	4801      	ldr	r0, [pc, #4]	@ (800c648 <__sfp_lock_release+0x8>)
 800c642:	f000 b98f 	b.w	800c964 <__retarget_lock_release_recursive>
 800c646:	bf00      	nop
 800c648:	20002715 	.word	0x20002715

0800c64c <__sinit>:
 800c64c:	b510      	push	{r4, lr}
 800c64e:	4604      	mov	r4, r0
 800c650:	f7ff fff0 	bl	800c634 <__sfp_lock_acquire>
 800c654:	6a23      	ldr	r3, [r4, #32]
 800c656:	b11b      	cbz	r3, 800c660 <__sinit+0x14>
 800c658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c65c:	f7ff bff0 	b.w	800c640 <__sfp_lock_release>
 800c660:	4b04      	ldr	r3, [pc, #16]	@ (800c674 <__sinit+0x28>)
 800c662:	6223      	str	r3, [r4, #32]
 800c664:	4b04      	ldr	r3, [pc, #16]	@ (800c678 <__sinit+0x2c>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d1f5      	bne.n	800c658 <__sinit+0xc>
 800c66c:	f7ff ffc4 	bl	800c5f8 <global_stdio_init.part.0>
 800c670:	e7f2      	b.n	800c658 <__sinit+0xc>
 800c672:	bf00      	nop
 800c674:	0800c5b9 	.word	0x0800c5b9
 800c678:	2000270c 	.word	0x2000270c

0800c67c <_fwalk_sglue>:
 800c67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c680:	4607      	mov	r7, r0
 800c682:	4688      	mov	r8, r1
 800c684:	4614      	mov	r4, r2
 800c686:	2600      	movs	r6, #0
 800c688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c68c:	f1b9 0901 	subs.w	r9, r9, #1
 800c690:	d505      	bpl.n	800c69e <_fwalk_sglue+0x22>
 800c692:	6824      	ldr	r4, [r4, #0]
 800c694:	2c00      	cmp	r4, #0
 800c696:	d1f7      	bne.n	800c688 <_fwalk_sglue+0xc>
 800c698:	4630      	mov	r0, r6
 800c69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c69e:	89ab      	ldrh	r3, [r5, #12]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d907      	bls.n	800c6b4 <_fwalk_sglue+0x38>
 800c6a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	d003      	beq.n	800c6b4 <_fwalk_sglue+0x38>
 800c6ac:	4629      	mov	r1, r5
 800c6ae:	4638      	mov	r0, r7
 800c6b0:	47c0      	blx	r8
 800c6b2:	4306      	orrs	r6, r0
 800c6b4:	3568      	adds	r5, #104	@ 0x68
 800c6b6:	e7e9      	b.n	800c68c <_fwalk_sglue+0x10>

0800c6b8 <__sread>:
 800c6b8:	b510      	push	{r4, lr}
 800c6ba:	460c      	mov	r4, r1
 800c6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6c0:	f000 f900 	bl	800c8c4 <_read_r>
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	bfab      	itete	ge
 800c6c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c6ca:	89a3      	ldrhlt	r3, [r4, #12]
 800c6cc:	181b      	addge	r3, r3, r0
 800c6ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c6d2:	bfac      	ite	ge
 800c6d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c6d6:	81a3      	strhlt	r3, [r4, #12]
 800c6d8:	bd10      	pop	{r4, pc}

0800c6da <__swrite>:
 800c6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6de:	461f      	mov	r7, r3
 800c6e0:	898b      	ldrh	r3, [r1, #12]
 800c6e2:	4605      	mov	r5, r0
 800c6e4:	460c      	mov	r4, r1
 800c6e6:	05db      	lsls	r3, r3, #23
 800c6e8:	4616      	mov	r6, r2
 800c6ea:	d505      	bpl.n	800c6f8 <__swrite+0x1e>
 800c6ec:	2302      	movs	r3, #2
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6f4:	f000 f8d4 	bl	800c8a0 <_lseek_r>
 800c6f8:	89a3      	ldrh	r3, [r4, #12]
 800c6fa:	4632      	mov	r2, r6
 800c6fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c700:	4628      	mov	r0, r5
 800c702:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c706:	81a3      	strh	r3, [r4, #12]
 800c708:	463b      	mov	r3, r7
 800c70a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c70e:	f000 b8eb 	b.w	800c8e8 <_write_r>

0800c712 <__sseek>:
 800c712:	b510      	push	{r4, lr}
 800c714:	460c      	mov	r4, r1
 800c716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c71a:	f000 f8c1 	bl	800c8a0 <_lseek_r>
 800c71e:	1c43      	adds	r3, r0, #1
 800c720:	89a3      	ldrh	r3, [r4, #12]
 800c722:	bf15      	itete	ne
 800c724:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c726:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c72a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c72e:	81a3      	strheq	r3, [r4, #12]
 800c730:	bf18      	it	ne
 800c732:	81a3      	strhne	r3, [r4, #12]
 800c734:	bd10      	pop	{r4, pc}

0800c736 <__sclose>:
 800c736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c73a:	f000 b8a1 	b.w	800c880 <_close_r>

0800c73e <__swbuf_r>:
 800c73e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c740:	460e      	mov	r6, r1
 800c742:	4614      	mov	r4, r2
 800c744:	4605      	mov	r5, r0
 800c746:	b118      	cbz	r0, 800c750 <__swbuf_r+0x12>
 800c748:	6a03      	ldr	r3, [r0, #32]
 800c74a:	b90b      	cbnz	r3, 800c750 <__swbuf_r+0x12>
 800c74c:	f7ff ff7e 	bl	800c64c <__sinit>
 800c750:	69a3      	ldr	r3, [r4, #24]
 800c752:	60a3      	str	r3, [r4, #8]
 800c754:	89a3      	ldrh	r3, [r4, #12]
 800c756:	071a      	lsls	r2, r3, #28
 800c758:	d501      	bpl.n	800c75e <__swbuf_r+0x20>
 800c75a:	6923      	ldr	r3, [r4, #16]
 800c75c:	b943      	cbnz	r3, 800c770 <__swbuf_r+0x32>
 800c75e:	4621      	mov	r1, r4
 800c760:	4628      	mov	r0, r5
 800c762:	f000 f82b 	bl	800c7bc <__swsetup_r>
 800c766:	b118      	cbz	r0, 800c770 <__swbuf_r+0x32>
 800c768:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c76c:	4638      	mov	r0, r7
 800c76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c770:	6823      	ldr	r3, [r4, #0]
 800c772:	b2f6      	uxtb	r6, r6
 800c774:	6922      	ldr	r2, [r4, #16]
 800c776:	4637      	mov	r7, r6
 800c778:	1a98      	subs	r0, r3, r2
 800c77a:	6963      	ldr	r3, [r4, #20]
 800c77c:	4283      	cmp	r3, r0
 800c77e:	dc05      	bgt.n	800c78c <__swbuf_r+0x4e>
 800c780:	4621      	mov	r1, r4
 800c782:	4628      	mov	r0, r5
 800c784:	f001 fd9e 	bl	800e2c4 <_fflush_r>
 800c788:	2800      	cmp	r0, #0
 800c78a:	d1ed      	bne.n	800c768 <__swbuf_r+0x2a>
 800c78c:	68a3      	ldr	r3, [r4, #8]
 800c78e:	3b01      	subs	r3, #1
 800c790:	60a3      	str	r3, [r4, #8]
 800c792:	6823      	ldr	r3, [r4, #0]
 800c794:	1c5a      	adds	r2, r3, #1
 800c796:	6022      	str	r2, [r4, #0]
 800c798:	701e      	strb	r6, [r3, #0]
 800c79a:	1c43      	adds	r3, r0, #1
 800c79c:	6962      	ldr	r2, [r4, #20]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d004      	beq.n	800c7ac <__swbuf_r+0x6e>
 800c7a2:	89a3      	ldrh	r3, [r4, #12]
 800c7a4:	07db      	lsls	r3, r3, #31
 800c7a6:	d5e1      	bpl.n	800c76c <__swbuf_r+0x2e>
 800c7a8:	2e0a      	cmp	r6, #10
 800c7aa:	d1df      	bne.n	800c76c <__swbuf_r+0x2e>
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	f001 fd88 	bl	800e2c4 <_fflush_r>
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	d0d9      	beq.n	800c76c <__swbuf_r+0x2e>
 800c7b8:	e7d6      	b.n	800c768 <__swbuf_r+0x2a>
	...

0800c7bc <__swsetup_r>:
 800c7bc:	b538      	push	{r3, r4, r5, lr}
 800c7be:	4b29      	ldr	r3, [pc, #164]	@ (800c864 <__swsetup_r+0xa8>)
 800c7c0:	4605      	mov	r5, r0
 800c7c2:	460c      	mov	r4, r1
 800c7c4:	6818      	ldr	r0, [r3, #0]
 800c7c6:	b118      	cbz	r0, 800c7d0 <__swsetup_r+0x14>
 800c7c8:	6a03      	ldr	r3, [r0, #32]
 800c7ca:	b90b      	cbnz	r3, 800c7d0 <__swsetup_r+0x14>
 800c7cc:	f7ff ff3e 	bl	800c64c <__sinit>
 800c7d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7d4:	0719      	lsls	r1, r3, #28
 800c7d6:	d422      	bmi.n	800c81e <__swsetup_r+0x62>
 800c7d8:	06da      	lsls	r2, r3, #27
 800c7da:	d407      	bmi.n	800c7ec <__swsetup_r+0x30>
 800c7dc:	2209      	movs	r2, #9
 800c7de:	602a      	str	r2, [r5, #0]
 800c7e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7e8:	81a3      	strh	r3, [r4, #12]
 800c7ea:	e033      	b.n	800c854 <__swsetup_r+0x98>
 800c7ec:	0758      	lsls	r0, r3, #29
 800c7ee:	d512      	bpl.n	800c816 <__swsetup_r+0x5a>
 800c7f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c7f2:	b141      	cbz	r1, 800c806 <__swsetup_r+0x4a>
 800c7f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c7f8:	4299      	cmp	r1, r3
 800c7fa:	d002      	beq.n	800c802 <__swsetup_r+0x46>
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	f000 ff13 	bl	800d628 <_free_r>
 800c802:	2300      	movs	r3, #0
 800c804:	6363      	str	r3, [r4, #52]	@ 0x34
 800c806:	89a3      	ldrh	r3, [r4, #12]
 800c808:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c80c:	81a3      	strh	r3, [r4, #12]
 800c80e:	2300      	movs	r3, #0
 800c810:	6063      	str	r3, [r4, #4]
 800c812:	6923      	ldr	r3, [r4, #16]
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	89a3      	ldrh	r3, [r4, #12]
 800c818:	f043 0308 	orr.w	r3, r3, #8
 800c81c:	81a3      	strh	r3, [r4, #12]
 800c81e:	6923      	ldr	r3, [r4, #16]
 800c820:	b94b      	cbnz	r3, 800c836 <__swsetup_r+0x7a>
 800c822:	89a3      	ldrh	r3, [r4, #12]
 800c824:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c82c:	d003      	beq.n	800c836 <__swsetup_r+0x7a>
 800c82e:	4621      	mov	r1, r4
 800c830:	4628      	mov	r0, r5
 800c832:	f001 fd94 	bl	800e35e <__smakebuf_r>
 800c836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c83a:	f013 0201 	ands.w	r2, r3, #1
 800c83e:	d00a      	beq.n	800c856 <__swsetup_r+0x9a>
 800c840:	2200      	movs	r2, #0
 800c842:	60a2      	str	r2, [r4, #8]
 800c844:	6962      	ldr	r2, [r4, #20]
 800c846:	4252      	negs	r2, r2
 800c848:	61a2      	str	r2, [r4, #24]
 800c84a:	6922      	ldr	r2, [r4, #16]
 800c84c:	b942      	cbnz	r2, 800c860 <__swsetup_r+0xa4>
 800c84e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c852:	d1c5      	bne.n	800c7e0 <__swsetup_r+0x24>
 800c854:	bd38      	pop	{r3, r4, r5, pc}
 800c856:	0799      	lsls	r1, r3, #30
 800c858:	bf58      	it	pl
 800c85a:	6962      	ldrpl	r2, [r4, #20]
 800c85c:	60a2      	str	r2, [r4, #8]
 800c85e:	e7f4      	b.n	800c84a <__swsetup_r+0x8e>
 800c860:	2000      	movs	r0, #0
 800c862:	e7f7      	b.n	800c854 <__swsetup_r+0x98>
 800c864:	20000018 	.word	0x20000018

0800c868 <memset>:
 800c868:	4402      	add	r2, r0
 800c86a:	4603      	mov	r3, r0
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d100      	bne.n	800c872 <memset+0xa>
 800c870:	4770      	bx	lr
 800c872:	f803 1b01 	strb.w	r1, [r3], #1
 800c876:	e7f9      	b.n	800c86c <memset+0x4>

0800c878 <_localeconv_r>:
 800c878:	4800      	ldr	r0, [pc, #0]	@ (800c87c <_localeconv_r+0x4>)
 800c87a:	4770      	bx	lr
 800c87c:	20000158 	.word	0x20000158

0800c880 <_close_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	2300      	movs	r3, #0
 800c884:	4d05      	ldr	r5, [pc, #20]	@ (800c89c <_close_r+0x1c>)
 800c886:	4604      	mov	r4, r0
 800c888:	4608      	mov	r0, r1
 800c88a:	602b      	str	r3, [r5, #0]
 800c88c:	f7f5 fcf4 	bl	8002278 <_close>
 800c890:	1c43      	adds	r3, r0, #1
 800c892:	d102      	bne.n	800c89a <_close_r+0x1a>
 800c894:	682b      	ldr	r3, [r5, #0]
 800c896:	b103      	cbz	r3, 800c89a <_close_r+0x1a>
 800c898:	6023      	str	r3, [r4, #0]
 800c89a:	bd38      	pop	{r3, r4, r5, pc}
 800c89c:	20002710 	.word	0x20002710

0800c8a0 <_lseek_r>:
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	4d06      	ldr	r5, [pc, #24]	@ (800c8c0 <_lseek_r+0x20>)
 800c8a6:	4608      	mov	r0, r1
 800c8a8:	4611      	mov	r1, r2
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	602a      	str	r2, [r5, #0]
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	f7f5 fd09 	bl	80022c6 <_lseek>
 800c8b4:	1c43      	adds	r3, r0, #1
 800c8b6:	d102      	bne.n	800c8be <_lseek_r+0x1e>
 800c8b8:	682b      	ldr	r3, [r5, #0]
 800c8ba:	b103      	cbz	r3, 800c8be <_lseek_r+0x1e>
 800c8bc:	6023      	str	r3, [r4, #0]
 800c8be:	bd38      	pop	{r3, r4, r5, pc}
 800c8c0:	20002710 	.word	0x20002710

0800c8c4 <_read_r>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	4604      	mov	r4, r0
 800c8c8:	4d06      	ldr	r5, [pc, #24]	@ (800c8e4 <_read_r+0x20>)
 800c8ca:	4608      	mov	r0, r1
 800c8cc:	4611      	mov	r1, r2
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	602a      	str	r2, [r5, #0]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	f7f5 fc97 	bl	8002206 <_read>
 800c8d8:	1c43      	adds	r3, r0, #1
 800c8da:	d102      	bne.n	800c8e2 <_read_r+0x1e>
 800c8dc:	682b      	ldr	r3, [r5, #0]
 800c8de:	b103      	cbz	r3, 800c8e2 <_read_r+0x1e>
 800c8e0:	6023      	str	r3, [r4, #0]
 800c8e2:	bd38      	pop	{r3, r4, r5, pc}
 800c8e4:	20002710 	.word	0x20002710

0800c8e8 <_write_r>:
 800c8e8:	b538      	push	{r3, r4, r5, lr}
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	4d06      	ldr	r5, [pc, #24]	@ (800c908 <_write_r+0x20>)
 800c8ee:	4608      	mov	r0, r1
 800c8f0:	4611      	mov	r1, r2
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	602a      	str	r2, [r5, #0]
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	f7f5 fca2 	bl	8002240 <_write>
 800c8fc:	1c43      	adds	r3, r0, #1
 800c8fe:	d102      	bne.n	800c906 <_write_r+0x1e>
 800c900:	682b      	ldr	r3, [r5, #0]
 800c902:	b103      	cbz	r3, 800c906 <_write_r+0x1e>
 800c904:	6023      	str	r3, [r4, #0]
 800c906:	bd38      	pop	{r3, r4, r5, pc}
 800c908:	20002710 	.word	0x20002710

0800c90c <__errno>:
 800c90c:	4b01      	ldr	r3, [pc, #4]	@ (800c914 <__errno+0x8>)
 800c90e:	6818      	ldr	r0, [r3, #0]
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	20000018 	.word	0x20000018

0800c918 <__libc_init_array>:
 800c918:	b570      	push	{r4, r5, r6, lr}
 800c91a:	4d0d      	ldr	r5, [pc, #52]	@ (800c950 <__libc_init_array+0x38>)
 800c91c:	2600      	movs	r6, #0
 800c91e:	4c0d      	ldr	r4, [pc, #52]	@ (800c954 <__libc_init_array+0x3c>)
 800c920:	1b64      	subs	r4, r4, r5
 800c922:	10a4      	asrs	r4, r4, #2
 800c924:	42a6      	cmp	r6, r4
 800c926:	d109      	bne.n	800c93c <__libc_init_array+0x24>
 800c928:	4d0b      	ldr	r5, [pc, #44]	@ (800c958 <__libc_init_array+0x40>)
 800c92a:	2600      	movs	r6, #0
 800c92c:	4c0b      	ldr	r4, [pc, #44]	@ (800c95c <__libc_init_array+0x44>)
 800c92e:	f001 fe43 	bl	800e5b8 <_init>
 800c932:	1b64      	subs	r4, r4, r5
 800c934:	10a4      	asrs	r4, r4, #2
 800c936:	42a6      	cmp	r6, r4
 800c938:	d105      	bne.n	800c946 <__libc_init_array+0x2e>
 800c93a:	bd70      	pop	{r4, r5, r6, pc}
 800c93c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c940:	3601      	adds	r6, #1
 800c942:	4798      	blx	r3
 800c944:	e7ee      	b.n	800c924 <__libc_init_array+0xc>
 800c946:	f855 3b04 	ldr.w	r3, [r5], #4
 800c94a:	3601      	adds	r6, #1
 800c94c:	4798      	blx	r3
 800c94e:	e7f2      	b.n	800c936 <__libc_init_array+0x1e>
 800c950:	0800ea48 	.word	0x0800ea48
 800c954:	0800ea48 	.word	0x0800ea48
 800c958:	0800ea48 	.word	0x0800ea48
 800c95c:	0800ea4c 	.word	0x0800ea4c

0800c960 <__retarget_lock_init_recursive>:
 800c960:	4770      	bx	lr

0800c962 <__retarget_lock_acquire_recursive>:
 800c962:	4770      	bx	lr

0800c964 <__retarget_lock_release_recursive>:
 800c964:	4770      	bx	lr

0800c966 <memchr>:
 800c966:	b2c9      	uxtb	r1, r1
 800c968:	4603      	mov	r3, r0
 800c96a:	4402      	add	r2, r0
 800c96c:	b510      	push	{r4, lr}
 800c96e:	4293      	cmp	r3, r2
 800c970:	4618      	mov	r0, r3
 800c972:	d101      	bne.n	800c978 <memchr+0x12>
 800c974:	2000      	movs	r0, #0
 800c976:	e003      	b.n	800c980 <memchr+0x1a>
 800c978:	7804      	ldrb	r4, [r0, #0]
 800c97a:	3301      	adds	r3, #1
 800c97c:	428c      	cmp	r4, r1
 800c97e:	d1f6      	bne.n	800c96e <memchr+0x8>
 800c980:	bd10      	pop	{r4, pc}

0800c982 <quorem>:
 800c982:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c986:	6903      	ldr	r3, [r0, #16]
 800c988:	4607      	mov	r7, r0
 800c98a:	690c      	ldr	r4, [r1, #16]
 800c98c:	42a3      	cmp	r3, r4
 800c98e:	f2c0 8083 	blt.w	800ca98 <quorem+0x116>
 800c992:	3c01      	subs	r4, #1
 800c994:	f100 0514 	add.w	r5, r0, #20
 800c998:	f101 0814 	add.w	r8, r1, #20
 800c99c:	00a3      	lsls	r3, r4, #2
 800c99e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9a6:	9300      	str	r3, [sp, #0]
 800c9a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9ac:	9301      	str	r3, [sp, #4]
 800c9ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9ba:	d331      	bcc.n	800ca20 <quorem+0x9e>
 800c9bc:	f04f 0a00 	mov.w	sl, #0
 800c9c0:	46c4      	mov	ip, r8
 800c9c2:	46ae      	mov	lr, r5
 800c9c4:	46d3      	mov	fp, sl
 800c9c6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c9ca:	b298      	uxth	r0, r3
 800c9cc:	45e1      	cmp	r9, ip
 800c9ce:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c9d2:	fb06 a000 	mla	r0, r6, r0, sl
 800c9d6:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800c9da:	b280      	uxth	r0, r0
 800c9dc:	fb06 2303 	mla	r3, r6, r3, r2
 800c9e0:	f8de 2000 	ldr.w	r2, [lr]
 800c9e4:	b292      	uxth	r2, r2
 800c9e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9ea:	eba2 0200 	sub.w	r2, r2, r0
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	f8de 0000 	ldr.w	r0, [lr]
 800c9f4:	445a      	add	r2, fp
 800c9f6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c9fa:	b292      	uxth	r2, r2
 800c9fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ca00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ca04:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ca08:	f84e 2b04 	str.w	r2, [lr], #4
 800ca0c:	d2db      	bcs.n	800c9c6 <quorem+0x44>
 800ca0e:	9b00      	ldr	r3, [sp, #0]
 800ca10:	58eb      	ldr	r3, [r5, r3]
 800ca12:	b92b      	cbnz	r3, 800ca20 <quorem+0x9e>
 800ca14:	9b01      	ldr	r3, [sp, #4]
 800ca16:	3b04      	subs	r3, #4
 800ca18:	429d      	cmp	r5, r3
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	d330      	bcc.n	800ca80 <quorem+0xfe>
 800ca1e:	613c      	str	r4, [r7, #16]
 800ca20:	4638      	mov	r0, r7
 800ca22:	f001 f97d 	bl	800dd20 <__mcmp>
 800ca26:	2800      	cmp	r0, #0
 800ca28:	db26      	blt.n	800ca78 <quorem+0xf6>
 800ca2a:	4629      	mov	r1, r5
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca32:	f8d1 c000 	ldr.w	ip, [r1]
 800ca36:	fa1f fe82 	uxth.w	lr, r2
 800ca3a:	45c1      	cmp	r9, r8
 800ca3c:	fa1f f38c 	uxth.w	r3, ip
 800ca40:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800ca44:	eba3 030e 	sub.w	r3, r3, lr
 800ca48:	4403      	add	r3, r0
 800ca4a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ca54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca58:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ca5c:	f841 3b04 	str.w	r3, [r1], #4
 800ca60:	d2e5      	bcs.n	800ca2e <quorem+0xac>
 800ca62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca6a:	b922      	cbnz	r2, 800ca76 <quorem+0xf4>
 800ca6c:	3b04      	subs	r3, #4
 800ca6e:	429d      	cmp	r5, r3
 800ca70:	461a      	mov	r2, r3
 800ca72:	d30b      	bcc.n	800ca8c <quorem+0x10a>
 800ca74:	613c      	str	r4, [r7, #16]
 800ca76:	3601      	adds	r6, #1
 800ca78:	4630      	mov	r0, r6
 800ca7a:	b003      	add	sp, #12
 800ca7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca80:	6812      	ldr	r2, [r2, #0]
 800ca82:	3b04      	subs	r3, #4
 800ca84:	2a00      	cmp	r2, #0
 800ca86:	d1ca      	bne.n	800ca1e <quorem+0x9c>
 800ca88:	3c01      	subs	r4, #1
 800ca8a:	e7c5      	b.n	800ca18 <quorem+0x96>
 800ca8c:	6812      	ldr	r2, [r2, #0]
 800ca8e:	3b04      	subs	r3, #4
 800ca90:	2a00      	cmp	r2, #0
 800ca92:	d1ef      	bne.n	800ca74 <quorem+0xf2>
 800ca94:	3c01      	subs	r4, #1
 800ca96:	e7ea      	b.n	800ca6e <quorem+0xec>
 800ca98:	2000      	movs	r0, #0
 800ca9a:	e7ee      	b.n	800ca7a <quorem+0xf8>
 800ca9c:	0000      	movs	r0, r0
	...

0800caa0 <_dtoa_r>:
 800caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa4:	69c7      	ldr	r7, [r0, #28]
 800caa6:	b099      	sub	sp, #100	@ 0x64
 800caa8:	4683      	mov	fp, r0
 800caaa:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800caac:	9109      	str	r1, [sp, #36]	@ 0x24
 800caae:	920e      	str	r2, [sp, #56]	@ 0x38
 800cab0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cab2:	ec55 4b10 	vmov	r4, r5, d0
 800cab6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800caba:	b97f      	cbnz	r7, 800cadc <_dtoa_r+0x3c>
 800cabc:	2010      	movs	r0, #16
 800cabe:	f000 fdfd 	bl	800d6bc <malloc>
 800cac2:	4602      	mov	r2, r0
 800cac4:	f8cb 001c 	str.w	r0, [fp, #28]
 800cac8:	b920      	cbnz	r0, 800cad4 <_dtoa_r+0x34>
 800caca:	4ba7      	ldr	r3, [pc, #668]	@ (800cd68 <_dtoa_r+0x2c8>)
 800cacc:	21ef      	movs	r1, #239	@ 0xef
 800cace:	48a7      	ldr	r0, [pc, #668]	@ (800cd6c <_dtoa_r+0x2cc>)
 800cad0:	f001 fcc2 	bl	800e458 <__assert_func>
 800cad4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cad8:	6007      	str	r7, [r0, #0]
 800cada:	60c7      	str	r7, [r0, #12]
 800cadc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cae0:	6819      	ldr	r1, [r3, #0]
 800cae2:	b159      	cbz	r1, 800cafc <_dtoa_r+0x5c>
 800cae4:	685a      	ldr	r2, [r3, #4]
 800cae6:	2301      	movs	r3, #1
 800cae8:	4658      	mov	r0, fp
 800caea:	4093      	lsls	r3, r2
 800caec:	604a      	str	r2, [r1, #4]
 800caee:	608b      	str	r3, [r1, #8]
 800caf0:	f000 feda 	bl	800d8a8 <_Bfree>
 800caf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800caf8:	2200      	movs	r2, #0
 800cafa:	601a      	str	r2, [r3, #0]
 800cafc:	1e2b      	subs	r3, r5, #0
 800cafe:	bfb7      	itett	lt
 800cb00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cb04:	2300      	movge	r3, #0
 800cb06:	2201      	movlt	r2, #1
 800cb08:	9303      	strlt	r3, [sp, #12]
 800cb0a:	bfa8      	it	ge
 800cb0c:	6033      	strge	r3, [r6, #0]
 800cb0e:	9f03      	ldr	r7, [sp, #12]
 800cb10:	4b97      	ldr	r3, [pc, #604]	@ (800cd70 <_dtoa_r+0x2d0>)
 800cb12:	bfb8      	it	lt
 800cb14:	6032      	strlt	r2, [r6, #0]
 800cb16:	43bb      	bics	r3, r7
 800cb18:	d112      	bne.n	800cb40 <_dtoa_r+0xa0>
 800cb1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cb1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cb20:	6013      	str	r3, [r2, #0]
 800cb22:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb26:	4323      	orrs	r3, r4
 800cb28:	f000 854c 	beq.w	800d5c4 <_dtoa_r+0xb24>
 800cb2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb2e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cd84 <_dtoa_r+0x2e4>
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	f000 854e 	beq.w	800d5d4 <_dtoa_r+0xb34>
 800cb38:	f10a 0303 	add.w	r3, sl, #3
 800cb3c:	f000 bd48 	b.w	800d5d0 <_dtoa_r+0xb30>
 800cb40:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb44:	2200      	movs	r2, #0
 800cb46:	2300      	movs	r3, #0
 800cb48:	ec51 0b17 	vmov	r0, r1, d7
 800cb4c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cb50:	f7f3 ffbe 	bl	8000ad0 <__aeabi_dcmpeq>
 800cb54:	4680      	mov	r8, r0
 800cb56:	b158      	cbz	r0, 800cb70 <_dtoa_r+0xd0>
 800cb58:	2301      	movs	r3, #1
 800cb5a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cb5c:	6013      	str	r3, [r2, #0]
 800cb5e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb60:	b113      	cbz	r3, 800cb68 <_dtoa_r+0xc8>
 800cb62:	4b84      	ldr	r3, [pc, #528]	@ (800cd74 <_dtoa_r+0x2d4>)
 800cb64:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cb66:	6013      	str	r3, [r2, #0]
 800cb68:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800cd88 <_dtoa_r+0x2e8>
 800cb6c:	f000 bd32 	b.w	800d5d4 <_dtoa_r+0xb34>
 800cb70:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cb74:	aa16      	add	r2, sp, #88	@ 0x58
 800cb76:	a917      	add	r1, sp, #92	@ 0x5c
 800cb78:	4658      	mov	r0, fp
 800cb7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cb7e:	f001 f983 	bl	800de88 <__d2b>
 800cb82:	4681      	mov	r9, r0
 800cb84:	2e00      	cmp	r6, #0
 800cb86:	d075      	beq.n	800cc74 <_dtoa_r+0x1d4>
 800cb88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb8a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cb8e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cb92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb96:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cb9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb9e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cba2:	4619      	mov	r1, r3
 800cba4:	2200      	movs	r2, #0
 800cba6:	4b74      	ldr	r3, [pc, #464]	@ (800cd78 <_dtoa_r+0x2d8>)
 800cba8:	f7f3 fb72 	bl	8000290 <__aeabi_dsub>
 800cbac:	a368      	add	r3, pc, #416	@ (adr r3, 800cd50 <_dtoa_r+0x2b0>)
 800cbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb2:	f7f3 fd25 	bl	8000600 <__aeabi_dmul>
 800cbb6:	a368      	add	r3, pc, #416	@ (adr r3, 800cd58 <_dtoa_r+0x2b8>)
 800cbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbc:	f7f3 fb6a 	bl	8000294 <__adddf3>
 800cbc0:	4604      	mov	r4, r0
 800cbc2:	460d      	mov	r5, r1
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	f7f3 fcb1 	bl	800052c <__aeabi_i2d>
 800cbca:	a365      	add	r3, pc, #404	@ (adr r3, 800cd60 <_dtoa_r+0x2c0>)
 800cbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd0:	f7f3 fd16 	bl	8000600 <__aeabi_dmul>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	4620      	mov	r0, r4
 800cbda:	4629      	mov	r1, r5
 800cbdc:	f7f3 fb5a 	bl	8000294 <__adddf3>
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	460d      	mov	r5, r1
 800cbe4:	f7f3 ffbc 	bl	8000b60 <__aeabi_d2iz>
 800cbe8:	2200      	movs	r2, #0
 800cbea:	4607      	mov	r7, r0
 800cbec:	2300      	movs	r3, #0
 800cbee:	4620      	mov	r0, r4
 800cbf0:	4629      	mov	r1, r5
 800cbf2:	f7f3 ff77 	bl	8000ae4 <__aeabi_dcmplt>
 800cbf6:	b140      	cbz	r0, 800cc0a <_dtoa_r+0x16a>
 800cbf8:	4638      	mov	r0, r7
 800cbfa:	f7f3 fc97 	bl	800052c <__aeabi_i2d>
 800cbfe:	4622      	mov	r2, r4
 800cc00:	462b      	mov	r3, r5
 800cc02:	f7f3 ff65 	bl	8000ad0 <__aeabi_dcmpeq>
 800cc06:	b900      	cbnz	r0, 800cc0a <_dtoa_r+0x16a>
 800cc08:	3f01      	subs	r7, #1
 800cc0a:	2f16      	cmp	r7, #22
 800cc0c:	d851      	bhi.n	800ccb2 <_dtoa_r+0x212>
 800cc0e:	4b5b      	ldr	r3, [pc, #364]	@ (800cd7c <_dtoa_r+0x2dc>)
 800cc10:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1c:	f7f3 ff62 	bl	8000ae4 <__aeabi_dcmplt>
 800cc20:	2800      	cmp	r0, #0
 800cc22:	d048      	beq.n	800ccb6 <_dtoa_r+0x216>
 800cc24:	3f01      	subs	r7, #1
 800cc26:	2300      	movs	r3, #0
 800cc28:	9312      	str	r3, [sp, #72]	@ 0x48
 800cc2a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cc2c:	1b9b      	subs	r3, r3, r6
 800cc2e:	1e5a      	subs	r2, r3, #1
 800cc30:	bf46      	itte	mi
 800cc32:	f1c3 0801 	rsbmi	r8, r3, #1
 800cc36:	2300      	movmi	r3, #0
 800cc38:	f04f 0800 	movpl.w	r8, #0
 800cc3c:	9208      	str	r2, [sp, #32]
 800cc3e:	bf48      	it	mi
 800cc40:	9308      	strmi	r3, [sp, #32]
 800cc42:	2f00      	cmp	r7, #0
 800cc44:	db39      	blt.n	800ccba <_dtoa_r+0x21a>
 800cc46:	9b08      	ldr	r3, [sp, #32]
 800cc48:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cc4a:	443b      	add	r3, r7
 800cc4c:	9308      	str	r3, [sp, #32]
 800cc4e:	2300      	movs	r3, #0
 800cc50:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc54:	2b09      	cmp	r3, #9
 800cc56:	d864      	bhi.n	800cd22 <_dtoa_r+0x282>
 800cc58:	2b05      	cmp	r3, #5
 800cc5a:	bfc5      	ittet	gt
 800cc5c:	3b04      	subgt	r3, #4
 800cc5e:	2400      	movgt	r4, #0
 800cc60:	2401      	movle	r4, #1
 800cc62:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cc64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc66:	3b02      	subs	r3, #2
 800cc68:	2b03      	cmp	r3, #3
 800cc6a:	d865      	bhi.n	800cd38 <_dtoa_r+0x298>
 800cc6c:	e8df f003 	tbb	[pc, r3]
 800cc70:	5737392c 	.word	0x5737392c
 800cc74:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cc78:	441e      	add	r6, r3
 800cc7a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cc7e:	2b20      	cmp	r3, #32
 800cc80:	bfc9      	itett	gt
 800cc82:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cc86:	f1c3 0320 	rsble	r3, r3, #32
 800cc8a:	409f      	lslgt	r7, r3
 800cc8c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cc90:	bfd8      	it	le
 800cc92:	fa04 f003 	lslle.w	r0, r4, r3
 800cc96:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800cc9a:	bfc4      	itt	gt
 800cc9c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cca0:	ea47 0003 	orrgt.w	r0, r7, r3
 800cca4:	f7f3 fc32 	bl	800050c <__aeabi_ui2d>
 800cca8:	2201      	movs	r2, #1
 800ccaa:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ccae:	9214      	str	r2, [sp, #80]	@ 0x50
 800ccb0:	e777      	b.n	800cba2 <_dtoa_r+0x102>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e7b8      	b.n	800cc28 <_dtoa_r+0x188>
 800ccb6:	9012      	str	r0, [sp, #72]	@ 0x48
 800ccb8:	e7b7      	b.n	800cc2a <_dtoa_r+0x18a>
 800ccba:	427b      	negs	r3, r7
 800ccbc:	eba8 0807 	sub.w	r8, r8, r7
 800ccc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ccc6:	e7c4      	b.n	800cc52 <_dtoa_r+0x1b2>
 800ccc8:	2300      	movs	r3, #0
 800ccca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	dc35      	bgt.n	800cd3e <_dtoa_r+0x29e>
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	9300      	str	r3, [sp, #0]
 800ccd8:	9307      	str	r3, [sp, #28]
 800ccda:	920e      	str	r2, [sp, #56]	@ 0x38
 800ccdc:	e00b      	b.n	800ccf6 <_dtoa_r+0x256>
 800ccde:	2301      	movs	r3, #1
 800cce0:	e7f3      	b.n	800ccca <_dtoa_r+0x22a>
 800cce2:	2300      	movs	r3, #0
 800cce4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cce6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cce8:	18fb      	adds	r3, r7, r3
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	3301      	adds	r3, #1
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	9307      	str	r3, [sp, #28]
 800ccf2:	bfb8      	it	lt
 800ccf4:	2301      	movlt	r3, #1
 800ccf6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	2204      	movs	r2, #4
 800ccfe:	f102 0514 	add.w	r5, r2, #20
 800cd02:	429d      	cmp	r5, r3
 800cd04:	d91f      	bls.n	800cd46 <_dtoa_r+0x2a6>
 800cd06:	6041      	str	r1, [r0, #4]
 800cd08:	4658      	mov	r0, fp
 800cd0a:	f000 fd8d 	bl	800d828 <_Balloc>
 800cd0e:	4682      	mov	sl, r0
 800cd10:	2800      	cmp	r0, #0
 800cd12:	d13b      	bne.n	800cd8c <_dtoa_r+0x2ec>
 800cd14:	4b1a      	ldr	r3, [pc, #104]	@ (800cd80 <_dtoa_r+0x2e0>)
 800cd16:	4602      	mov	r2, r0
 800cd18:	f240 11af 	movw	r1, #431	@ 0x1af
 800cd1c:	e6d7      	b.n	800cace <_dtoa_r+0x2e>
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e7e0      	b.n	800cce4 <_dtoa_r+0x244>
 800cd22:	2401      	movs	r4, #1
 800cd24:	2300      	movs	r3, #0
 800cd26:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cd28:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd2e:	2200      	movs	r2, #0
 800cd30:	9300      	str	r3, [sp, #0]
 800cd32:	9307      	str	r3, [sp, #28]
 800cd34:	2312      	movs	r3, #18
 800cd36:	e7d0      	b.n	800ccda <_dtoa_r+0x23a>
 800cd38:	2301      	movs	r3, #1
 800cd3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd3c:	e7f5      	b.n	800cd2a <_dtoa_r+0x28a>
 800cd3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd40:	9300      	str	r3, [sp, #0]
 800cd42:	9307      	str	r3, [sp, #28]
 800cd44:	e7d7      	b.n	800ccf6 <_dtoa_r+0x256>
 800cd46:	3101      	adds	r1, #1
 800cd48:	0052      	lsls	r2, r2, #1
 800cd4a:	e7d8      	b.n	800ccfe <_dtoa_r+0x25e>
 800cd4c:	f3af 8000 	nop.w
 800cd50:	636f4361 	.word	0x636f4361
 800cd54:	3fd287a7 	.word	0x3fd287a7
 800cd58:	8b60c8b3 	.word	0x8b60c8b3
 800cd5c:	3fc68a28 	.word	0x3fc68a28
 800cd60:	509f79fb 	.word	0x509f79fb
 800cd64:	3fd34413 	.word	0x3fd34413
 800cd68:	0800e711 	.word	0x0800e711
 800cd6c:	0800e728 	.word	0x0800e728
 800cd70:	7ff00000 	.word	0x7ff00000
 800cd74:	0800e6e1 	.word	0x0800e6e1
 800cd78:	3ff80000 	.word	0x3ff80000
 800cd7c:	0800e820 	.word	0x0800e820
 800cd80:	0800e780 	.word	0x0800e780
 800cd84:	0800e70d 	.word	0x0800e70d
 800cd88:	0800e6e0 	.word	0x0800e6e0
 800cd8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cd90:	6018      	str	r0, [r3, #0]
 800cd92:	9b07      	ldr	r3, [sp, #28]
 800cd94:	2b0e      	cmp	r3, #14
 800cd96:	f200 80a4 	bhi.w	800cee2 <_dtoa_r+0x442>
 800cd9a:	2c00      	cmp	r4, #0
 800cd9c:	f000 80a1 	beq.w	800cee2 <_dtoa_r+0x442>
 800cda0:	2f00      	cmp	r7, #0
 800cda2:	dd33      	ble.n	800ce0c <_dtoa_r+0x36c>
 800cda4:	f007 020f 	and.w	r2, r7, #15
 800cda8:	4bac      	ldr	r3, [pc, #688]	@ (800d05c <_dtoa_r+0x5bc>)
 800cdaa:	05f8      	lsls	r0, r7, #23
 800cdac:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cdb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdb4:	ed93 7b00 	vldr	d7, [r3]
 800cdb8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cdbc:	d516      	bpl.n	800cdec <_dtoa_r+0x34c>
 800cdbe:	4ba8      	ldr	r3, [pc, #672]	@ (800d060 <_dtoa_r+0x5c0>)
 800cdc0:	f004 040f 	and.w	r4, r4, #15
 800cdc4:	2603      	movs	r6, #3
 800cdc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cdca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdce:	f7f3 fd41 	bl	8000854 <__aeabi_ddiv>
 800cdd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdd6:	4da2      	ldr	r5, [pc, #648]	@ (800d060 <_dtoa_r+0x5c0>)
 800cdd8:	b954      	cbnz	r4, 800cdf0 <_dtoa_r+0x350>
 800cdda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cde2:	f7f3 fd37 	bl	8000854 <__aeabi_ddiv>
 800cde6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdea:	e028      	b.n	800ce3e <_dtoa_r+0x39e>
 800cdec:	2602      	movs	r6, #2
 800cdee:	e7f2      	b.n	800cdd6 <_dtoa_r+0x336>
 800cdf0:	07e1      	lsls	r1, r4, #31
 800cdf2:	d508      	bpl.n	800ce06 <_dtoa_r+0x366>
 800cdf4:	3601      	adds	r6, #1
 800cdf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cdfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cdfe:	f7f3 fbff 	bl	8000600 <__aeabi_dmul>
 800ce02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce06:	1064      	asrs	r4, r4, #1
 800ce08:	3508      	adds	r5, #8
 800ce0a:	e7e5      	b.n	800cdd8 <_dtoa_r+0x338>
 800ce0c:	f000 80d2 	beq.w	800cfb4 <_dtoa_r+0x514>
 800ce10:	427c      	negs	r4, r7
 800ce12:	4b92      	ldr	r3, [pc, #584]	@ (800d05c <_dtoa_r+0x5bc>)
 800ce14:	4d92      	ldr	r5, [pc, #584]	@ (800d060 <_dtoa_r+0x5c0>)
 800ce16:	2602      	movs	r6, #2
 800ce18:	f004 020f 	and.w	r2, r4, #15
 800ce1c:	1124      	asrs	r4, r4, #4
 800ce1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2a:	f7f3 fbe9 	bl	8000600 <__aeabi_dmul>
 800ce2e:	2300      	movs	r3, #0
 800ce30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce34:	2c00      	cmp	r4, #0
 800ce36:	f040 80b2 	bne.w	800cf9e <_dtoa_r+0x4fe>
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1d3      	bne.n	800cde6 <_dtoa_r+0x346>
 800ce3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ce40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f000 80b7 	beq.w	800cfb8 <_dtoa_r+0x518>
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	4b85      	ldr	r3, [pc, #532]	@ (800d064 <_dtoa_r+0x5c4>)
 800ce4e:	4620      	mov	r0, r4
 800ce50:	4629      	mov	r1, r5
 800ce52:	f7f3 fe47 	bl	8000ae4 <__aeabi_dcmplt>
 800ce56:	2800      	cmp	r0, #0
 800ce58:	f000 80ae 	beq.w	800cfb8 <_dtoa_r+0x518>
 800ce5c:	9b07      	ldr	r3, [sp, #28]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	f000 80aa 	beq.w	800cfb8 <_dtoa_r+0x518>
 800ce64:	9b00      	ldr	r3, [sp, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	dd37      	ble.n	800ceda <_dtoa_r+0x43a>
 800ce6a:	1e7b      	subs	r3, r7, #1
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	2200      	movs	r2, #0
 800ce70:	4629      	mov	r1, r5
 800ce72:	9304      	str	r3, [sp, #16]
 800ce74:	3601      	adds	r6, #1
 800ce76:	4b7c      	ldr	r3, [pc, #496]	@ (800d068 <_dtoa_r+0x5c8>)
 800ce78:	f7f3 fbc2 	bl	8000600 <__aeabi_dmul>
 800ce7c:	9c00      	ldr	r4, [sp, #0]
 800ce7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce82:	4630      	mov	r0, r6
 800ce84:	f7f3 fb52 	bl	800052c <__aeabi_i2d>
 800ce88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce8c:	f7f3 fbb8 	bl	8000600 <__aeabi_dmul>
 800ce90:	2200      	movs	r2, #0
 800ce92:	4b76      	ldr	r3, [pc, #472]	@ (800d06c <_dtoa_r+0x5cc>)
 800ce94:	f7f3 f9fe 	bl	8000294 <__adddf3>
 800ce98:	4605      	mov	r5, r0
 800ce9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ce9e:	2c00      	cmp	r4, #0
 800cea0:	f040 808d 	bne.w	800cfbe <_dtoa_r+0x51e>
 800cea4:	2200      	movs	r2, #0
 800cea6:	4b72      	ldr	r3, [pc, #456]	@ (800d070 <_dtoa_r+0x5d0>)
 800cea8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ceac:	f7f3 f9f0 	bl	8000290 <__aeabi_dsub>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ceb8:	462a      	mov	r2, r5
 800ceba:	4633      	mov	r3, r6
 800cebc:	f7f3 fe30 	bl	8000b20 <__aeabi_dcmpgt>
 800cec0:	2800      	cmp	r0, #0
 800cec2:	f040 828b 	bne.w	800d3dc <_dtoa_r+0x93c>
 800cec6:	462a      	mov	r2, r5
 800cec8:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ced0:	f7f3 fe08 	bl	8000ae4 <__aeabi_dcmplt>
 800ced4:	2800      	cmp	r0, #0
 800ced6:	f040 8128 	bne.w	800d12a <_dtoa_r+0x68a>
 800ceda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cede:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cee2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	f2c0 815a 	blt.w	800d19e <_dtoa_r+0x6fe>
 800ceea:	2f0e      	cmp	r7, #14
 800ceec:	f300 8157 	bgt.w	800d19e <_dtoa_r+0x6fe>
 800cef0:	4b5a      	ldr	r3, [pc, #360]	@ (800d05c <_dtoa_r+0x5bc>)
 800cef2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cef6:	ed93 7b00 	vldr	d7, [r3]
 800cefa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	ed8d 7b00 	vstr	d7, [sp]
 800cf02:	da03      	bge.n	800cf0c <_dtoa_r+0x46c>
 800cf04:	9b07      	ldr	r3, [sp, #28]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	f340 8101 	ble.w	800d10e <_dtoa_r+0x66e>
 800cf0c:	4656      	mov	r6, sl
 800cf0e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cf12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf16:	4620      	mov	r0, r4
 800cf18:	4629      	mov	r1, r5
 800cf1a:	f7f3 fc9b 	bl	8000854 <__aeabi_ddiv>
 800cf1e:	f7f3 fe1f 	bl	8000b60 <__aeabi_d2iz>
 800cf22:	4680      	mov	r8, r0
 800cf24:	f7f3 fb02 	bl	800052c <__aeabi_i2d>
 800cf28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf2c:	f7f3 fb68 	bl	8000600 <__aeabi_dmul>
 800cf30:	4602      	mov	r2, r0
 800cf32:	4620      	mov	r0, r4
 800cf34:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cf38:	460b      	mov	r3, r1
 800cf3a:	4629      	mov	r1, r5
 800cf3c:	f7f3 f9a8 	bl	8000290 <__aeabi_dsub>
 800cf40:	9d07      	ldr	r5, [sp, #28]
 800cf42:	f806 4b01 	strb.w	r4, [r6], #1
 800cf46:	eba6 040a 	sub.w	r4, r6, sl
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	42a5      	cmp	r5, r4
 800cf50:	f040 8117 	bne.w	800d182 <_dtoa_r+0x6e2>
 800cf54:	f7f3 f99e 	bl	8000294 <__adddf3>
 800cf58:	4604      	mov	r4, r0
 800cf5a:	460d      	mov	r5, r1
 800cf5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf60:	f7f3 fdde 	bl	8000b20 <__aeabi_dcmpgt>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	f040 80f9 	bne.w	800d15c <_dtoa_r+0x6bc>
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	4629      	mov	r1, r5
 800cf6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf72:	f7f3 fdad 	bl	8000ad0 <__aeabi_dcmpeq>
 800cf76:	b118      	cbz	r0, 800cf80 <_dtoa_r+0x4e0>
 800cf78:	f018 0f01 	tst.w	r8, #1
 800cf7c:	f040 80ee 	bne.w	800d15c <_dtoa_r+0x6bc>
 800cf80:	4649      	mov	r1, r9
 800cf82:	4658      	mov	r0, fp
 800cf84:	f000 fc90 	bl	800d8a8 <_Bfree>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	3701      	adds	r7, #1
 800cf8c:	7033      	strb	r3, [r6, #0]
 800cf8e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cf90:	601f      	str	r7, [r3, #0]
 800cf92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	f000 831d 	beq.w	800d5d4 <_dtoa_r+0xb34>
 800cf9a:	601e      	str	r6, [r3, #0]
 800cf9c:	e31a      	b.n	800d5d4 <_dtoa_r+0xb34>
 800cf9e:	07e2      	lsls	r2, r4, #31
 800cfa0:	d505      	bpl.n	800cfae <_dtoa_r+0x50e>
 800cfa2:	3601      	adds	r6, #1
 800cfa4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cfa8:	f7f3 fb2a 	bl	8000600 <__aeabi_dmul>
 800cfac:	2301      	movs	r3, #1
 800cfae:	1064      	asrs	r4, r4, #1
 800cfb0:	3508      	adds	r5, #8
 800cfb2:	e73f      	b.n	800ce34 <_dtoa_r+0x394>
 800cfb4:	2602      	movs	r6, #2
 800cfb6:	e742      	b.n	800ce3e <_dtoa_r+0x39e>
 800cfb8:	9c07      	ldr	r4, [sp, #28]
 800cfba:	9704      	str	r7, [sp, #16]
 800cfbc:	e761      	b.n	800ce82 <_dtoa_r+0x3e2>
 800cfbe:	4b27      	ldr	r3, [pc, #156]	@ (800d05c <_dtoa_r+0x5bc>)
 800cfc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cfc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cfc6:	4454      	add	r4, sl
 800cfc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cfcc:	2900      	cmp	r1, #0
 800cfce:	d053      	beq.n	800d078 <_dtoa_r+0x5d8>
 800cfd0:	2000      	movs	r0, #0
 800cfd2:	4928      	ldr	r1, [pc, #160]	@ (800d074 <_dtoa_r+0x5d4>)
 800cfd4:	f7f3 fc3e 	bl	8000854 <__aeabi_ddiv>
 800cfd8:	4633      	mov	r3, r6
 800cfda:	4656      	mov	r6, sl
 800cfdc:	462a      	mov	r2, r5
 800cfde:	f7f3 f957 	bl	8000290 <__aeabi_dsub>
 800cfe2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cfe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfea:	f7f3 fdb9 	bl	8000b60 <__aeabi_d2iz>
 800cfee:	4605      	mov	r5, r0
 800cff0:	f7f3 fa9c 	bl	800052c <__aeabi_i2d>
 800cff4:	4602      	mov	r2, r0
 800cff6:	460b      	mov	r3, r1
 800cff8:	3530      	adds	r5, #48	@ 0x30
 800cffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cffe:	f7f3 f947 	bl	8000290 <__aeabi_dsub>
 800d002:	4602      	mov	r2, r0
 800d004:	460b      	mov	r3, r1
 800d006:	f806 5b01 	strb.w	r5, [r6], #1
 800d00a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d00e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d012:	f7f3 fd67 	bl	8000ae4 <__aeabi_dcmplt>
 800d016:	2800      	cmp	r0, #0
 800d018:	d171      	bne.n	800d0fe <_dtoa_r+0x65e>
 800d01a:	2000      	movs	r0, #0
 800d01c:	4911      	ldr	r1, [pc, #68]	@ (800d064 <_dtoa_r+0x5c4>)
 800d01e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d022:	f7f3 f935 	bl	8000290 <__aeabi_dsub>
 800d026:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d02a:	f7f3 fd5b 	bl	8000ae4 <__aeabi_dcmplt>
 800d02e:	2800      	cmp	r0, #0
 800d030:	f040 8095 	bne.w	800d15e <_dtoa_r+0x6be>
 800d034:	42a6      	cmp	r6, r4
 800d036:	f43f af50 	beq.w	800ceda <_dtoa_r+0x43a>
 800d03a:	2200      	movs	r2, #0
 800d03c:	4b0a      	ldr	r3, [pc, #40]	@ (800d068 <_dtoa_r+0x5c8>)
 800d03e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d042:	f7f3 fadd 	bl	8000600 <__aeabi_dmul>
 800d046:	2200      	movs	r2, #0
 800d048:	4b07      	ldr	r3, [pc, #28]	@ (800d068 <_dtoa_r+0x5c8>)
 800d04a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d04e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d052:	f7f3 fad5 	bl	8000600 <__aeabi_dmul>
 800d056:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d05a:	e7c4      	b.n	800cfe6 <_dtoa_r+0x546>
 800d05c:	0800e820 	.word	0x0800e820
 800d060:	0800e7f8 	.word	0x0800e7f8
 800d064:	3ff00000 	.word	0x3ff00000
 800d068:	40240000 	.word	0x40240000
 800d06c:	401c0000 	.word	0x401c0000
 800d070:	40140000 	.word	0x40140000
 800d074:	3fe00000 	.word	0x3fe00000
 800d078:	4631      	mov	r1, r6
 800d07a:	4656      	mov	r6, sl
 800d07c:	4628      	mov	r0, r5
 800d07e:	f7f3 fabf 	bl	8000600 <__aeabi_dmul>
 800d082:	9415      	str	r4, [sp, #84]	@ 0x54
 800d084:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d08c:	f7f3 fd68 	bl	8000b60 <__aeabi_d2iz>
 800d090:	4605      	mov	r5, r0
 800d092:	f7f3 fa4b 	bl	800052c <__aeabi_i2d>
 800d096:	4602      	mov	r2, r0
 800d098:	3530      	adds	r5, #48	@ 0x30
 800d09a:	460b      	mov	r3, r1
 800d09c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0a0:	f7f3 f8f6 	bl	8000290 <__aeabi_dsub>
 800d0a4:	f806 5b01 	strb.w	r5, [r6], #1
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	42a6      	cmp	r6, r4
 800d0ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d0b2:	f04f 0200 	mov.w	r2, #0
 800d0b6:	d124      	bne.n	800d102 <_dtoa_r+0x662>
 800d0b8:	4bac      	ldr	r3, [pc, #688]	@ (800d36c <_dtoa_r+0x8cc>)
 800d0ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d0be:	f7f3 f8e9 	bl	8000294 <__adddf3>
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0ca:	f7f3 fd29 	bl	8000b20 <__aeabi_dcmpgt>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d145      	bne.n	800d15e <_dtoa_r+0x6be>
 800d0d2:	2000      	movs	r0, #0
 800d0d4:	49a5      	ldr	r1, [pc, #660]	@ (800d36c <_dtoa_r+0x8cc>)
 800d0d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d0da:	f7f3 f8d9 	bl	8000290 <__aeabi_dsub>
 800d0de:	4602      	mov	r2, r0
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0e6:	f7f3 fcfd 	bl	8000ae4 <__aeabi_dcmplt>
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	f43f aef5 	beq.w	800ceda <_dtoa_r+0x43a>
 800d0f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d0f2:	1e73      	subs	r3, r6, #1
 800d0f4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d0f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d0fa:	2b30      	cmp	r3, #48	@ 0x30
 800d0fc:	d0f8      	beq.n	800d0f0 <_dtoa_r+0x650>
 800d0fe:	9f04      	ldr	r7, [sp, #16]
 800d100:	e73e      	b.n	800cf80 <_dtoa_r+0x4e0>
 800d102:	4b9b      	ldr	r3, [pc, #620]	@ (800d370 <_dtoa_r+0x8d0>)
 800d104:	f7f3 fa7c 	bl	8000600 <__aeabi_dmul>
 800d108:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d10c:	e7bc      	b.n	800d088 <_dtoa_r+0x5e8>
 800d10e:	d10c      	bne.n	800d12a <_dtoa_r+0x68a>
 800d110:	2200      	movs	r2, #0
 800d112:	4b98      	ldr	r3, [pc, #608]	@ (800d374 <_dtoa_r+0x8d4>)
 800d114:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d118:	f7f3 fa72 	bl	8000600 <__aeabi_dmul>
 800d11c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d120:	f7f3 fcf4 	bl	8000b0c <__aeabi_dcmpge>
 800d124:	2800      	cmp	r0, #0
 800d126:	f000 8157 	beq.w	800d3d8 <_dtoa_r+0x938>
 800d12a:	2400      	movs	r4, #0
 800d12c:	4625      	mov	r5, r4
 800d12e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d130:	4656      	mov	r6, sl
 800d132:	43db      	mvns	r3, r3
 800d134:	9304      	str	r3, [sp, #16]
 800d136:	2700      	movs	r7, #0
 800d138:	4621      	mov	r1, r4
 800d13a:	4658      	mov	r0, fp
 800d13c:	f000 fbb4 	bl	800d8a8 <_Bfree>
 800d140:	2d00      	cmp	r5, #0
 800d142:	d0dc      	beq.n	800d0fe <_dtoa_r+0x65e>
 800d144:	b12f      	cbz	r7, 800d152 <_dtoa_r+0x6b2>
 800d146:	42af      	cmp	r7, r5
 800d148:	d003      	beq.n	800d152 <_dtoa_r+0x6b2>
 800d14a:	4639      	mov	r1, r7
 800d14c:	4658      	mov	r0, fp
 800d14e:	f000 fbab 	bl	800d8a8 <_Bfree>
 800d152:	4629      	mov	r1, r5
 800d154:	4658      	mov	r0, fp
 800d156:	f000 fba7 	bl	800d8a8 <_Bfree>
 800d15a:	e7d0      	b.n	800d0fe <_dtoa_r+0x65e>
 800d15c:	9704      	str	r7, [sp, #16]
 800d15e:	4633      	mov	r3, r6
 800d160:	461e      	mov	r6, r3
 800d162:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d166:	2a39      	cmp	r2, #57	@ 0x39
 800d168:	d107      	bne.n	800d17a <_dtoa_r+0x6da>
 800d16a:	459a      	cmp	sl, r3
 800d16c:	d1f8      	bne.n	800d160 <_dtoa_r+0x6c0>
 800d16e:	9a04      	ldr	r2, [sp, #16]
 800d170:	3201      	adds	r2, #1
 800d172:	9204      	str	r2, [sp, #16]
 800d174:	2230      	movs	r2, #48	@ 0x30
 800d176:	f88a 2000 	strb.w	r2, [sl]
 800d17a:	781a      	ldrb	r2, [r3, #0]
 800d17c:	3201      	adds	r2, #1
 800d17e:	701a      	strb	r2, [r3, #0]
 800d180:	e7bd      	b.n	800d0fe <_dtoa_r+0x65e>
 800d182:	2200      	movs	r2, #0
 800d184:	4b7a      	ldr	r3, [pc, #488]	@ (800d370 <_dtoa_r+0x8d0>)
 800d186:	f7f3 fa3b 	bl	8000600 <__aeabi_dmul>
 800d18a:	2200      	movs	r2, #0
 800d18c:	2300      	movs	r3, #0
 800d18e:	4604      	mov	r4, r0
 800d190:	460d      	mov	r5, r1
 800d192:	f7f3 fc9d 	bl	8000ad0 <__aeabi_dcmpeq>
 800d196:	2800      	cmp	r0, #0
 800d198:	f43f aebb 	beq.w	800cf12 <_dtoa_r+0x472>
 800d19c:	e6f0      	b.n	800cf80 <_dtoa_r+0x4e0>
 800d19e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d1a0:	2a00      	cmp	r2, #0
 800d1a2:	f000 80db 	beq.w	800d35c <_dtoa_r+0x8bc>
 800d1a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1a8:	2a01      	cmp	r2, #1
 800d1aa:	f300 80bf 	bgt.w	800d32c <_dtoa_r+0x88c>
 800d1ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d1b0:	2a00      	cmp	r2, #0
 800d1b2:	f000 80b7 	beq.w	800d324 <_dtoa_r+0x884>
 800d1b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d1ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d1bc:	4646      	mov	r6, r8
 800d1be:	9a08      	ldr	r2, [sp, #32]
 800d1c0:	2101      	movs	r1, #1
 800d1c2:	4658      	mov	r0, fp
 800d1c4:	4498      	add	r8, r3
 800d1c6:	441a      	add	r2, r3
 800d1c8:	9208      	str	r2, [sp, #32]
 800d1ca:	f000 fc23 	bl	800da14 <__i2b>
 800d1ce:	4605      	mov	r5, r0
 800d1d0:	b15e      	cbz	r6, 800d1ea <_dtoa_r+0x74a>
 800d1d2:	9b08      	ldr	r3, [sp, #32]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	dd08      	ble.n	800d1ea <_dtoa_r+0x74a>
 800d1d8:	42b3      	cmp	r3, r6
 800d1da:	9a08      	ldr	r2, [sp, #32]
 800d1dc:	bfa8      	it	ge
 800d1de:	4633      	movge	r3, r6
 800d1e0:	eba8 0803 	sub.w	r8, r8, r3
 800d1e4:	1af6      	subs	r6, r6, r3
 800d1e6:	1ad3      	subs	r3, r2, r3
 800d1e8:	9308      	str	r3, [sp, #32]
 800d1ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1ec:	b1f3      	cbz	r3, 800d22c <_dtoa_r+0x78c>
 800d1ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	f000 80b7 	beq.w	800d364 <_dtoa_r+0x8c4>
 800d1f6:	b18c      	cbz	r4, 800d21c <_dtoa_r+0x77c>
 800d1f8:	4629      	mov	r1, r5
 800d1fa:	4622      	mov	r2, r4
 800d1fc:	4658      	mov	r0, fp
 800d1fe:	f000 fcc9 	bl	800db94 <__pow5mult>
 800d202:	464a      	mov	r2, r9
 800d204:	4601      	mov	r1, r0
 800d206:	4605      	mov	r5, r0
 800d208:	4658      	mov	r0, fp
 800d20a:	f000 fc19 	bl	800da40 <__multiply>
 800d20e:	4649      	mov	r1, r9
 800d210:	9004      	str	r0, [sp, #16]
 800d212:	4658      	mov	r0, fp
 800d214:	f000 fb48 	bl	800d8a8 <_Bfree>
 800d218:	9b04      	ldr	r3, [sp, #16]
 800d21a:	4699      	mov	r9, r3
 800d21c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d21e:	1b1a      	subs	r2, r3, r4
 800d220:	d004      	beq.n	800d22c <_dtoa_r+0x78c>
 800d222:	4649      	mov	r1, r9
 800d224:	4658      	mov	r0, fp
 800d226:	f000 fcb5 	bl	800db94 <__pow5mult>
 800d22a:	4681      	mov	r9, r0
 800d22c:	2101      	movs	r1, #1
 800d22e:	4658      	mov	r0, fp
 800d230:	f000 fbf0 	bl	800da14 <__i2b>
 800d234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d236:	4604      	mov	r4, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	f000 81cf 	beq.w	800d5dc <_dtoa_r+0xb3c>
 800d23e:	461a      	mov	r2, r3
 800d240:	4601      	mov	r1, r0
 800d242:	4658      	mov	r0, fp
 800d244:	f000 fca6 	bl	800db94 <__pow5mult>
 800d248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d24a:	4604      	mov	r4, r0
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	f300 8095 	bgt.w	800d37c <_dtoa_r+0x8dc>
 800d252:	9b02      	ldr	r3, [sp, #8]
 800d254:	2b00      	cmp	r3, #0
 800d256:	f040 8087 	bne.w	800d368 <_dtoa_r+0x8c8>
 800d25a:	9b03      	ldr	r3, [sp, #12]
 800d25c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d260:	2b00      	cmp	r3, #0
 800d262:	f040 8089 	bne.w	800d378 <_dtoa_r+0x8d8>
 800d266:	9b03      	ldr	r3, [sp, #12]
 800d268:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d26c:	0d1b      	lsrs	r3, r3, #20
 800d26e:	051b      	lsls	r3, r3, #20
 800d270:	b12b      	cbz	r3, 800d27e <_dtoa_r+0x7de>
 800d272:	9b08      	ldr	r3, [sp, #32]
 800d274:	f108 0801 	add.w	r8, r8, #1
 800d278:	3301      	adds	r3, #1
 800d27a:	9308      	str	r3, [sp, #32]
 800d27c:	2301      	movs	r3, #1
 800d27e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d282:	2b00      	cmp	r3, #0
 800d284:	f000 81b0 	beq.w	800d5e8 <_dtoa_r+0xb48>
 800d288:	6923      	ldr	r3, [r4, #16]
 800d28a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d28e:	6918      	ldr	r0, [r3, #16]
 800d290:	f000 fb74 	bl	800d97c <__hi0bits>
 800d294:	f1c0 0020 	rsb	r0, r0, #32
 800d298:	9b08      	ldr	r3, [sp, #32]
 800d29a:	4418      	add	r0, r3
 800d29c:	f010 001f 	ands.w	r0, r0, #31
 800d2a0:	d077      	beq.n	800d392 <_dtoa_r+0x8f2>
 800d2a2:	f1c0 0320 	rsb	r3, r0, #32
 800d2a6:	2b04      	cmp	r3, #4
 800d2a8:	dd6b      	ble.n	800d382 <_dtoa_r+0x8e2>
 800d2aa:	f1c0 001c 	rsb	r0, r0, #28
 800d2ae:	9b08      	ldr	r3, [sp, #32]
 800d2b0:	4480      	add	r8, r0
 800d2b2:	4403      	add	r3, r0
 800d2b4:	4406      	add	r6, r0
 800d2b6:	9308      	str	r3, [sp, #32]
 800d2b8:	f1b8 0f00 	cmp.w	r8, #0
 800d2bc:	dd05      	ble.n	800d2ca <_dtoa_r+0x82a>
 800d2be:	4649      	mov	r1, r9
 800d2c0:	4642      	mov	r2, r8
 800d2c2:	4658      	mov	r0, fp
 800d2c4:	f000 fcc0 	bl	800dc48 <__lshift>
 800d2c8:	4681      	mov	r9, r0
 800d2ca:	9b08      	ldr	r3, [sp, #32]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	dd05      	ble.n	800d2dc <_dtoa_r+0x83c>
 800d2d0:	4621      	mov	r1, r4
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	4658      	mov	r0, fp
 800d2d6:	f000 fcb7 	bl	800dc48 <__lshift>
 800d2da:	4604      	mov	r4, r0
 800d2dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d059      	beq.n	800d396 <_dtoa_r+0x8f6>
 800d2e2:	4621      	mov	r1, r4
 800d2e4:	4648      	mov	r0, r9
 800d2e6:	f000 fd1b 	bl	800dd20 <__mcmp>
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	da53      	bge.n	800d396 <_dtoa_r+0x8f6>
 800d2ee:	1e7b      	subs	r3, r7, #1
 800d2f0:	4649      	mov	r1, r9
 800d2f2:	220a      	movs	r2, #10
 800d2f4:	4658      	mov	r0, fp
 800d2f6:	9304      	str	r3, [sp, #16]
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	f000 faf7 	bl	800d8ec <__multadd>
 800d2fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d300:	4681      	mov	r9, r0
 800d302:	2b00      	cmp	r3, #0
 800d304:	f000 8172 	beq.w	800d5ec <_dtoa_r+0xb4c>
 800d308:	2300      	movs	r3, #0
 800d30a:	4629      	mov	r1, r5
 800d30c:	220a      	movs	r2, #10
 800d30e:	4658      	mov	r0, fp
 800d310:	f000 faec 	bl	800d8ec <__multadd>
 800d314:	9b00      	ldr	r3, [sp, #0]
 800d316:	4605      	mov	r5, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	dc67      	bgt.n	800d3ec <_dtoa_r+0x94c>
 800d31c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d31e:	2b02      	cmp	r3, #2
 800d320:	dc41      	bgt.n	800d3a6 <_dtoa_r+0x906>
 800d322:	e063      	b.n	800d3ec <_dtoa_r+0x94c>
 800d324:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d326:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d32a:	e746      	b.n	800d1ba <_dtoa_r+0x71a>
 800d32c:	9b07      	ldr	r3, [sp, #28]
 800d32e:	1e5c      	subs	r4, r3, #1
 800d330:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d332:	42a3      	cmp	r3, r4
 800d334:	bfb7      	itett	lt
 800d336:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d338:	1b1c      	subge	r4, r3, r4
 800d33a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d33c:	1ae3      	sublt	r3, r4, r3
 800d33e:	bfbe      	ittt	lt
 800d340:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d342:	2400      	movlt	r4, #0
 800d344:	18d2      	addlt	r2, r2, r3
 800d346:	9b07      	ldr	r3, [sp, #28]
 800d348:	bfb8      	it	lt
 800d34a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	bfb5      	itete	lt
 800d350:	eba8 0603 	sublt.w	r6, r8, r3
 800d354:	4646      	movge	r6, r8
 800d356:	2300      	movlt	r3, #0
 800d358:	9b07      	ldrge	r3, [sp, #28]
 800d35a:	e730      	b.n	800d1be <_dtoa_r+0x71e>
 800d35c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d35e:	4646      	mov	r6, r8
 800d360:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d362:	e735      	b.n	800d1d0 <_dtoa_r+0x730>
 800d364:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d366:	e75c      	b.n	800d222 <_dtoa_r+0x782>
 800d368:	2300      	movs	r3, #0
 800d36a:	e788      	b.n	800d27e <_dtoa_r+0x7de>
 800d36c:	3fe00000 	.word	0x3fe00000
 800d370:	40240000 	.word	0x40240000
 800d374:	40140000 	.word	0x40140000
 800d378:	9b02      	ldr	r3, [sp, #8]
 800d37a:	e780      	b.n	800d27e <_dtoa_r+0x7de>
 800d37c:	2300      	movs	r3, #0
 800d37e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d380:	e782      	b.n	800d288 <_dtoa_r+0x7e8>
 800d382:	d099      	beq.n	800d2b8 <_dtoa_r+0x818>
 800d384:	331c      	adds	r3, #28
 800d386:	9a08      	ldr	r2, [sp, #32]
 800d388:	441a      	add	r2, r3
 800d38a:	4498      	add	r8, r3
 800d38c:	441e      	add	r6, r3
 800d38e:	9208      	str	r2, [sp, #32]
 800d390:	e792      	b.n	800d2b8 <_dtoa_r+0x818>
 800d392:	4603      	mov	r3, r0
 800d394:	e7f6      	b.n	800d384 <_dtoa_r+0x8e4>
 800d396:	9b07      	ldr	r3, [sp, #28]
 800d398:	9704      	str	r7, [sp, #16]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	dc20      	bgt.n	800d3e0 <_dtoa_r+0x940>
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3a2:	2b02      	cmp	r3, #2
 800d3a4:	dd1e      	ble.n	800d3e4 <_dtoa_r+0x944>
 800d3a6:	9b00      	ldr	r3, [sp, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f47f aec0 	bne.w	800d12e <_dtoa_r+0x68e>
 800d3ae:	4621      	mov	r1, r4
 800d3b0:	2205      	movs	r2, #5
 800d3b2:	4658      	mov	r0, fp
 800d3b4:	f000 fa9a 	bl	800d8ec <__multadd>
 800d3b8:	4601      	mov	r1, r0
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	4648      	mov	r0, r9
 800d3be:	f000 fcaf 	bl	800dd20 <__mcmp>
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	f77f aeb3 	ble.w	800d12e <_dtoa_r+0x68e>
 800d3c8:	2331      	movs	r3, #49	@ 0x31
 800d3ca:	4656      	mov	r6, sl
 800d3cc:	f806 3b01 	strb.w	r3, [r6], #1
 800d3d0:	9b04      	ldr	r3, [sp, #16]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	9304      	str	r3, [sp, #16]
 800d3d6:	e6ae      	b.n	800d136 <_dtoa_r+0x696>
 800d3d8:	9c07      	ldr	r4, [sp, #28]
 800d3da:	9704      	str	r7, [sp, #16]
 800d3dc:	4625      	mov	r5, r4
 800d3de:	e7f3      	b.n	800d3c8 <_dtoa_r+0x928>
 800d3e0:	9b07      	ldr	r3, [sp, #28]
 800d3e2:	9300      	str	r3, [sp, #0]
 800d3e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	f000 8104 	beq.w	800d5f4 <_dtoa_r+0xb54>
 800d3ec:	2e00      	cmp	r6, #0
 800d3ee:	dd05      	ble.n	800d3fc <_dtoa_r+0x95c>
 800d3f0:	4629      	mov	r1, r5
 800d3f2:	4632      	mov	r2, r6
 800d3f4:	4658      	mov	r0, fp
 800d3f6:	f000 fc27 	bl	800dc48 <__lshift>
 800d3fa:	4605      	mov	r5, r0
 800d3fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d05a      	beq.n	800d4b8 <_dtoa_r+0xa18>
 800d402:	6869      	ldr	r1, [r5, #4]
 800d404:	4658      	mov	r0, fp
 800d406:	f000 fa0f 	bl	800d828 <_Balloc>
 800d40a:	4606      	mov	r6, r0
 800d40c:	b928      	cbnz	r0, 800d41a <_dtoa_r+0x97a>
 800d40e:	4b84      	ldr	r3, [pc, #528]	@ (800d620 <_dtoa_r+0xb80>)
 800d410:	4602      	mov	r2, r0
 800d412:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d416:	f7ff bb5a 	b.w	800cace <_dtoa_r+0x2e>
 800d41a:	692a      	ldr	r2, [r5, #16]
 800d41c:	f105 010c 	add.w	r1, r5, #12
 800d420:	300c      	adds	r0, #12
 800d422:	3202      	adds	r2, #2
 800d424:	0092      	lsls	r2, r2, #2
 800d426:	f001 f809 	bl	800e43c <memcpy>
 800d42a:	2201      	movs	r2, #1
 800d42c:	4631      	mov	r1, r6
 800d42e:	4658      	mov	r0, fp
 800d430:	f000 fc0a 	bl	800dc48 <__lshift>
 800d434:	f10a 0301 	add.w	r3, sl, #1
 800d438:	462f      	mov	r7, r5
 800d43a:	4605      	mov	r5, r0
 800d43c:	9307      	str	r3, [sp, #28]
 800d43e:	9b00      	ldr	r3, [sp, #0]
 800d440:	4453      	add	r3, sl
 800d442:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d444:	9b02      	ldr	r3, [sp, #8]
 800d446:	f003 0301 	and.w	r3, r3, #1
 800d44a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d44c:	9b07      	ldr	r3, [sp, #28]
 800d44e:	4621      	mov	r1, r4
 800d450:	4648      	mov	r0, r9
 800d452:	3b01      	subs	r3, #1
 800d454:	9300      	str	r3, [sp, #0]
 800d456:	f7ff fa94 	bl	800c982 <quorem>
 800d45a:	4639      	mov	r1, r7
 800d45c:	9002      	str	r0, [sp, #8]
 800d45e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d462:	4648      	mov	r0, r9
 800d464:	f000 fc5c 	bl	800dd20 <__mcmp>
 800d468:	462a      	mov	r2, r5
 800d46a:	9008      	str	r0, [sp, #32]
 800d46c:	4621      	mov	r1, r4
 800d46e:	4658      	mov	r0, fp
 800d470:	f000 fc72 	bl	800dd58 <__mdiff>
 800d474:	68c2      	ldr	r2, [r0, #12]
 800d476:	4606      	mov	r6, r0
 800d478:	bb02      	cbnz	r2, 800d4bc <_dtoa_r+0xa1c>
 800d47a:	4601      	mov	r1, r0
 800d47c:	4648      	mov	r0, r9
 800d47e:	f000 fc4f 	bl	800dd20 <__mcmp>
 800d482:	4602      	mov	r2, r0
 800d484:	4631      	mov	r1, r6
 800d486:	4658      	mov	r0, fp
 800d488:	920e      	str	r2, [sp, #56]	@ 0x38
 800d48a:	f000 fa0d 	bl	800d8a8 <_Bfree>
 800d48e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d490:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d492:	9e07      	ldr	r6, [sp, #28]
 800d494:	ea43 0102 	orr.w	r1, r3, r2
 800d498:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d49a:	4319      	orrs	r1, r3
 800d49c:	d110      	bne.n	800d4c0 <_dtoa_r+0xa20>
 800d49e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d4a2:	d029      	beq.n	800d4f8 <_dtoa_r+0xa58>
 800d4a4:	9b08      	ldr	r3, [sp, #32]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	dd02      	ble.n	800d4b0 <_dtoa_r+0xa10>
 800d4aa:	9b02      	ldr	r3, [sp, #8]
 800d4ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d4b0:	9b00      	ldr	r3, [sp, #0]
 800d4b2:	f883 8000 	strb.w	r8, [r3]
 800d4b6:	e63f      	b.n	800d138 <_dtoa_r+0x698>
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	e7bb      	b.n	800d434 <_dtoa_r+0x994>
 800d4bc:	2201      	movs	r2, #1
 800d4be:	e7e1      	b.n	800d484 <_dtoa_r+0x9e4>
 800d4c0:	9b08      	ldr	r3, [sp, #32]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	db04      	blt.n	800d4d0 <_dtoa_r+0xa30>
 800d4c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d4c8:	430b      	orrs	r3, r1
 800d4ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4cc:	430b      	orrs	r3, r1
 800d4ce:	d120      	bne.n	800d512 <_dtoa_r+0xa72>
 800d4d0:	2a00      	cmp	r2, #0
 800d4d2:	dded      	ble.n	800d4b0 <_dtoa_r+0xa10>
 800d4d4:	4649      	mov	r1, r9
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	4658      	mov	r0, fp
 800d4da:	f000 fbb5 	bl	800dc48 <__lshift>
 800d4de:	4621      	mov	r1, r4
 800d4e0:	4681      	mov	r9, r0
 800d4e2:	f000 fc1d 	bl	800dd20 <__mcmp>
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	dc03      	bgt.n	800d4f2 <_dtoa_r+0xa52>
 800d4ea:	d1e1      	bne.n	800d4b0 <_dtoa_r+0xa10>
 800d4ec:	f018 0f01 	tst.w	r8, #1
 800d4f0:	d0de      	beq.n	800d4b0 <_dtoa_r+0xa10>
 800d4f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d4f6:	d1d8      	bne.n	800d4aa <_dtoa_r+0xa0a>
 800d4f8:	2339      	movs	r3, #57	@ 0x39
 800d4fa:	9a00      	ldr	r2, [sp, #0]
 800d4fc:	7013      	strb	r3, [r2, #0]
 800d4fe:	4633      	mov	r3, r6
 800d500:	461e      	mov	r6, r3
 800d502:	3b01      	subs	r3, #1
 800d504:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d508:	2a39      	cmp	r2, #57	@ 0x39
 800d50a:	d052      	beq.n	800d5b2 <_dtoa_r+0xb12>
 800d50c:	3201      	adds	r2, #1
 800d50e:	701a      	strb	r2, [r3, #0]
 800d510:	e612      	b.n	800d138 <_dtoa_r+0x698>
 800d512:	2a00      	cmp	r2, #0
 800d514:	dd07      	ble.n	800d526 <_dtoa_r+0xa86>
 800d516:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d51a:	d0ed      	beq.n	800d4f8 <_dtoa_r+0xa58>
 800d51c:	f108 0301 	add.w	r3, r8, #1
 800d520:	9a00      	ldr	r2, [sp, #0]
 800d522:	7013      	strb	r3, [r2, #0]
 800d524:	e608      	b.n	800d138 <_dtoa_r+0x698>
 800d526:	9b07      	ldr	r3, [sp, #28]
 800d528:	9a07      	ldr	r2, [sp, #28]
 800d52a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d52e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d530:	4293      	cmp	r3, r2
 800d532:	d028      	beq.n	800d586 <_dtoa_r+0xae6>
 800d534:	4649      	mov	r1, r9
 800d536:	2300      	movs	r3, #0
 800d538:	220a      	movs	r2, #10
 800d53a:	4658      	mov	r0, fp
 800d53c:	f000 f9d6 	bl	800d8ec <__multadd>
 800d540:	42af      	cmp	r7, r5
 800d542:	4681      	mov	r9, r0
 800d544:	f04f 0300 	mov.w	r3, #0
 800d548:	f04f 020a 	mov.w	r2, #10
 800d54c:	4639      	mov	r1, r7
 800d54e:	4658      	mov	r0, fp
 800d550:	d107      	bne.n	800d562 <_dtoa_r+0xac2>
 800d552:	f000 f9cb 	bl	800d8ec <__multadd>
 800d556:	4607      	mov	r7, r0
 800d558:	4605      	mov	r5, r0
 800d55a:	9b07      	ldr	r3, [sp, #28]
 800d55c:	3301      	adds	r3, #1
 800d55e:	9307      	str	r3, [sp, #28]
 800d560:	e774      	b.n	800d44c <_dtoa_r+0x9ac>
 800d562:	f000 f9c3 	bl	800d8ec <__multadd>
 800d566:	4629      	mov	r1, r5
 800d568:	4607      	mov	r7, r0
 800d56a:	2300      	movs	r3, #0
 800d56c:	220a      	movs	r2, #10
 800d56e:	4658      	mov	r0, fp
 800d570:	f000 f9bc 	bl	800d8ec <__multadd>
 800d574:	4605      	mov	r5, r0
 800d576:	e7f0      	b.n	800d55a <_dtoa_r+0xaba>
 800d578:	9b00      	ldr	r3, [sp, #0]
 800d57a:	2700      	movs	r7, #0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	bfcc      	ite	gt
 800d580:	461e      	movgt	r6, r3
 800d582:	2601      	movle	r6, #1
 800d584:	4456      	add	r6, sl
 800d586:	4649      	mov	r1, r9
 800d588:	2201      	movs	r2, #1
 800d58a:	4658      	mov	r0, fp
 800d58c:	f000 fb5c 	bl	800dc48 <__lshift>
 800d590:	4621      	mov	r1, r4
 800d592:	4681      	mov	r9, r0
 800d594:	f000 fbc4 	bl	800dd20 <__mcmp>
 800d598:	2800      	cmp	r0, #0
 800d59a:	dcb0      	bgt.n	800d4fe <_dtoa_r+0xa5e>
 800d59c:	d102      	bne.n	800d5a4 <_dtoa_r+0xb04>
 800d59e:	f018 0f01 	tst.w	r8, #1
 800d5a2:	d1ac      	bne.n	800d4fe <_dtoa_r+0xa5e>
 800d5a4:	4633      	mov	r3, r6
 800d5a6:	461e      	mov	r6, r3
 800d5a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5ac:	2a30      	cmp	r2, #48	@ 0x30
 800d5ae:	d0fa      	beq.n	800d5a6 <_dtoa_r+0xb06>
 800d5b0:	e5c2      	b.n	800d138 <_dtoa_r+0x698>
 800d5b2:	459a      	cmp	sl, r3
 800d5b4:	d1a4      	bne.n	800d500 <_dtoa_r+0xa60>
 800d5b6:	9b04      	ldr	r3, [sp, #16]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	9304      	str	r3, [sp, #16]
 800d5bc:	2331      	movs	r3, #49	@ 0x31
 800d5be:	f88a 3000 	strb.w	r3, [sl]
 800d5c2:	e5b9      	b.n	800d138 <_dtoa_r+0x698>
 800d5c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d5c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d624 <_dtoa_r+0xb84>
 800d5ca:	b11b      	cbz	r3, 800d5d4 <_dtoa_r+0xb34>
 800d5cc:	f10a 0308 	add.w	r3, sl, #8
 800d5d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d5d2:	6013      	str	r3, [r2, #0]
 800d5d4:	4650      	mov	r0, sl
 800d5d6:	b019      	add	sp, #100	@ 0x64
 800d5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	f77f ae37 	ble.w	800d252 <_dtoa_r+0x7b2>
 800d5e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5e8:	2001      	movs	r0, #1
 800d5ea:	e655      	b.n	800d298 <_dtoa_r+0x7f8>
 800d5ec:	9b00      	ldr	r3, [sp, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	f77f aed6 	ble.w	800d3a0 <_dtoa_r+0x900>
 800d5f4:	4656      	mov	r6, sl
 800d5f6:	4621      	mov	r1, r4
 800d5f8:	4648      	mov	r0, r9
 800d5fa:	f7ff f9c2 	bl	800c982 <quorem>
 800d5fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d602:	9b00      	ldr	r3, [sp, #0]
 800d604:	f806 8b01 	strb.w	r8, [r6], #1
 800d608:	eba6 020a 	sub.w	r2, r6, sl
 800d60c:	4293      	cmp	r3, r2
 800d60e:	ddb3      	ble.n	800d578 <_dtoa_r+0xad8>
 800d610:	4649      	mov	r1, r9
 800d612:	2300      	movs	r3, #0
 800d614:	220a      	movs	r2, #10
 800d616:	4658      	mov	r0, fp
 800d618:	f000 f968 	bl	800d8ec <__multadd>
 800d61c:	4681      	mov	r9, r0
 800d61e:	e7ea      	b.n	800d5f6 <_dtoa_r+0xb56>
 800d620:	0800e780 	.word	0x0800e780
 800d624:	0800e704 	.word	0x0800e704

0800d628 <_free_r>:
 800d628:	b538      	push	{r3, r4, r5, lr}
 800d62a:	4605      	mov	r5, r0
 800d62c:	2900      	cmp	r1, #0
 800d62e:	d041      	beq.n	800d6b4 <_free_r+0x8c>
 800d630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d634:	1f0c      	subs	r4, r1, #4
 800d636:	2b00      	cmp	r3, #0
 800d638:	bfb8      	it	lt
 800d63a:	18e4      	addlt	r4, r4, r3
 800d63c:	f000 f8e8 	bl	800d810 <__malloc_lock>
 800d640:	4a1d      	ldr	r2, [pc, #116]	@ (800d6b8 <_free_r+0x90>)
 800d642:	6813      	ldr	r3, [r2, #0]
 800d644:	b933      	cbnz	r3, 800d654 <_free_r+0x2c>
 800d646:	6063      	str	r3, [r4, #4]
 800d648:	6014      	str	r4, [r2, #0]
 800d64a:	4628      	mov	r0, r5
 800d64c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d650:	f000 b8e4 	b.w	800d81c <__malloc_unlock>
 800d654:	42a3      	cmp	r3, r4
 800d656:	d908      	bls.n	800d66a <_free_r+0x42>
 800d658:	6820      	ldr	r0, [r4, #0]
 800d65a:	1821      	adds	r1, r4, r0
 800d65c:	428b      	cmp	r3, r1
 800d65e:	bf01      	itttt	eq
 800d660:	6819      	ldreq	r1, [r3, #0]
 800d662:	685b      	ldreq	r3, [r3, #4]
 800d664:	1809      	addeq	r1, r1, r0
 800d666:	6021      	streq	r1, [r4, #0]
 800d668:	e7ed      	b.n	800d646 <_free_r+0x1e>
 800d66a:	461a      	mov	r2, r3
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	b10b      	cbz	r3, 800d674 <_free_r+0x4c>
 800d670:	42a3      	cmp	r3, r4
 800d672:	d9fa      	bls.n	800d66a <_free_r+0x42>
 800d674:	6811      	ldr	r1, [r2, #0]
 800d676:	1850      	adds	r0, r2, r1
 800d678:	42a0      	cmp	r0, r4
 800d67a:	d10b      	bne.n	800d694 <_free_r+0x6c>
 800d67c:	6820      	ldr	r0, [r4, #0]
 800d67e:	4401      	add	r1, r0
 800d680:	1850      	adds	r0, r2, r1
 800d682:	6011      	str	r1, [r2, #0]
 800d684:	4283      	cmp	r3, r0
 800d686:	d1e0      	bne.n	800d64a <_free_r+0x22>
 800d688:	6818      	ldr	r0, [r3, #0]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	4408      	add	r0, r1
 800d68e:	6053      	str	r3, [r2, #4]
 800d690:	6010      	str	r0, [r2, #0]
 800d692:	e7da      	b.n	800d64a <_free_r+0x22>
 800d694:	d902      	bls.n	800d69c <_free_r+0x74>
 800d696:	230c      	movs	r3, #12
 800d698:	602b      	str	r3, [r5, #0]
 800d69a:	e7d6      	b.n	800d64a <_free_r+0x22>
 800d69c:	6820      	ldr	r0, [r4, #0]
 800d69e:	1821      	adds	r1, r4, r0
 800d6a0:	428b      	cmp	r3, r1
 800d6a2:	bf02      	ittt	eq
 800d6a4:	6819      	ldreq	r1, [r3, #0]
 800d6a6:	685b      	ldreq	r3, [r3, #4]
 800d6a8:	1809      	addeq	r1, r1, r0
 800d6aa:	6063      	str	r3, [r4, #4]
 800d6ac:	bf08      	it	eq
 800d6ae:	6021      	streq	r1, [r4, #0]
 800d6b0:	6054      	str	r4, [r2, #4]
 800d6b2:	e7ca      	b.n	800d64a <_free_r+0x22>
 800d6b4:	bd38      	pop	{r3, r4, r5, pc}
 800d6b6:	bf00      	nop
 800d6b8:	2000271c 	.word	0x2000271c

0800d6bc <malloc>:
 800d6bc:	4b02      	ldr	r3, [pc, #8]	@ (800d6c8 <malloc+0xc>)
 800d6be:	4601      	mov	r1, r0
 800d6c0:	6818      	ldr	r0, [r3, #0]
 800d6c2:	f000 b825 	b.w	800d710 <_malloc_r>
 800d6c6:	bf00      	nop
 800d6c8:	20000018 	.word	0x20000018

0800d6cc <sbrk_aligned>:
 800d6cc:	b570      	push	{r4, r5, r6, lr}
 800d6ce:	4e0f      	ldr	r6, [pc, #60]	@ (800d70c <sbrk_aligned+0x40>)
 800d6d0:	460c      	mov	r4, r1
 800d6d2:	4605      	mov	r5, r0
 800d6d4:	6831      	ldr	r1, [r6, #0]
 800d6d6:	b911      	cbnz	r1, 800d6de <sbrk_aligned+0x12>
 800d6d8:	f000 fea0 	bl	800e41c <_sbrk_r>
 800d6dc:	6030      	str	r0, [r6, #0]
 800d6de:	4621      	mov	r1, r4
 800d6e0:	4628      	mov	r0, r5
 800d6e2:	f000 fe9b 	bl	800e41c <_sbrk_r>
 800d6e6:	1c43      	adds	r3, r0, #1
 800d6e8:	d103      	bne.n	800d6f2 <sbrk_aligned+0x26>
 800d6ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	bd70      	pop	{r4, r5, r6, pc}
 800d6f2:	1cc4      	adds	r4, r0, #3
 800d6f4:	f024 0403 	bic.w	r4, r4, #3
 800d6f8:	42a0      	cmp	r0, r4
 800d6fa:	d0f8      	beq.n	800d6ee <sbrk_aligned+0x22>
 800d6fc:	1a21      	subs	r1, r4, r0
 800d6fe:	4628      	mov	r0, r5
 800d700:	f000 fe8c 	bl	800e41c <_sbrk_r>
 800d704:	3001      	adds	r0, #1
 800d706:	d1f2      	bne.n	800d6ee <sbrk_aligned+0x22>
 800d708:	e7ef      	b.n	800d6ea <sbrk_aligned+0x1e>
 800d70a:	bf00      	nop
 800d70c:	20002718 	.word	0x20002718

0800d710 <_malloc_r>:
 800d710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d714:	1ccd      	adds	r5, r1, #3
 800d716:	4606      	mov	r6, r0
 800d718:	f025 0503 	bic.w	r5, r5, #3
 800d71c:	3508      	adds	r5, #8
 800d71e:	2d0c      	cmp	r5, #12
 800d720:	bf38      	it	cc
 800d722:	250c      	movcc	r5, #12
 800d724:	2d00      	cmp	r5, #0
 800d726:	db01      	blt.n	800d72c <_malloc_r+0x1c>
 800d728:	42a9      	cmp	r1, r5
 800d72a:	d904      	bls.n	800d736 <_malloc_r+0x26>
 800d72c:	230c      	movs	r3, #12
 800d72e:	6033      	str	r3, [r6, #0]
 800d730:	2000      	movs	r0, #0
 800d732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d736:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d80c <_malloc_r+0xfc>
 800d73a:	f000 f869 	bl	800d810 <__malloc_lock>
 800d73e:	f8d8 3000 	ldr.w	r3, [r8]
 800d742:	461c      	mov	r4, r3
 800d744:	bb44      	cbnz	r4, 800d798 <_malloc_r+0x88>
 800d746:	4629      	mov	r1, r5
 800d748:	4630      	mov	r0, r6
 800d74a:	f7ff ffbf 	bl	800d6cc <sbrk_aligned>
 800d74e:	1c43      	adds	r3, r0, #1
 800d750:	4604      	mov	r4, r0
 800d752:	d158      	bne.n	800d806 <_malloc_r+0xf6>
 800d754:	f8d8 4000 	ldr.w	r4, [r8]
 800d758:	4627      	mov	r7, r4
 800d75a:	2f00      	cmp	r7, #0
 800d75c:	d143      	bne.n	800d7e6 <_malloc_r+0xd6>
 800d75e:	2c00      	cmp	r4, #0
 800d760:	d04b      	beq.n	800d7fa <_malloc_r+0xea>
 800d762:	6823      	ldr	r3, [r4, #0]
 800d764:	4639      	mov	r1, r7
 800d766:	4630      	mov	r0, r6
 800d768:	eb04 0903 	add.w	r9, r4, r3
 800d76c:	f000 fe56 	bl	800e41c <_sbrk_r>
 800d770:	4581      	cmp	r9, r0
 800d772:	d142      	bne.n	800d7fa <_malloc_r+0xea>
 800d774:	6821      	ldr	r1, [r4, #0]
 800d776:	4630      	mov	r0, r6
 800d778:	1a6d      	subs	r5, r5, r1
 800d77a:	4629      	mov	r1, r5
 800d77c:	f7ff ffa6 	bl	800d6cc <sbrk_aligned>
 800d780:	3001      	adds	r0, #1
 800d782:	d03a      	beq.n	800d7fa <_malloc_r+0xea>
 800d784:	6823      	ldr	r3, [r4, #0]
 800d786:	442b      	add	r3, r5
 800d788:	6023      	str	r3, [r4, #0]
 800d78a:	f8d8 3000 	ldr.w	r3, [r8]
 800d78e:	685a      	ldr	r2, [r3, #4]
 800d790:	bb62      	cbnz	r2, 800d7ec <_malloc_r+0xdc>
 800d792:	f8c8 7000 	str.w	r7, [r8]
 800d796:	e00f      	b.n	800d7b8 <_malloc_r+0xa8>
 800d798:	6822      	ldr	r2, [r4, #0]
 800d79a:	1b52      	subs	r2, r2, r5
 800d79c:	d420      	bmi.n	800d7e0 <_malloc_r+0xd0>
 800d79e:	2a0b      	cmp	r2, #11
 800d7a0:	d917      	bls.n	800d7d2 <_malloc_r+0xc2>
 800d7a2:	1961      	adds	r1, r4, r5
 800d7a4:	42a3      	cmp	r3, r4
 800d7a6:	6025      	str	r5, [r4, #0]
 800d7a8:	bf18      	it	ne
 800d7aa:	6059      	strne	r1, [r3, #4]
 800d7ac:	6863      	ldr	r3, [r4, #4]
 800d7ae:	bf08      	it	eq
 800d7b0:	f8c8 1000 	streq.w	r1, [r8]
 800d7b4:	5162      	str	r2, [r4, r5]
 800d7b6:	604b      	str	r3, [r1, #4]
 800d7b8:	4630      	mov	r0, r6
 800d7ba:	f000 f82f 	bl	800d81c <__malloc_unlock>
 800d7be:	f104 000b 	add.w	r0, r4, #11
 800d7c2:	1d23      	adds	r3, r4, #4
 800d7c4:	f020 0007 	bic.w	r0, r0, #7
 800d7c8:	1ac2      	subs	r2, r0, r3
 800d7ca:	bf1c      	itt	ne
 800d7cc:	1a1b      	subne	r3, r3, r0
 800d7ce:	50a3      	strne	r3, [r4, r2]
 800d7d0:	e7af      	b.n	800d732 <_malloc_r+0x22>
 800d7d2:	6862      	ldr	r2, [r4, #4]
 800d7d4:	42a3      	cmp	r3, r4
 800d7d6:	bf0c      	ite	eq
 800d7d8:	f8c8 2000 	streq.w	r2, [r8]
 800d7dc:	605a      	strne	r2, [r3, #4]
 800d7de:	e7eb      	b.n	800d7b8 <_malloc_r+0xa8>
 800d7e0:	4623      	mov	r3, r4
 800d7e2:	6864      	ldr	r4, [r4, #4]
 800d7e4:	e7ae      	b.n	800d744 <_malloc_r+0x34>
 800d7e6:	463c      	mov	r4, r7
 800d7e8:	687f      	ldr	r7, [r7, #4]
 800d7ea:	e7b6      	b.n	800d75a <_malloc_r+0x4a>
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	42a3      	cmp	r3, r4
 800d7f2:	d1fb      	bne.n	800d7ec <_malloc_r+0xdc>
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	6053      	str	r3, [r2, #4]
 800d7f8:	e7de      	b.n	800d7b8 <_malloc_r+0xa8>
 800d7fa:	230c      	movs	r3, #12
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	6033      	str	r3, [r6, #0]
 800d800:	f000 f80c 	bl	800d81c <__malloc_unlock>
 800d804:	e794      	b.n	800d730 <_malloc_r+0x20>
 800d806:	6005      	str	r5, [r0, #0]
 800d808:	e7d6      	b.n	800d7b8 <_malloc_r+0xa8>
 800d80a:	bf00      	nop
 800d80c:	2000271c 	.word	0x2000271c

0800d810 <__malloc_lock>:
 800d810:	4801      	ldr	r0, [pc, #4]	@ (800d818 <__malloc_lock+0x8>)
 800d812:	f7ff b8a6 	b.w	800c962 <__retarget_lock_acquire_recursive>
 800d816:	bf00      	nop
 800d818:	20002714 	.word	0x20002714

0800d81c <__malloc_unlock>:
 800d81c:	4801      	ldr	r0, [pc, #4]	@ (800d824 <__malloc_unlock+0x8>)
 800d81e:	f7ff b8a1 	b.w	800c964 <__retarget_lock_release_recursive>
 800d822:	bf00      	nop
 800d824:	20002714 	.word	0x20002714

0800d828 <_Balloc>:
 800d828:	b570      	push	{r4, r5, r6, lr}
 800d82a:	69c6      	ldr	r6, [r0, #28]
 800d82c:	4604      	mov	r4, r0
 800d82e:	460d      	mov	r5, r1
 800d830:	b976      	cbnz	r6, 800d850 <_Balloc+0x28>
 800d832:	2010      	movs	r0, #16
 800d834:	f7ff ff42 	bl	800d6bc <malloc>
 800d838:	4602      	mov	r2, r0
 800d83a:	61e0      	str	r0, [r4, #28]
 800d83c:	b920      	cbnz	r0, 800d848 <_Balloc+0x20>
 800d83e:	4b18      	ldr	r3, [pc, #96]	@ (800d8a0 <_Balloc+0x78>)
 800d840:	216b      	movs	r1, #107	@ 0x6b
 800d842:	4818      	ldr	r0, [pc, #96]	@ (800d8a4 <_Balloc+0x7c>)
 800d844:	f000 fe08 	bl	800e458 <__assert_func>
 800d848:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d84c:	6006      	str	r6, [r0, #0]
 800d84e:	60c6      	str	r6, [r0, #12]
 800d850:	69e6      	ldr	r6, [r4, #28]
 800d852:	68f3      	ldr	r3, [r6, #12]
 800d854:	b183      	cbz	r3, 800d878 <_Balloc+0x50>
 800d856:	69e3      	ldr	r3, [r4, #28]
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d85e:	b9b8      	cbnz	r0, 800d890 <_Balloc+0x68>
 800d860:	2101      	movs	r1, #1
 800d862:	4620      	mov	r0, r4
 800d864:	fa01 f605 	lsl.w	r6, r1, r5
 800d868:	1d72      	adds	r2, r6, #5
 800d86a:	0092      	lsls	r2, r2, #2
 800d86c:	f000 fe12 	bl	800e494 <_calloc_r>
 800d870:	b160      	cbz	r0, 800d88c <_Balloc+0x64>
 800d872:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d876:	e00e      	b.n	800d896 <_Balloc+0x6e>
 800d878:	2221      	movs	r2, #33	@ 0x21
 800d87a:	2104      	movs	r1, #4
 800d87c:	4620      	mov	r0, r4
 800d87e:	f000 fe09 	bl	800e494 <_calloc_r>
 800d882:	69e3      	ldr	r3, [r4, #28]
 800d884:	60f0      	str	r0, [r6, #12]
 800d886:	68db      	ldr	r3, [r3, #12]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1e4      	bne.n	800d856 <_Balloc+0x2e>
 800d88c:	2000      	movs	r0, #0
 800d88e:	bd70      	pop	{r4, r5, r6, pc}
 800d890:	6802      	ldr	r2, [r0, #0]
 800d892:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d896:	2300      	movs	r3, #0
 800d898:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d89c:	e7f7      	b.n	800d88e <_Balloc+0x66>
 800d89e:	bf00      	nop
 800d8a0:	0800e711 	.word	0x0800e711
 800d8a4:	0800e791 	.word	0x0800e791

0800d8a8 <_Bfree>:
 800d8a8:	b570      	push	{r4, r5, r6, lr}
 800d8aa:	69c6      	ldr	r6, [r0, #28]
 800d8ac:	4605      	mov	r5, r0
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	b976      	cbnz	r6, 800d8d0 <_Bfree+0x28>
 800d8b2:	2010      	movs	r0, #16
 800d8b4:	f7ff ff02 	bl	800d6bc <malloc>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	61e8      	str	r0, [r5, #28]
 800d8bc:	b920      	cbnz	r0, 800d8c8 <_Bfree+0x20>
 800d8be:	4b09      	ldr	r3, [pc, #36]	@ (800d8e4 <_Bfree+0x3c>)
 800d8c0:	218f      	movs	r1, #143	@ 0x8f
 800d8c2:	4809      	ldr	r0, [pc, #36]	@ (800d8e8 <_Bfree+0x40>)
 800d8c4:	f000 fdc8 	bl	800e458 <__assert_func>
 800d8c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8cc:	6006      	str	r6, [r0, #0]
 800d8ce:	60c6      	str	r6, [r0, #12]
 800d8d0:	b13c      	cbz	r4, 800d8e2 <_Bfree+0x3a>
 800d8d2:	69eb      	ldr	r3, [r5, #28]
 800d8d4:	6862      	ldr	r2, [r4, #4]
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d8dc:	6021      	str	r1, [r4, #0]
 800d8de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d8e2:	bd70      	pop	{r4, r5, r6, pc}
 800d8e4:	0800e711 	.word	0x0800e711
 800d8e8:	0800e791 	.word	0x0800e791

0800d8ec <__multadd>:
 800d8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8f0:	f101 0c14 	add.w	ip, r1, #20
 800d8f4:	4607      	mov	r7, r0
 800d8f6:	460c      	mov	r4, r1
 800d8f8:	461e      	mov	r6, r3
 800d8fa:	690d      	ldr	r5, [r1, #16]
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	f8dc 3000 	ldr.w	r3, [ip]
 800d902:	3001      	adds	r0, #1
 800d904:	b299      	uxth	r1, r3
 800d906:	4285      	cmp	r5, r0
 800d908:	fb02 6101 	mla	r1, r2, r1, r6
 800d90c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d910:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800d914:	b289      	uxth	r1, r1
 800d916:	fb02 3306 	mla	r3, r2, r6, r3
 800d91a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d91e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d922:	f84c 1b04 	str.w	r1, [ip], #4
 800d926:	dcea      	bgt.n	800d8fe <__multadd+0x12>
 800d928:	b30e      	cbz	r6, 800d96e <__multadd+0x82>
 800d92a:	68a3      	ldr	r3, [r4, #8]
 800d92c:	42ab      	cmp	r3, r5
 800d92e:	dc19      	bgt.n	800d964 <__multadd+0x78>
 800d930:	6861      	ldr	r1, [r4, #4]
 800d932:	4638      	mov	r0, r7
 800d934:	3101      	adds	r1, #1
 800d936:	f7ff ff77 	bl	800d828 <_Balloc>
 800d93a:	4680      	mov	r8, r0
 800d93c:	b928      	cbnz	r0, 800d94a <__multadd+0x5e>
 800d93e:	4602      	mov	r2, r0
 800d940:	4b0c      	ldr	r3, [pc, #48]	@ (800d974 <__multadd+0x88>)
 800d942:	21ba      	movs	r1, #186	@ 0xba
 800d944:	480c      	ldr	r0, [pc, #48]	@ (800d978 <__multadd+0x8c>)
 800d946:	f000 fd87 	bl	800e458 <__assert_func>
 800d94a:	6922      	ldr	r2, [r4, #16]
 800d94c:	f104 010c 	add.w	r1, r4, #12
 800d950:	300c      	adds	r0, #12
 800d952:	3202      	adds	r2, #2
 800d954:	0092      	lsls	r2, r2, #2
 800d956:	f000 fd71 	bl	800e43c <memcpy>
 800d95a:	4621      	mov	r1, r4
 800d95c:	4644      	mov	r4, r8
 800d95e:	4638      	mov	r0, r7
 800d960:	f7ff ffa2 	bl	800d8a8 <_Bfree>
 800d964:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d968:	3501      	adds	r5, #1
 800d96a:	615e      	str	r6, [r3, #20]
 800d96c:	6125      	str	r5, [r4, #16]
 800d96e:	4620      	mov	r0, r4
 800d970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d974:	0800e780 	.word	0x0800e780
 800d978:	0800e791 	.word	0x0800e791

0800d97c <__hi0bits>:
 800d97c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d980:	4603      	mov	r3, r0
 800d982:	bf36      	itet	cc
 800d984:	0403      	lslcc	r3, r0, #16
 800d986:	2000      	movcs	r0, #0
 800d988:	2010      	movcc	r0, #16
 800d98a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d98e:	bf3c      	itt	cc
 800d990:	021b      	lslcc	r3, r3, #8
 800d992:	3008      	addcc	r0, #8
 800d994:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d998:	bf3c      	itt	cc
 800d99a:	011b      	lslcc	r3, r3, #4
 800d99c:	3004      	addcc	r0, #4
 800d99e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9a2:	bf3c      	itt	cc
 800d9a4:	009b      	lslcc	r3, r3, #2
 800d9a6:	3002      	addcc	r0, #2
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	db05      	blt.n	800d9b8 <__hi0bits+0x3c>
 800d9ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d9b0:	f100 0001 	add.w	r0, r0, #1
 800d9b4:	bf08      	it	eq
 800d9b6:	2020      	moveq	r0, #32
 800d9b8:	4770      	bx	lr

0800d9ba <__lo0bits>:
 800d9ba:	6803      	ldr	r3, [r0, #0]
 800d9bc:	4602      	mov	r2, r0
 800d9be:	f013 0007 	ands.w	r0, r3, #7
 800d9c2:	d00b      	beq.n	800d9dc <__lo0bits+0x22>
 800d9c4:	07d9      	lsls	r1, r3, #31
 800d9c6:	d421      	bmi.n	800da0c <__lo0bits+0x52>
 800d9c8:	0798      	lsls	r0, r3, #30
 800d9ca:	bf47      	ittee	mi
 800d9cc:	085b      	lsrmi	r3, r3, #1
 800d9ce:	2001      	movmi	r0, #1
 800d9d0:	089b      	lsrpl	r3, r3, #2
 800d9d2:	2002      	movpl	r0, #2
 800d9d4:	bf4c      	ite	mi
 800d9d6:	6013      	strmi	r3, [r2, #0]
 800d9d8:	6013      	strpl	r3, [r2, #0]
 800d9da:	4770      	bx	lr
 800d9dc:	b299      	uxth	r1, r3
 800d9de:	b909      	cbnz	r1, 800d9e4 <__lo0bits+0x2a>
 800d9e0:	0c1b      	lsrs	r3, r3, #16
 800d9e2:	2010      	movs	r0, #16
 800d9e4:	b2d9      	uxtb	r1, r3
 800d9e6:	b909      	cbnz	r1, 800d9ec <__lo0bits+0x32>
 800d9e8:	3008      	adds	r0, #8
 800d9ea:	0a1b      	lsrs	r3, r3, #8
 800d9ec:	0719      	lsls	r1, r3, #28
 800d9ee:	bf04      	itt	eq
 800d9f0:	091b      	lsreq	r3, r3, #4
 800d9f2:	3004      	addeq	r0, #4
 800d9f4:	0799      	lsls	r1, r3, #30
 800d9f6:	bf04      	itt	eq
 800d9f8:	089b      	lsreq	r3, r3, #2
 800d9fa:	3002      	addeq	r0, #2
 800d9fc:	07d9      	lsls	r1, r3, #31
 800d9fe:	d403      	bmi.n	800da08 <__lo0bits+0x4e>
 800da00:	085b      	lsrs	r3, r3, #1
 800da02:	f100 0001 	add.w	r0, r0, #1
 800da06:	d003      	beq.n	800da10 <__lo0bits+0x56>
 800da08:	6013      	str	r3, [r2, #0]
 800da0a:	4770      	bx	lr
 800da0c:	2000      	movs	r0, #0
 800da0e:	4770      	bx	lr
 800da10:	2020      	movs	r0, #32
 800da12:	4770      	bx	lr

0800da14 <__i2b>:
 800da14:	b510      	push	{r4, lr}
 800da16:	460c      	mov	r4, r1
 800da18:	2101      	movs	r1, #1
 800da1a:	f7ff ff05 	bl	800d828 <_Balloc>
 800da1e:	4602      	mov	r2, r0
 800da20:	b928      	cbnz	r0, 800da2e <__i2b+0x1a>
 800da22:	4b05      	ldr	r3, [pc, #20]	@ (800da38 <__i2b+0x24>)
 800da24:	f240 1145 	movw	r1, #325	@ 0x145
 800da28:	4804      	ldr	r0, [pc, #16]	@ (800da3c <__i2b+0x28>)
 800da2a:	f000 fd15 	bl	800e458 <__assert_func>
 800da2e:	2301      	movs	r3, #1
 800da30:	6144      	str	r4, [r0, #20]
 800da32:	6103      	str	r3, [r0, #16]
 800da34:	bd10      	pop	{r4, pc}
 800da36:	bf00      	nop
 800da38:	0800e780 	.word	0x0800e780
 800da3c:	0800e791 	.word	0x0800e791

0800da40 <__multiply>:
 800da40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da44:	4614      	mov	r4, r2
 800da46:	690a      	ldr	r2, [r1, #16]
 800da48:	460f      	mov	r7, r1
 800da4a:	b085      	sub	sp, #20
 800da4c:	6923      	ldr	r3, [r4, #16]
 800da4e:	429a      	cmp	r2, r3
 800da50:	bfa2      	ittt	ge
 800da52:	4623      	movge	r3, r4
 800da54:	460c      	movge	r4, r1
 800da56:	461f      	movge	r7, r3
 800da58:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800da5c:	68a3      	ldr	r3, [r4, #8]
 800da5e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800da62:	6861      	ldr	r1, [r4, #4]
 800da64:	eb0a 0609 	add.w	r6, sl, r9
 800da68:	42b3      	cmp	r3, r6
 800da6a:	bfb8      	it	lt
 800da6c:	3101      	addlt	r1, #1
 800da6e:	f7ff fedb 	bl	800d828 <_Balloc>
 800da72:	b930      	cbnz	r0, 800da82 <__multiply+0x42>
 800da74:	4602      	mov	r2, r0
 800da76:	4b45      	ldr	r3, [pc, #276]	@ (800db8c <__multiply+0x14c>)
 800da78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800da7c:	4844      	ldr	r0, [pc, #272]	@ (800db90 <__multiply+0x150>)
 800da7e:	f000 fceb 	bl	800e458 <__assert_func>
 800da82:	f100 0514 	add.w	r5, r0, #20
 800da86:	2200      	movs	r2, #0
 800da88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800da8c:	462b      	mov	r3, r5
 800da8e:	4543      	cmp	r3, r8
 800da90:	d321      	bcc.n	800dad6 <__multiply+0x96>
 800da92:	f107 0114 	add.w	r1, r7, #20
 800da96:	f104 0214 	add.w	r2, r4, #20
 800da9a:	f104 0715 	add.w	r7, r4, #21
 800da9e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800daa2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800daa6:	9302      	str	r3, [sp, #8]
 800daa8:	1b13      	subs	r3, r2, r4
 800daaa:	3b15      	subs	r3, #21
 800daac:	f023 0303 	bic.w	r3, r3, #3
 800dab0:	3304      	adds	r3, #4
 800dab2:	42ba      	cmp	r2, r7
 800dab4:	bf38      	it	cc
 800dab6:	2304      	movcc	r3, #4
 800dab8:	9301      	str	r3, [sp, #4]
 800daba:	9b02      	ldr	r3, [sp, #8]
 800dabc:	9103      	str	r1, [sp, #12]
 800dabe:	428b      	cmp	r3, r1
 800dac0:	d80c      	bhi.n	800dadc <__multiply+0x9c>
 800dac2:	2e00      	cmp	r6, #0
 800dac4:	dd03      	ble.n	800dace <__multiply+0x8e>
 800dac6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d05b      	beq.n	800db86 <__multiply+0x146>
 800dace:	6106      	str	r6, [r0, #16]
 800dad0:	b005      	add	sp, #20
 800dad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dad6:	f843 2b04 	str.w	r2, [r3], #4
 800dada:	e7d8      	b.n	800da8e <__multiply+0x4e>
 800dadc:	f8b1 a000 	ldrh.w	sl, [r1]
 800dae0:	f1ba 0f00 	cmp.w	sl, #0
 800dae4:	d024      	beq.n	800db30 <__multiply+0xf0>
 800dae6:	f104 0e14 	add.w	lr, r4, #20
 800daea:	46a9      	mov	r9, r5
 800daec:	f04f 0c00 	mov.w	ip, #0
 800daf0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800daf4:	f8d9 3000 	ldr.w	r3, [r9]
 800daf8:	fa1f fb87 	uxth.w	fp, r7
 800dafc:	4572      	cmp	r2, lr
 800dafe:	b29b      	uxth	r3, r3
 800db00:	fb0a 330b 	mla	r3, sl, fp, r3
 800db04:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800db08:	f8d9 7000 	ldr.w	r7, [r9]
 800db0c:	4463      	add	r3, ip
 800db0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800db12:	fb0a c70b 	mla	r7, sl, fp, ip
 800db16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800db1a:	b29b      	uxth	r3, r3
 800db1c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800db20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800db24:	f849 3b04 	str.w	r3, [r9], #4
 800db28:	d8e2      	bhi.n	800daf0 <__multiply+0xb0>
 800db2a:	9b01      	ldr	r3, [sp, #4]
 800db2c:	f845 c003 	str.w	ip, [r5, r3]
 800db30:	9b03      	ldr	r3, [sp, #12]
 800db32:	3104      	adds	r1, #4
 800db34:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800db38:	f1b9 0f00 	cmp.w	r9, #0
 800db3c:	d021      	beq.n	800db82 <__multiply+0x142>
 800db3e:	682b      	ldr	r3, [r5, #0]
 800db40:	f104 0c14 	add.w	ip, r4, #20
 800db44:	46ae      	mov	lr, r5
 800db46:	f04f 0a00 	mov.w	sl, #0
 800db4a:	f8bc b000 	ldrh.w	fp, [ip]
 800db4e:	b29b      	uxth	r3, r3
 800db50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800db54:	fb09 770b 	mla	r7, r9, fp, r7
 800db58:	4457      	add	r7, sl
 800db5a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800db5e:	f84e 3b04 	str.w	r3, [lr], #4
 800db62:	f85c 3b04 	ldr.w	r3, [ip], #4
 800db66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db6a:	f8be 3000 	ldrh.w	r3, [lr]
 800db6e:	4562      	cmp	r2, ip
 800db70:	fb09 330a 	mla	r3, r9, sl, r3
 800db74:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800db78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db7c:	d8e5      	bhi.n	800db4a <__multiply+0x10a>
 800db7e:	9f01      	ldr	r7, [sp, #4]
 800db80:	51eb      	str	r3, [r5, r7]
 800db82:	3504      	adds	r5, #4
 800db84:	e799      	b.n	800daba <__multiply+0x7a>
 800db86:	3e01      	subs	r6, #1
 800db88:	e79b      	b.n	800dac2 <__multiply+0x82>
 800db8a:	bf00      	nop
 800db8c:	0800e780 	.word	0x0800e780
 800db90:	0800e791 	.word	0x0800e791

0800db94 <__pow5mult>:
 800db94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db98:	4615      	mov	r5, r2
 800db9a:	f012 0203 	ands.w	r2, r2, #3
 800db9e:	4607      	mov	r7, r0
 800dba0:	460e      	mov	r6, r1
 800dba2:	d007      	beq.n	800dbb4 <__pow5mult+0x20>
 800dba4:	3a01      	subs	r2, #1
 800dba6:	4c25      	ldr	r4, [pc, #148]	@ (800dc3c <__pow5mult+0xa8>)
 800dba8:	2300      	movs	r3, #0
 800dbaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dbae:	f7ff fe9d 	bl	800d8ec <__multadd>
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	10ad      	asrs	r5, r5, #2
 800dbb6:	d03d      	beq.n	800dc34 <__pow5mult+0xa0>
 800dbb8:	69fc      	ldr	r4, [r7, #28]
 800dbba:	b97c      	cbnz	r4, 800dbdc <__pow5mult+0x48>
 800dbbc:	2010      	movs	r0, #16
 800dbbe:	f7ff fd7d 	bl	800d6bc <malloc>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	61f8      	str	r0, [r7, #28]
 800dbc6:	b928      	cbnz	r0, 800dbd4 <__pow5mult+0x40>
 800dbc8:	4b1d      	ldr	r3, [pc, #116]	@ (800dc40 <__pow5mult+0xac>)
 800dbca:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dbce:	481d      	ldr	r0, [pc, #116]	@ (800dc44 <__pow5mult+0xb0>)
 800dbd0:	f000 fc42 	bl	800e458 <__assert_func>
 800dbd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dbd8:	6004      	str	r4, [r0, #0]
 800dbda:	60c4      	str	r4, [r0, #12]
 800dbdc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dbe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dbe4:	b94c      	cbnz	r4, 800dbfa <__pow5mult+0x66>
 800dbe6:	f240 2171 	movw	r1, #625	@ 0x271
 800dbea:	4638      	mov	r0, r7
 800dbec:	f7ff ff12 	bl	800da14 <__i2b>
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	f8c8 0008 	str.w	r0, [r8, #8]
 800dbf8:	6003      	str	r3, [r0, #0]
 800dbfa:	f04f 0900 	mov.w	r9, #0
 800dbfe:	07eb      	lsls	r3, r5, #31
 800dc00:	d50a      	bpl.n	800dc18 <__pow5mult+0x84>
 800dc02:	4631      	mov	r1, r6
 800dc04:	4622      	mov	r2, r4
 800dc06:	4638      	mov	r0, r7
 800dc08:	f7ff ff1a 	bl	800da40 <__multiply>
 800dc0c:	4680      	mov	r8, r0
 800dc0e:	4631      	mov	r1, r6
 800dc10:	4638      	mov	r0, r7
 800dc12:	4646      	mov	r6, r8
 800dc14:	f7ff fe48 	bl	800d8a8 <_Bfree>
 800dc18:	106d      	asrs	r5, r5, #1
 800dc1a:	d00b      	beq.n	800dc34 <__pow5mult+0xa0>
 800dc1c:	6820      	ldr	r0, [r4, #0]
 800dc1e:	b938      	cbnz	r0, 800dc30 <__pow5mult+0x9c>
 800dc20:	4622      	mov	r2, r4
 800dc22:	4621      	mov	r1, r4
 800dc24:	4638      	mov	r0, r7
 800dc26:	f7ff ff0b 	bl	800da40 <__multiply>
 800dc2a:	6020      	str	r0, [r4, #0]
 800dc2c:	f8c0 9000 	str.w	r9, [r0]
 800dc30:	4604      	mov	r4, r0
 800dc32:	e7e4      	b.n	800dbfe <__pow5mult+0x6a>
 800dc34:	4630      	mov	r0, r6
 800dc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc3a:	bf00      	nop
 800dc3c:	0800e7ec 	.word	0x0800e7ec
 800dc40:	0800e711 	.word	0x0800e711
 800dc44:	0800e791 	.word	0x0800e791

0800dc48 <__lshift>:
 800dc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc4c:	460c      	mov	r4, r1
 800dc4e:	4607      	mov	r7, r0
 800dc50:	4691      	mov	r9, r2
 800dc52:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dc56:	6923      	ldr	r3, [r4, #16]
 800dc58:	6849      	ldr	r1, [r1, #4]
 800dc5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dc5e:	68a3      	ldr	r3, [r4, #8]
 800dc60:	f108 0601 	add.w	r6, r8, #1
 800dc64:	42b3      	cmp	r3, r6
 800dc66:	db0b      	blt.n	800dc80 <__lshift+0x38>
 800dc68:	4638      	mov	r0, r7
 800dc6a:	f7ff fddd 	bl	800d828 <_Balloc>
 800dc6e:	4605      	mov	r5, r0
 800dc70:	b948      	cbnz	r0, 800dc86 <__lshift+0x3e>
 800dc72:	4602      	mov	r2, r0
 800dc74:	4b28      	ldr	r3, [pc, #160]	@ (800dd18 <__lshift+0xd0>)
 800dc76:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dc7a:	4828      	ldr	r0, [pc, #160]	@ (800dd1c <__lshift+0xd4>)
 800dc7c:	f000 fbec 	bl	800e458 <__assert_func>
 800dc80:	3101      	adds	r1, #1
 800dc82:	005b      	lsls	r3, r3, #1
 800dc84:	e7ee      	b.n	800dc64 <__lshift+0x1c>
 800dc86:	2300      	movs	r3, #0
 800dc88:	f100 0114 	add.w	r1, r0, #20
 800dc8c:	f100 0210 	add.w	r2, r0, #16
 800dc90:	4618      	mov	r0, r3
 800dc92:	4553      	cmp	r3, sl
 800dc94:	db33      	blt.n	800dcfe <__lshift+0xb6>
 800dc96:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc9a:	f104 0314 	add.w	r3, r4, #20
 800dc9e:	6920      	ldr	r0, [r4, #16]
 800dca0:	f019 091f 	ands.w	r9, r9, #31
 800dca4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dca8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dcac:	d02b      	beq.n	800dd06 <__lshift+0xbe>
 800dcae:	f1c9 0e20 	rsb	lr, r9, #32
 800dcb2:	468a      	mov	sl, r1
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	6818      	ldr	r0, [r3, #0]
 800dcb8:	fa00 f009 	lsl.w	r0, r0, r9
 800dcbc:	4310      	orrs	r0, r2
 800dcbe:	f84a 0b04 	str.w	r0, [sl], #4
 800dcc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcc6:	459c      	cmp	ip, r3
 800dcc8:	fa22 f20e 	lsr.w	r2, r2, lr
 800dccc:	d8f3      	bhi.n	800dcb6 <__lshift+0x6e>
 800dcce:	ebac 0304 	sub.w	r3, ip, r4
 800dcd2:	f104 0015 	add.w	r0, r4, #21
 800dcd6:	3b15      	subs	r3, #21
 800dcd8:	f023 0303 	bic.w	r3, r3, #3
 800dcdc:	3304      	adds	r3, #4
 800dcde:	4584      	cmp	ip, r0
 800dce0:	bf38      	it	cc
 800dce2:	2304      	movcc	r3, #4
 800dce4:	50ca      	str	r2, [r1, r3]
 800dce6:	b10a      	cbz	r2, 800dcec <__lshift+0xa4>
 800dce8:	f108 0602 	add.w	r6, r8, #2
 800dcec:	3e01      	subs	r6, #1
 800dcee:	4638      	mov	r0, r7
 800dcf0:	4621      	mov	r1, r4
 800dcf2:	612e      	str	r6, [r5, #16]
 800dcf4:	f7ff fdd8 	bl	800d8a8 <_Bfree>
 800dcf8:	4628      	mov	r0, r5
 800dcfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcfe:	3301      	adds	r3, #1
 800dd00:	f842 0f04 	str.w	r0, [r2, #4]!
 800dd04:	e7c5      	b.n	800dc92 <__lshift+0x4a>
 800dd06:	3904      	subs	r1, #4
 800dd08:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd0c:	459c      	cmp	ip, r3
 800dd0e:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd12:	d8f9      	bhi.n	800dd08 <__lshift+0xc0>
 800dd14:	e7ea      	b.n	800dcec <__lshift+0xa4>
 800dd16:	bf00      	nop
 800dd18:	0800e780 	.word	0x0800e780
 800dd1c:	0800e791 	.word	0x0800e791

0800dd20 <__mcmp>:
 800dd20:	4603      	mov	r3, r0
 800dd22:	690a      	ldr	r2, [r1, #16]
 800dd24:	6900      	ldr	r0, [r0, #16]
 800dd26:	1a80      	subs	r0, r0, r2
 800dd28:	b530      	push	{r4, r5, lr}
 800dd2a:	d10e      	bne.n	800dd4a <__mcmp+0x2a>
 800dd2c:	3314      	adds	r3, #20
 800dd2e:	3114      	adds	r1, #20
 800dd30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dd34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dd38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dd3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dd40:	4295      	cmp	r5, r2
 800dd42:	d003      	beq.n	800dd4c <__mcmp+0x2c>
 800dd44:	d205      	bcs.n	800dd52 <__mcmp+0x32>
 800dd46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dd4a:	bd30      	pop	{r4, r5, pc}
 800dd4c:	42a3      	cmp	r3, r4
 800dd4e:	d3f3      	bcc.n	800dd38 <__mcmp+0x18>
 800dd50:	e7fb      	b.n	800dd4a <__mcmp+0x2a>
 800dd52:	2001      	movs	r0, #1
 800dd54:	e7f9      	b.n	800dd4a <__mcmp+0x2a>
	...

0800dd58 <__mdiff>:
 800dd58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd5c:	4689      	mov	r9, r1
 800dd5e:	4606      	mov	r6, r0
 800dd60:	4611      	mov	r1, r2
 800dd62:	4614      	mov	r4, r2
 800dd64:	4648      	mov	r0, r9
 800dd66:	f7ff ffdb 	bl	800dd20 <__mcmp>
 800dd6a:	1e05      	subs	r5, r0, #0
 800dd6c:	d112      	bne.n	800dd94 <__mdiff+0x3c>
 800dd6e:	4629      	mov	r1, r5
 800dd70:	4630      	mov	r0, r6
 800dd72:	f7ff fd59 	bl	800d828 <_Balloc>
 800dd76:	4602      	mov	r2, r0
 800dd78:	b928      	cbnz	r0, 800dd86 <__mdiff+0x2e>
 800dd7a:	4b41      	ldr	r3, [pc, #260]	@ (800de80 <__mdiff+0x128>)
 800dd7c:	f240 2137 	movw	r1, #567	@ 0x237
 800dd80:	4840      	ldr	r0, [pc, #256]	@ (800de84 <__mdiff+0x12c>)
 800dd82:	f000 fb69 	bl	800e458 <__assert_func>
 800dd86:	2301      	movs	r3, #1
 800dd88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dd8c:	4610      	mov	r0, r2
 800dd8e:	b003      	add	sp, #12
 800dd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd94:	bfbc      	itt	lt
 800dd96:	464b      	movlt	r3, r9
 800dd98:	46a1      	movlt	r9, r4
 800dd9a:	4630      	mov	r0, r6
 800dd9c:	bfb8      	it	lt
 800dd9e:	2501      	movlt	r5, #1
 800dda0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dda4:	bfb4      	ite	lt
 800dda6:	461c      	movlt	r4, r3
 800dda8:	2500      	movge	r5, #0
 800ddaa:	f7ff fd3d 	bl	800d828 <_Balloc>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	b918      	cbnz	r0, 800ddba <__mdiff+0x62>
 800ddb2:	4b33      	ldr	r3, [pc, #204]	@ (800de80 <__mdiff+0x128>)
 800ddb4:	f240 2145 	movw	r1, #581	@ 0x245
 800ddb8:	e7e2      	b.n	800dd80 <__mdiff+0x28>
 800ddba:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ddbe:	f104 0e14 	add.w	lr, r4, #20
 800ddc2:	6926      	ldr	r6, [r4, #16]
 800ddc4:	f100 0b14 	add.w	fp, r0, #20
 800ddc8:	60c5      	str	r5, [r0, #12]
 800ddca:	f109 0514 	add.w	r5, r9, #20
 800ddce:	f109 0310 	add.w	r3, r9, #16
 800ddd2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ddd6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ddda:	46d9      	mov	r9, fp
 800dddc:	f04f 0c00 	mov.w	ip, #0
 800dde0:	9301      	str	r3, [sp, #4]
 800dde2:	9b01      	ldr	r3, [sp, #4]
 800dde4:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dde8:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ddec:	4576      	cmp	r6, lr
 800ddee:	9301      	str	r3, [sp, #4]
 800ddf0:	fa1f f38a 	uxth.w	r3, sl
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	b283      	uxth	r3, r0
 800ddf8:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800ddfc:	eba1 0303 	sub.w	r3, r1, r3
 800de00:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800de04:	4463      	add	r3, ip
 800de06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800de10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800de14:	f849 3b04 	str.w	r3, [r9], #4
 800de18:	d8e3      	bhi.n	800dde2 <__mdiff+0x8a>
 800de1a:	1b33      	subs	r3, r6, r4
 800de1c:	3415      	adds	r4, #21
 800de1e:	3b15      	subs	r3, #21
 800de20:	f023 0303 	bic.w	r3, r3, #3
 800de24:	3304      	adds	r3, #4
 800de26:	42a6      	cmp	r6, r4
 800de28:	bf38      	it	cc
 800de2a:	2304      	movcc	r3, #4
 800de2c:	441d      	add	r5, r3
 800de2e:	445b      	add	r3, fp
 800de30:	462c      	mov	r4, r5
 800de32:	461e      	mov	r6, r3
 800de34:	4544      	cmp	r4, r8
 800de36:	d30e      	bcc.n	800de56 <__mdiff+0xfe>
 800de38:	f108 0103 	add.w	r1, r8, #3
 800de3c:	1b49      	subs	r1, r1, r5
 800de3e:	3d03      	subs	r5, #3
 800de40:	f021 0103 	bic.w	r1, r1, #3
 800de44:	45a8      	cmp	r8, r5
 800de46:	bf38      	it	cc
 800de48:	2100      	movcc	r1, #0
 800de4a:	440b      	add	r3, r1
 800de4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800de50:	b199      	cbz	r1, 800de7a <__mdiff+0x122>
 800de52:	6117      	str	r7, [r2, #16]
 800de54:	e79a      	b.n	800dd8c <__mdiff+0x34>
 800de56:	f854 1b04 	ldr.w	r1, [r4], #4
 800de5a:	46e6      	mov	lr, ip
 800de5c:	fa1f fc81 	uxth.w	ip, r1
 800de60:	0c08      	lsrs	r0, r1, #16
 800de62:	4471      	add	r1, lr
 800de64:	44f4      	add	ip, lr
 800de66:	b289      	uxth	r1, r1
 800de68:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800de6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800de70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800de74:	f846 1b04 	str.w	r1, [r6], #4
 800de78:	e7dc      	b.n	800de34 <__mdiff+0xdc>
 800de7a:	3f01      	subs	r7, #1
 800de7c:	e7e6      	b.n	800de4c <__mdiff+0xf4>
 800de7e:	bf00      	nop
 800de80:	0800e780 	.word	0x0800e780
 800de84:	0800e791 	.word	0x0800e791

0800de88 <__d2b>:
 800de88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de8c:	460f      	mov	r7, r1
 800de8e:	2101      	movs	r1, #1
 800de90:	4616      	mov	r6, r2
 800de92:	ec59 8b10 	vmov	r8, r9, d0
 800de96:	f7ff fcc7 	bl	800d828 <_Balloc>
 800de9a:	4604      	mov	r4, r0
 800de9c:	b930      	cbnz	r0, 800deac <__d2b+0x24>
 800de9e:	4602      	mov	r2, r0
 800dea0:	4b23      	ldr	r3, [pc, #140]	@ (800df30 <__d2b+0xa8>)
 800dea2:	f240 310f 	movw	r1, #783	@ 0x30f
 800dea6:	4823      	ldr	r0, [pc, #140]	@ (800df34 <__d2b+0xac>)
 800dea8:	f000 fad6 	bl	800e458 <__assert_func>
 800deac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800deb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800deb4:	b10d      	cbz	r5, 800deba <__d2b+0x32>
 800deb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800deba:	9301      	str	r3, [sp, #4]
 800debc:	f1b8 0300 	subs.w	r3, r8, #0
 800dec0:	d023      	beq.n	800df0a <__d2b+0x82>
 800dec2:	4668      	mov	r0, sp
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	f7ff fd78 	bl	800d9ba <__lo0bits>
 800deca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dece:	b1d0      	cbz	r0, 800df06 <__d2b+0x7e>
 800ded0:	f1c0 0320 	rsb	r3, r0, #32
 800ded4:	fa02 f303 	lsl.w	r3, r2, r3
 800ded8:	40c2      	lsrs	r2, r0
 800deda:	430b      	orrs	r3, r1
 800dedc:	9201      	str	r2, [sp, #4]
 800dede:	6163      	str	r3, [r4, #20]
 800dee0:	9b01      	ldr	r3, [sp, #4]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	61a3      	str	r3, [r4, #24]
 800dee6:	bf0c      	ite	eq
 800dee8:	2201      	moveq	r2, #1
 800deea:	2202      	movne	r2, #2
 800deec:	6122      	str	r2, [r4, #16]
 800deee:	b1a5      	cbz	r5, 800df1a <__d2b+0x92>
 800def0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800def4:	4405      	add	r5, r0
 800def6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800defa:	603d      	str	r5, [r7, #0]
 800defc:	6030      	str	r0, [r6, #0]
 800defe:	4620      	mov	r0, r4
 800df00:	b003      	add	sp, #12
 800df02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df06:	6161      	str	r1, [r4, #20]
 800df08:	e7ea      	b.n	800dee0 <__d2b+0x58>
 800df0a:	a801      	add	r0, sp, #4
 800df0c:	f7ff fd55 	bl	800d9ba <__lo0bits>
 800df10:	9b01      	ldr	r3, [sp, #4]
 800df12:	3020      	adds	r0, #32
 800df14:	2201      	movs	r2, #1
 800df16:	6163      	str	r3, [r4, #20]
 800df18:	e7e8      	b.n	800deec <__d2b+0x64>
 800df1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800df1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df22:	6038      	str	r0, [r7, #0]
 800df24:	6918      	ldr	r0, [r3, #16]
 800df26:	f7ff fd29 	bl	800d97c <__hi0bits>
 800df2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df2e:	e7e5      	b.n	800defc <__d2b+0x74>
 800df30:	0800e780 	.word	0x0800e780
 800df34:	0800e791 	.word	0x0800e791

0800df38 <__sfputc_r>:
 800df38:	6893      	ldr	r3, [r2, #8]
 800df3a:	3b01      	subs	r3, #1
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	6093      	str	r3, [r2, #8]
 800df40:	b410      	push	{r4}
 800df42:	da08      	bge.n	800df56 <__sfputc_r+0x1e>
 800df44:	6994      	ldr	r4, [r2, #24]
 800df46:	42a3      	cmp	r3, r4
 800df48:	db01      	blt.n	800df4e <__sfputc_r+0x16>
 800df4a:	290a      	cmp	r1, #10
 800df4c:	d103      	bne.n	800df56 <__sfputc_r+0x1e>
 800df4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df52:	f7fe bbf4 	b.w	800c73e <__swbuf_r>
 800df56:	6813      	ldr	r3, [r2, #0]
 800df58:	1c58      	adds	r0, r3, #1
 800df5a:	6010      	str	r0, [r2, #0]
 800df5c:	4608      	mov	r0, r1
 800df5e:	7019      	strb	r1, [r3, #0]
 800df60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df64:	4770      	bx	lr

0800df66 <__sfputs_r>:
 800df66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df68:	4606      	mov	r6, r0
 800df6a:	460f      	mov	r7, r1
 800df6c:	4614      	mov	r4, r2
 800df6e:	18d5      	adds	r5, r2, r3
 800df70:	42ac      	cmp	r4, r5
 800df72:	d101      	bne.n	800df78 <__sfputs_r+0x12>
 800df74:	2000      	movs	r0, #0
 800df76:	e007      	b.n	800df88 <__sfputs_r+0x22>
 800df78:	463a      	mov	r2, r7
 800df7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df7e:	4630      	mov	r0, r6
 800df80:	f7ff ffda 	bl	800df38 <__sfputc_r>
 800df84:	1c43      	adds	r3, r0, #1
 800df86:	d1f3      	bne.n	800df70 <__sfputs_r+0xa>
 800df88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df8c <_vfiprintf_r>:
 800df8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df90:	460d      	mov	r5, r1
 800df92:	b09d      	sub	sp, #116	@ 0x74
 800df94:	4614      	mov	r4, r2
 800df96:	4698      	mov	r8, r3
 800df98:	4606      	mov	r6, r0
 800df9a:	b118      	cbz	r0, 800dfa4 <_vfiprintf_r+0x18>
 800df9c:	6a03      	ldr	r3, [r0, #32]
 800df9e:	b90b      	cbnz	r3, 800dfa4 <_vfiprintf_r+0x18>
 800dfa0:	f7fe fb54 	bl	800c64c <__sinit>
 800dfa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfa6:	07d9      	lsls	r1, r3, #31
 800dfa8:	d405      	bmi.n	800dfb6 <_vfiprintf_r+0x2a>
 800dfaa:	89ab      	ldrh	r3, [r5, #12]
 800dfac:	059a      	lsls	r2, r3, #22
 800dfae:	d402      	bmi.n	800dfb6 <_vfiprintf_r+0x2a>
 800dfb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfb2:	f7fe fcd6 	bl	800c962 <__retarget_lock_acquire_recursive>
 800dfb6:	89ab      	ldrh	r3, [r5, #12]
 800dfb8:	071b      	lsls	r3, r3, #28
 800dfba:	d501      	bpl.n	800dfc0 <_vfiprintf_r+0x34>
 800dfbc:	692b      	ldr	r3, [r5, #16]
 800dfbe:	b99b      	cbnz	r3, 800dfe8 <_vfiprintf_r+0x5c>
 800dfc0:	4629      	mov	r1, r5
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	f7fe fbfa 	bl	800c7bc <__swsetup_r>
 800dfc8:	b170      	cbz	r0, 800dfe8 <_vfiprintf_r+0x5c>
 800dfca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfcc:	07dc      	lsls	r4, r3, #31
 800dfce:	d504      	bpl.n	800dfda <_vfiprintf_r+0x4e>
 800dfd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dfd4:	b01d      	add	sp, #116	@ 0x74
 800dfd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfda:	89ab      	ldrh	r3, [r5, #12]
 800dfdc:	0598      	lsls	r0, r3, #22
 800dfde:	d4f7      	bmi.n	800dfd0 <_vfiprintf_r+0x44>
 800dfe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfe2:	f7fe fcbf 	bl	800c964 <__retarget_lock_release_recursive>
 800dfe6:	e7f3      	b.n	800dfd0 <_vfiprintf_r+0x44>
 800dfe8:	2300      	movs	r3, #0
 800dfea:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfee:	f04f 0901 	mov.w	r9, #1
 800dff2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800e1a8 <_vfiprintf_r+0x21c>
 800dff6:	9309      	str	r3, [sp, #36]	@ 0x24
 800dff8:	2320      	movs	r3, #32
 800dffa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dffe:	2330      	movs	r3, #48	@ 0x30
 800e000:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e004:	4623      	mov	r3, r4
 800e006:	469a      	mov	sl, r3
 800e008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e00c:	b10a      	cbz	r2, 800e012 <_vfiprintf_r+0x86>
 800e00e:	2a25      	cmp	r2, #37	@ 0x25
 800e010:	d1f9      	bne.n	800e006 <_vfiprintf_r+0x7a>
 800e012:	ebba 0b04 	subs.w	fp, sl, r4
 800e016:	d00b      	beq.n	800e030 <_vfiprintf_r+0xa4>
 800e018:	465b      	mov	r3, fp
 800e01a:	4622      	mov	r2, r4
 800e01c:	4629      	mov	r1, r5
 800e01e:	4630      	mov	r0, r6
 800e020:	f7ff ffa1 	bl	800df66 <__sfputs_r>
 800e024:	3001      	adds	r0, #1
 800e026:	f000 80a7 	beq.w	800e178 <_vfiprintf_r+0x1ec>
 800e02a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e02c:	445a      	add	r2, fp
 800e02e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e030:	f89a 3000 	ldrb.w	r3, [sl]
 800e034:	2b00      	cmp	r3, #0
 800e036:	f000 809f 	beq.w	800e178 <_vfiprintf_r+0x1ec>
 800e03a:	2300      	movs	r3, #0
 800e03c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e040:	f10a 0a01 	add.w	sl, sl, #1
 800e044:	9304      	str	r3, [sp, #16]
 800e046:	9307      	str	r3, [sp, #28]
 800e048:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e04c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e04e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e052:	4654      	mov	r4, sl
 800e054:	2205      	movs	r2, #5
 800e056:	4854      	ldr	r0, [pc, #336]	@ (800e1a8 <_vfiprintf_r+0x21c>)
 800e058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e05c:	f7fe fc83 	bl	800c966 <memchr>
 800e060:	9a04      	ldr	r2, [sp, #16]
 800e062:	b9d8      	cbnz	r0, 800e09c <_vfiprintf_r+0x110>
 800e064:	06d1      	lsls	r1, r2, #27
 800e066:	bf44      	itt	mi
 800e068:	2320      	movmi	r3, #32
 800e06a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e06e:	0713      	lsls	r3, r2, #28
 800e070:	bf44      	itt	mi
 800e072:	232b      	movmi	r3, #43	@ 0x2b
 800e074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e078:	f89a 3000 	ldrb.w	r3, [sl]
 800e07c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e07e:	d015      	beq.n	800e0ac <_vfiprintf_r+0x120>
 800e080:	9a07      	ldr	r2, [sp, #28]
 800e082:	4654      	mov	r4, sl
 800e084:	2000      	movs	r0, #0
 800e086:	f04f 0c0a 	mov.w	ip, #10
 800e08a:	4621      	mov	r1, r4
 800e08c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e090:	3b30      	subs	r3, #48	@ 0x30
 800e092:	2b09      	cmp	r3, #9
 800e094:	d94b      	bls.n	800e12e <_vfiprintf_r+0x1a2>
 800e096:	b1b0      	cbz	r0, 800e0c6 <_vfiprintf_r+0x13a>
 800e098:	9207      	str	r2, [sp, #28]
 800e09a:	e014      	b.n	800e0c6 <_vfiprintf_r+0x13a>
 800e09c:	eba0 0308 	sub.w	r3, r0, r8
 800e0a0:	46a2      	mov	sl, r4
 800e0a2:	fa09 f303 	lsl.w	r3, r9, r3
 800e0a6:	4313      	orrs	r3, r2
 800e0a8:	9304      	str	r3, [sp, #16]
 800e0aa:	e7d2      	b.n	800e052 <_vfiprintf_r+0xc6>
 800e0ac:	9b03      	ldr	r3, [sp, #12]
 800e0ae:	1d19      	adds	r1, r3, #4
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	9103      	str	r1, [sp, #12]
 800e0b6:	bfbb      	ittet	lt
 800e0b8:	425b      	neglt	r3, r3
 800e0ba:	f042 0202 	orrlt.w	r2, r2, #2
 800e0be:	9307      	strge	r3, [sp, #28]
 800e0c0:	9307      	strlt	r3, [sp, #28]
 800e0c2:	bfb8      	it	lt
 800e0c4:	9204      	strlt	r2, [sp, #16]
 800e0c6:	7823      	ldrb	r3, [r4, #0]
 800e0c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0ca:	d10a      	bne.n	800e0e2 <_vfiprintf_r+0x156>
 800e0cc:	7863      	ldrb	r3, [r4, #1]
 800e0ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0d0:	d132      	bne.n	800e138 <_vfiprintf_r+0x1ac>
 800e0d2:	9b03      	ldr	r3, [sp, #12]
 800e0d4:	3402      	adds	r4, #2
 800e0d6:	1d1a      	adds	r2, r3, #4
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0de:	9203      	str	r2, [sp, #12]
 800e0e0:	9305      	str	r3, [sp, #20]
 800e0e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e1b8 <_vfiprintf_r+0x22c>
 800e0e6:	2203      	movs	r2, #3
 800e0e8:	7821      	ldrb	r1, [r4, #0]
 800e0ea:	4650      	mov	r0, sl
 800e0ec:	f7fe fc3b 	bl	800c966 <memchr>
 800e0f0:	b138      	cbz	r0, 800e102 <_vfiprintf_r+0x176>
 800e0f2:	eba0 000a 	sub.w	r0, r0, sl
 800e0f6:	2240      	movs	r2, #64	@ 0x40
 800e0f8:	9b04      	ldr	r3, [sp, #16]
 800e0fa:	3401      	adds	r4, #1
 800e0fc:	4082      	lsls	r2, r0
 800e0fe:	4313      	orrs	r3, r2
 800e100:	9304      	str	r3, [sp, #16]
 800e102:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e106:	2206      	movs	r2, #6
 800e108:	4828      	ldr	r0, [pc, #160]	@ (800e1ac <_vfiprintf_r+0x220>)
 800e10a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e10e:	f7fe fc2a 	bl	800c966 <memchr>
 800e112:	2800      	cmp	r0, #0
 800e114:	d03f      	beq.n	800e196 <_vfiprintf_r+0x20a>
 800e116:	4b26      	ldr	r3, [pc, #152]	@ (800e1b0 <_vfiprintf_r+0x224>)
 800e118:	bb1b      	cbnz	r3, 800e162 <_vfiprintf_r+0x1d6>
 800e11a:	9b03      	ldr	r3, [sp, #12]
 800e11c:	3307      	adds	r3, #7
 800e11e:	f023 0307 	bic.w	r3, r3, #7
 800e122:	3308      	adds	r3, #8
 800e124:	9303      	str	r3, [sp, #12]
 800e126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e128:	443b      	add	r3, r7
 800e12a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e12c:	e76a      	b.n	800e004 <_vfiprintf_r+0x78>
 800e12e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e132:	460c      	mov	r4, r1
 800e134:	2001      	movs	r0, #1
 800e136:	e7a8      	b.n	800e08a <_vfiprintf_r+0xfe>
 800e138:	2300      	movs	r3, #0
 800e13a:	3401      	adds	r4, #1
 800e13c:	f04f 0c0a 	mov.w	ip, #10
 800e140:	4619      	mov	r1, r3
 800e142:	9305      	str	r3, [sp, #20]
 800e144:	4620      	mov	r0, r4
 800e146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e14a:	3a30      	subs	r2, #48	@ 0x30
 800e14c:	2a09      	cmp	r2, #9
 800e14e:	d903      	bls.n	800e158 <_vfiprintf_r+0x1cc>
 800e150:	2b00      	cmp	r3, #0
 800e152:	d0c6      	beq.n	800e0e2 <_vfiprintf_r+0x156>
 800e154:	9105      	str	r1, [sp, #20]
 800e156:	e7c4      	b.n	800e0e2 <_vfiprintf_r+0x156>
 800e158:	fb0c 2101 	mla	r1, ip, r1, r2
 800e15c:	4604      	mov	r4, r0
 800e15e:	2301      	movs	r3, #1
 800e160:	e7f0      	b.n	800e144 <_vfiprintf_r+0x1b8>
 800e162:	ab03      	add	r3, sp, #12
 800e164:	462a      	mov	r2, r5
 800e166:	a904      	add	r1, sp, #16
 800e168:	4630      	mov	r0, r6
 800e16a:	9300      	str	r3, [sp, #0]
 800e16c:	4b11      	ldr	r3, [pc, #68]	@ (800e1b4 <_vfiprintf_r+0x228>)
 800e16e:	f7fd fe25 	bl	800bdbc <_printf_float>
 800e172:	4607      	mov	r7, r0
 800e174:	1c78      	adds	r0, r7, #1
 800e176:	d1d6      	bne.n	800e126 <_vfiprintf_r+0x19a>
 800e178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e17a:	07d9      	lsls	r1, r3, #31
 800e17c:	d405      	bmi.n	800e18a <_vfiprintf_r+0x1fe>
 800e17e:	89ab      	ldrh	r3, [r5, #12]
 800e180:	059a      	lsls	r2, r3, #22
 800e182:	d402      	bmi.n	800e18a <_vfiprintf_r+0x1fe>
 800e184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e186:	f7fe fbed 	bl	800c964 <__retarget_lock_release_recursive>
 800e18a:	89ab      	ldrh	r3, [r5, #12]
 800e18c:	065b      	lsls	r3, r3, #25
 800e18e:	f53f af1f 	bmi.w	800dfd0 <_vfiprintf_r+0x44>
 800e192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e194:	e71e      	b.n	800dfd4 <_vfiprintf_r+0x48>
 800e196:	ab03      	add	r3, sp, #12
 800e198:	462a      	mov	r2, r5
 800e19a:	a904      	add	r1, sp, #16
 800e19c:	4630      	mov	r0, r6
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	4b04      	ldr	r3, [pc, #16]	@ (800e1b4 <_vfiprintf_r+0x228>)
 800e1a2:	f7fe f8a7 	bl	800c2f4 <_printf_i>
 800e1a6:	e7e4      	b.n	800e172 <_vfiprintf_r+0x1e6>
 800e1a8:	0800e9e9 	.word	0x0800e9e9
 800e1ac:	0800e9f3 	.word	0x0800e9f3
 800e1b0:	0800bdbd 	.word	0x0800bdbd
 800e1b4:	0800df67 	.word	0x0800df67
 800e1b8:	0800e9ef 	.word	0x0800e9ef

0800e1bc <__sflush_r>:
 800e1bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c4:	0716      	lsls	r6, r2, #28
 800e1c6:	4605      	mov	r5, r0
 800e1c8:	460c      	mov	r4, r1
 800e1ca:	d454      	bmi.n	800e276 <__sflush_r+0xba>
 800e1cc:	684b      	ldr	r3, [r1, #4]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	dc02      	bgt.n	800e1d8 <__sflush_r+0x1c>
 800e1d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	dd48      	ble.n	800e26a <__sflush_r+0xae>
 800e1d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e1da:	2e00      	cmp	r6, #0
 800e1dc:	d045      	beq.n	800e26a <__sflush_r+0xae>
 800e1de:	2300      	movs	r3, #0
 800e1e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e1e4:	682f      	ldr	r7, [r5, #0]
 800e1e6:	6a21      	ldr	r1, [r4, #32]
 800e1e8:	602b      	str	r3, [r5, #0]
 800e1ea:	d030      	beq.n	800e24e <__sflush_r+0x92>
 800e1ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e1ee:	89a3      	ldrh	r3, [r4, #12]
 800e1f0:	0759      	lsls	r1, r3, #29
 800e1f2:	d505      	bpl.n	800e200 <__sflush_r+0x44>
 800e1f4:	6863      	ldr	r3, [r4, #4]
 800e1f6:	1ad2      	subs	r2, r2, r3
 800e1f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e1fa:	b10b      	cbz	r3, 800e200 <__sflush_r+0x44>
 800e1fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e1fe:	1ad2      	subs	r2, r2, r3
 800e200:	2300      	movs	r3, #0
 800e202:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e204:	6a21      	ldr	r1, [r4, #32]
 800e206:	4628      	mov	r0, r5
 800e208:	47b0      	blx	r6
 800e20a:	1c43      	adds	r3, r0, #1
 800e20c:	89a3      	ldrh	r3, [r4, #12]
 800e20e:	d106      	bne.n	800e21e <__sflush_r+0x62>
 800e210:	6829      	ldr	r1, [r5, #0]
 800e212:	291d      	cmp	r1, #29
 800e214:	d82b      	bhi.n	800e26e <__sflush_r+0xb2>
 800e216:	4a2a      	ldr	r2, [pc, #168]	@ (800e2c0 <__sflush_r+0x104>)
 800e218:	410a      	asrs	r2, r1
 800e21a:	07d6      	lsls	r6, r2, #31
 800e21c:	d427      	bmi.n	800e26e <__sflush_r+0xb2>
 800e21e:	2200      	movs	r2, #0
 800e220:	04d9      	lsls	r1, r3, #19
 800e222:	6062      	str	r2, [r4, #4]
 800e224:	6922      	ldr	r2, [r4, #16]
 800e226:	6022      	str	r2, [r4, #0]
 800e228:	d504      	bpl.n	800e234 <__sflush_r+0x78>
 800e22a:	1c42      	adds	r2, r0, #1
 800e22c:	d101      	bne.n	800e232 <__sflush_r+0x76>
 800e22e:	682b      	ldr	r3, [r5, #0]
 800e230:	b903      	cbnz	r3, 800e234 <__sflush_r+0x78>
 800e232:	6560      	str	r0, [r4, #84]	@ 0x54
 800e234:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e236:	602f      	str	r7, [r5, #0]
 800e238:	b1b9      	cbz	r1, 800e26a <__sflush_r+0xae>
 800e23a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e23e:	4299      	cmp	r1, r3
 800e240:	d002      	beq.n	800e248 <__sflush_r+0x8c>
 800e242:	4628      	mov	r0, r5
 800e244:	f7ff f9f0 	bl	800d628 <_free_r>
 800e248:	2300      	movs	r3, #0
 800e24a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e24c:	e00d      	b.n	800e26a <__sflush_r+0xae>
 800e24e:	2301      	movs	r3, #1
 800e250:	4628      	mov	r0, r5
 800e252:	47b0      	blx	r6
 800e254:	4602      	mov	r2, r0
 800e256:	1c50      	adds	r0, r2, #1
 800e258:	d1c9      	bne.n	800e1ee <__sflush_r+0x32>
 800e25a:	682b      	ldr	r3, [r5, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d0c6      	beq.n	800e1ee <__sflush_r+0x32>
 800e260:	2b1d      	cmp	r3, #29
 800e262:	d001      	beq.n	800e268 <__sflush_r+0xac>
 800e264:	2b16      	cmp	r3, #22
 800e266:	d11d      	bne.n	800e2a4 <__sflush_r+0xe8>
 800e268:	602f      	str	r7, [r5, #0]
 800e26a:	2000      	movs	r0, #0
 800e26c:	e021      	b.n	800e2b2 <__sflush_r+0xf6>
 800e26e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e272:	b21b      	sxth	r3, r3
 800e274:	e01a      	b.n	800e2ac <__sflush_r+0xf0>
 800e276:	690f      	ldr	r7, [r1, #16]
 800e278:	2f00      	cmp	r7, #0
 800e27a:	d0f6      	beq.n	800e26a <__sflush_r+0xae>
 800e27c:	0793      	lsls	r3, r2, #30
 800e27e:	680e      	ldr	r6, [r1, #0]
 800e280:	600f      	str	r7, [r1, #0]
 800e282:	bf0c      	ite	eq
 800e284:	694b      	ldreq	r3, [r1, #20]
 800e286:	2300      	movne	r3, #0
 800e288:	eba6 0807 	sub.w	r8, r6, r7
 800e28c:	608b      	str	r3, [r1, #8]
 800e28e:	f1b8 0f00 	cmp.w	r8, #0
 800e292:	ddea      	ble.n	800e26a <__sflush_r+0xae>
 800e294:	4643      	mov	r3, r8
 800e296:	463a      	mov	r2, r7
 800e298:	6a21      	ldr	r1, [r4, #32]
 800e29a:	4628      	mov	r0, r5
 800e29c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e29e:	47b0      	blx	r6
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	dc08      	bgt.n	800e2b6 <__sflush_r+0xfa>
 800e2a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e2b0:	81a3      	strh	r3, [r4, #12]
 800e2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b6:	4407      	add	r7, r0
 800e2b8:	eba8 0800 	sub.w	r8, r8, r0
 800e2bc:	e7e7      	b.n	800e28e <__sflush_r+0xd2>
 800e2be:	bf00      	nop
 800e2c0:	dfbffffe 	.word	0xdfbffffe

0800e2c4 <_fflush_r>:
 800e2c4:	b538      	push	{r3, r4, r5, lr}
 800e2c6:	690b      	ldr	r3, [r1, #16]
 800e2c8:	4605      	mov	r5, r0
 800e2ca:	460c      	mov	r4, r1
 800e2cc:	b913      	cbnz	r3, 800e2d4 <_fflush_r+0x10>
 800e2ce:	2500      	movs	r5, #0
 800e2d0:	4628      	mov	r0, r5
 800e2d2:	bd38      	pop	{r3, r4, r5, pc}
 800e2d4:	b118      	cbz	r0, 800e2de <_fflush_r+0x1a>
 800e2d6:	6a03      	ldr	r3, [r0, #32]
 800e2d8:	b90b      	cbnz	r3, 800e2de <_fflush_r+0x1a>
 800e2da:	f7fe f9b7 	bl	800c64c <__sinit>
 800e2de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d0f3      	beq.n	800e2ce <_fflush_r+0xa>
 800e2e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e2e8:	07d0      	lsls	r0, r2, #31
 800e2ea:	d404      	bmi.n	800e2f6 <_fflush_r+0x32>
 800e2ec:	0599      	lsls	r1, r3, #22
 800e2ee:	d402      	bmi.n	800e2f6 <_fflush_r+0x32>
 800e2f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e2f2:	f7fe fb36 	bl	800c962 <__retarget_lock_acquire_recursive>
 800e2f6:	4628      	mov	r0, r5
 800e2f8:	4621      	mov	r1, r4
 800e2fa:	f7ff ff5f 	bl	800e1bc <__sflush_r>
 800e2fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e300:	4605      	mov	r5, r0
 800e302:	07da      	lsls	r2, r3, #31
 800e304:	d4e4      	bmi.n	800e2d0 <_fflush_r+0xc>
 800e306:	89a3      	ldrh	r3, [r4, #12]
 800e308:	059b      	lsls	r3, r3, #22
 800e30a:	d4e1      	bmi.n	800e2d0 <_fflush_r+0xc>
 800e30c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e30e:	f7fe fb29 	bl	800c964 <__retarget_lock_release_recursive>
 800e312:	e7dd      	b.n	800e2d0 <_fflush_r+0xc>

0800e314 <__swhatbuf_r>:
 800e314:	b570      	push	{r4, r5, r6, lr}
 800e316:	460c      	mov	r4, r1
 800e318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e31c:	b096      	sub	sp, #88	@ 0x58
 800e31e:	4615      	mov	r5, r2
 800e320:	2900      	cmp	r1, #0
 800e322:	461e      	mov	r6, r3
 800e324:	da0c      	bge.n	800e340 <__swhatbuf_r+0x2c>
 800e326:	89a3      	ldrh	r3, [r4, #12]
 800e328:	2100      	movs	r1, #0
 800e32a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e32e:	bf14      	ite	ne
 800e330:	2340      	movne	r3, #64	@ 0x40
 800e332:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e336:	2000      	movs	r0, #0
 800e338:	6031      	str	r1, [r6, #0]
 800e33a:	602b      	str	r3, [r5, #0]
 800e33c:	b016      	add	sp, #88	@ 0x58
 800e33e:	bd70      	pop	{r4, r5, r6, pc}
 800e340:	466a      	mov	r2, sp
 800e342:	f000 f849 	bl	800e3d8 <_fstat_r>
 800e346:	2800      	cmp	r0, #0
 800e348:	dbed      	blt.n	800e326 <__swhatbuf_r+0x12>
 800e34a:	9901      	ldr	r1, [sp, #4]
 800e34c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e350:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e354:	4259      	negs	r1, r3
 800e356:	4159      	adcs	r1, r3
 800e358:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e35c:	e7eb      	b.n	800e336 <__swhatbuf_r+0x22>

0800e35e <__smakebuf_r>:
 800e35e:	898b      	ldrh	r3, [r1, #12]
 800e360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e362:	079d      	lsls	r5, r3, #30
 800e364:	4606      	mov	r6, r0
 800e366:	460c      	mov	r4, r1
 800e368:	d507      	bpl.n	800e37a <__smakebuf_r+0x1c>
 800e36a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e36e:	6023      	str	r3, [r4, #0]
 800e370:	6123      	str	r3, [r4, #16]
 800e372:	2301      	movs	r3, #1
 800e374:	6163      	str	r3, [r4, #20]
 800e376:	b003      	add	sp, #12
 800e378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e37a:	ab01      	add	r3, sp, #4
 800e37c:	466a      	mov	r2, sp
 800e37e:	f7ff ffc9 	bl	800e314 <__swhatbuf_r>
 800e382:	9f00      	ldr	r7, [sp, #0]
 800e384:	4605      	mov	r5, r0
 800e386:	4630      	mov	r0, r6
 800e388:	4639      	mov	r1, r7
 800e38a:	f7ff f9c1 	bl	800d710 <_malloc_r>
 800e38e:	b948      	cbnz	r0, 800e3a4 <__smakebuf_r+0x46>
 800e390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e394:	059a      	lsls	r2, r3, #22
 800e396:	d4ee      	bmi.n	800e376 <__smakebuf_r+0x18>
 800e398:	f023 0303 	bic.w	r3, r3, #3
 800e39c:	f043 0302 	orr.w	r3, r3, #2
 800e3a0:	81a3      	strh	r3, [r4, #12]
 800e3a2:	e7e2      	b.n	800e36a <__smakebuf_r+0xc>
 800e3a4:	89a3      	ldrh	r3, [r4, #12]
 800e3a6:	6020      	str	r0, [r4, #0]
 800e3a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3ac:	81a3      	strh	r3, [r4, #12]
 800e3ae:	9b01      	ldr	r3, [sp, #4]
 800e3b0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e3b4:	b15b      	cbz	r3, 800e3ce <__smakebuf_r+0x70>
 800e3b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3ba:	4630      	mov	r0, r6
 800e3bc:	f000 f81e 	bl	800e3fc <_isatty_r>
 800e3c0:	b128      	cbz	r0, 800e3ce <__smakebuf_r+0x70>
 800e3c2:	89a3      	ldrh	r3, [r4, #12]
 800e3c4:	f023 0303 	bic.w	r3, r3, #3
 800e3c8:	f043 0301 	orr.w	r3, r3, #1
 800e3cc:	81a3      	strh	r3, [r4, #12]
 800e3ce:	89a3      	ldrh	r3, [r4, #12]
 800e3d0:	431d      	orrs	r5, r3
 800e3d2:	81a5      	strh	r5, [r4, #12]
 800e3d4:	e7cf      	b.n	800e376 <__smakebuf_r+0x18>
	...

0800e3d8 <_fstat_r>:
 800e3d8:	b538      	push	{r3, r4, r5, lr}
 800e3da:	2300      	movs	r3, #0
 800e3dc:	4d06      	ldr	r5, [pc, #24]	@ (800e3f8 <_fstat_r+0x20>)
 800e3de:	4604      	mov	r4, r0
 800e3e0:	4608      	mov	r0, r1
 800e3e2:	4611      	mov	r1, r2
 800e3e4:	602b      	str	r3, [r5, #0]
 800e3e6:	f7f3 ff53 	bl	8002290 <_fstat>
 800e3ea:	1c43      	adds	r3, r0, #1
 800e3ec:	d102      	bne.n	800e3f4 <_fstat_r+0x1c>
 800e3ee:	682b      	ldr	r3, [r5, #0]
 800e3f0:	b103      	cbz	r3, 800e3f4 <_fstat_r+0x1c>
 800e3f2:	6023      	str	r3, [r4, #0]
 800e3f4:	bd38      	pop	{r3, r4, r5, pc}
 800e3f6:	bf00      	nop
 800e3f8:	20002710 	.word	0x20002710

0800e3fc <_isatty_r>:
 800e3fc:	b538      	push	{r3, r4, r5, lr}
 800e3fe:	2300      	movs	r3, #0
 800e400:	4d05      	ldr	r5, [pc, #20]	@ (800e418 <_isatty_r+0x1c>)
 800e402:	4604      	mov	r4, r0
 800e404:	4608      	mov	r0, r1
 800e406:	602b      	str	r3, [r5, #0]
 800e408:	f7f3 ff52 	bl	80022b0 <_isatty>
 800e40c:	1c43      	adds	r3, r0, #1
 800e40e:	d102      	bne.n	800e416 <_isatty_r+0x1a>
 800e410:	682b      	ldr	r3, [r5, #0]
 800e412:	b103      	cbz	r3, 800e416 <_isatty_r+0x1a>
 800e414:	6023      	str	r3, [r4, #0]
 800e416:	bd38      	pop	{r3, r4, r5, pc}
 800e418:	20002710 	.word	0x20002710

0800e41c <_sbrk_r>:
 800e41c:	b538      	push	{r3, r4, r5, lr}
 800e41e:	2300      	movs	r3, #0
 800e420:	4d05      	ldr	r5, [pc, #20]	@ (800e438 <_sbrk_r+0x1c>)
 800e422:	4604      	mov	r4, r0
 800e424:	4608      	mov	r0, r1
 800e426:	602b      	str	r3, [r5, #0]
 800e428:	f7f3 ff5a 	bl	80022e0 <_sbrk>
 800e42c:	1c43      	adds	r3, r0, #1
 800e42e:	d102      	bne.n	800e436 <_sbrk_r+0x1a>
 800e430:	682b      	ldr	r3, [r5, #0]
 800e432:	b103      	cbz	r3, 800e436 <_sbrk_r+0x1a>
 800e434:	6023      	str	r3, [r4, #0]
 800e436:	bd38      	pop	{r3, r4, r5, pc}
 800e438:	20002710 	.word	0x20002710

0800e43c <memcpy>:
 800e43c:	440a      	add	r2, r1
 800e43e:	1e43      	subs	r3, r0, #1
 800e440:	4291      	cmp	r1, r2
 800e442:	d100      	bne.n	800e446 <memcpy+0xa>
 800e444:	4770      	bx	lr
 800e446:	b510      	push	{r4, lr}
 800e448:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e44c:	4291      	cmp	r1, r2
 800e44e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e452:	d1f9      	bne.n	800e448 <memcpy+0xc>
 800e454:	bd10      	pop	{r4, pc}
	...

0800e458 <__assert_func>:
 800e458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e45a:	4614      	mov	r4, r2
 800e45c:	461a      	mov	r2, r3
 800e45e:	4b09      	ldr	r3, [pc, #36]	@ (800e484 <__assert_func+0x2c>)
 800e460:	4605      	mov	r5, r0
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	68d8      	ldr	r0, [r3, #12]
 800e466:	b954      	cbnz	r4, 800e47e <__assert_func+0x26>
 800e468:	4b07      	ldr	r3, [pc, #28]	@ (800e488 <__assert_func+0x30>)
 800e46a:	461c      	mov	r4, r3
 800e46c:	9100      	str	r1, [sp, #0]
 800e46e:	4907      	ldr	r1, [pc, #28]	@ (800e48c <__assert_func+0x34>)
 800e470:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e474:	462b      	mov	r3, r5
 800e476:	f000 f841 	bl	800e4fc <fiprintf>
 800e47a:	f000 f851 	bl	800e520 <abort>
 800e47e:	4b04      	ldr	r3, [pc, #16]	@ (800e490 <__assert_func+0x38>)
 800e480:	e7f4      	b.n	800e46c <__assert_func+0x14>
 800e482:	bf00      	nop
 800e484:	20000018 	.word	0x20000018
 800e488:	0800ea3f 	.word	0x0800ea3f
 800e48c:	0800ea11 	.word	0x0800ea11
 800e490:	0800ea04 	.word	0x0800ea04

0800e494 <_calloc_r>:
 800e494:	b570      	push	{r4, r5, r6, lr}
 800e496:	fba1 5402 	umull	r5, r4, r1, r2
 800e49a:	b93c      	cbnz	r4, 800e4ac <_calloc_r+0x18>
 800e49c:	4629      	mov	r1, r5
 800e49e:	f7ff f937 	bl	800d710 <_malloc_r>
 800e4a2:	4606      	mov	r6, r0
 800e4a4:	b928      	cbnz	r0, 800e4b2 <_calloc_r+0x1e>
 800e4a6:	2600      	movs	r6, #0
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	bd70      	pop	{r4, r5, r6, pc}
 800e4ac:	220c      	movs	r2, #12
 800e4ae:	6002      	str	r2, [r0, #0]
 800e4b0:	e7f9      	b.n	800e4a6 <_calloc_r+0x12>
 800e4b2:	462a      	mov	r2, r5
 800e4b4:	4621      	mov	r1, r4
 800e4b6:	f7fe f9d7 	bl	800c868 <memset>
 800e4ba:	e7f5      	b.n	800e4a8 <_calloc_r+0x14>

0800e4bc <__ascii_mbtowc>:
 800e4bc:	b082      	sub	sp, #8
 800e4be:	b901      	cbnz	r1, 800e4c2 <__ascii_mbtowc+0x6>
 800e4c0:	a901      	add	r1, sp, #4
 800e4c2:	b142      	cbz	r2, 800e4d6 <__ascii_mbtowc+0x1a>
 800e4c4:	b14b      	cbz	r3, 800e4da <__ascii_mbtowc+0x1e>
 800e4c6:	7813      	ldrb	r3, [r2, #0]
 800e4c8:	600b      	str	r3, [r1, #0]
 800e4ca:	7812      	ldrb	r2, [r2, #0]
 800e4cc:	1e10      	subs	r0, r2, #0
 800e4ce:	bf18      	it	ne
 800e4d0:	2001      	movne	r0, #1
 800e4d2:	b002      	add	sp, #8
 800e4d4:	4770      	bx	lr
 800e4d6:	4610      	mov	r0, r2
 800e4d8:	e7fb      	b.n	800e4d2 <__ascii_mbtowc+0x16>
 800e4da:	f06f 0001 	mvn.w	r0, #1
 800e4de:	e7f8      	b.n	800e4d2 <__ascii_mbtowc+0x16>

0800e4e0 <__ascii_wctomb>:
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	4608      	mov	r0, r1
 800e4e4:	b141      	cbz	r1, 800e4f8 <__ascii_wctomb+0x18>
 800e4e6:	2aff      	cmp	r2, #255	@ 0xff
 800e4e8:	d904      	bls.n	800e4f4 <__ascii_wctomb+0x14>
 800e4ea:	228a      	movs	r2, #138	@ 0x8a
 800e4ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e4f0:	601a      	str	r2, [r3, #0]
 800e4f2:	4770      	bx	lr
 800e4f4:	2001      	movs	r0, #1
 800e4f6:	700a      	strb	r2, [r1, #0]
 800e4f8:	4770      	bx	lr
	...

0800e4fc <fiprintf>:
 800e4fc:	b40e      	push	{r1, r2, r3}
 800e4fe:	b503      	push	{r0, r1, lr}
 800e500:	ab03      	add	r3, sp, #12
 800e502:	4601      	mov	r1, r0
 800e504:	4805      	ldr	r0, [pc, #20]	@ (800e51c <fiprintf+0x20>)
 800e506:	f853 2b04 	ldr.w	r2, [r3], #4
 800e50a:	6800      	ldr	r0, [r0, #0]
 800e50c:	9301      	str	r3, [sp, #4]
 800e50e:	f7ff fd3d 	bl	800df8c <_vfiprintf_r>
 800e512:	b002      	add	sp, #8
 800e514:	f85d eb04 	ldr.w	lr, [sp], #4
 800e518:	b003      	add	sp, #12
 800e51a:	4770      	bx	lr
 800e51c:	20000018 	.word	0x20000018

0800e520 <abort>:
 800e520:	2006      	movs	r0, #6
 800e522:	b508      	push	{r3, lr}
 800e524:	f000 f82c 	bl	800e580 <raise>
 800e528:	2001      	movs	r0, #1
 800e52a:	f7f3 fe61 	bl	80021f0 <_exit>

0800e52e <_raise_r>:
 800e52e:	291f      	cmp	r1, #31
 800e530:	b538      	push	{r3, r4, r5, lr}
 800e532:	4605      	mov	r5, r0
 800e534:	460c      	mov	r4, r1
 800e536:	d904      	bls.n	800e542 <_raise_r+0x14>
 800e538:	2316      	movs	r3, #22
 800e53a:	6003      	str	r3, [r0, #0]
 800e53c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e540:	bd38      	pop	{r3, r4, r5, pc}
 800e542:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e544:	b112      	cbz	r2, 800e54c <_raise_r+0x1e>
 800e546:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e54a:	b94b      	cbnz	r3, 800e560 <_raise_r+0x32>
 800e54c:	4628      	mov	r0, r5
 800e54e:	f000 f831 	bl	800e5b4 <_getpid_r>
 800e552:	4622      	mov	r2, r4
 800e554:	4601      	mov	r1, r0
 800e556:	4628      	mov	r0, r5
 800e558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e55c:	f000 b818 	b.w	800e590 <_kill_r>
 800e560:	2b01      	cmp	r3, #1
 800e562:	d00a      	beq.n	800e57a <_raise_r+0x4c>
 800e564:	1c59      	adds	r1, r3, #1
 800e566:	d103      	bne.n	800e570 <_raise_r+0x42>
 800e568:	2316      	movs	r3, #22
 800e56a:	6003      	str	r3, [r0, #0]
 800e56c:	2001      	movs	r0, #1
 800e56e:	e7e7      	b.n	800e540 <_raise_r+0x12>
 800e570:	2100      	movs	r1, #0
 800e572:	4620      	mov	r0, r4
 800e574:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e578:	4798      	blx	r3
 800e57a:	2000      	movs	r0, #0
 800e57c:	e7e0      	b.n	800e540 <_raise_r+0x12>
	...

0800e580 <raise>:
 800e580:	4b02      	ldr	r3, [pc, #8]	@ (800e58c <raise+0xc>)
 800e582:	4601      	mov	r1, r0
 800e584:	6818      	ldr	r0, [r3, #0]
 800e586:	f7ff bfd2 	b.w	800e52e <_raise_r>
 800e58a:	bf00      	nop
 800e58c:	20000018 	.word	0x20000018

0800e590 <_kill_r>:
 800e590:	b538      	push	{r3, r4, r5, lr}
 800e592:	2300      	movs	r3, #0
 800e594:	4d06      	ldr	r5, [pc, #24]	@ (800e5b0 <_kill_r+0x20>)
 800e596:	4604      	mov	r4, r0
 800e598:	4608      	mov	r0, r1
 800e59a:	4611      	mov	r1, r2
 800e59c:	602b      	str	r3, [r5, #0]
 800e59e:	f7f3 fe17 	bl	80021d0 <_kill>
 800e5a2:	1c43      	adds	r3, r0, #1
 800e5a4:	d102      	bne.n	800e5ac <_kill_r+0x1c>
 800e5a6:	682b      	ldr	r3, [r5, #0]
 800e5a8:	b103      	cbz	r3, 800e5ac <_kill_r+0x1c>
 800e5aa:	6023      	str	r3, [r4, #0]
 800e5ac:	bd38      	pop	{r3, r4, r5, pc}
 800e5ae:	bf00      	nop
 800e5b0:	20002710 	.word	0x20002710

0800e5b4 <_getpid_r>:
 800e5b4:	f7f3 be04 	b.w	80021c0 <_getpid>

0800e5b8 <_init>:
 800e5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ba:	bf00      	nop
 800e5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5be:	bc08      	pop	{r3}
 800e5c0:	469e      	mov	lr, r3
 800e5c2:	4770      	bx	lr

0800e5c4 <_fini>:
 800e5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5c6:	bf00      	nop
 800e5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ca:	bc08      	pop	{r3}
 800e5cc:	469e      	mov	lr, r3
 800e5ce:	4770      	bx	lr
